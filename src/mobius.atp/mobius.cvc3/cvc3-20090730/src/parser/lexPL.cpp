#line 2 "lexPL.cpp"

#line 4 "lexPL.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer PL_create_buffer
#define yy_delete_buffer PL_delete_buffer
#define yy_flex_debug PL_flex_debug
#define yy_init_buffer PL_init_buffer
#define yy_flush_buffer PL_flush_buffer
#define yy_load_buffer_state PL_load_buffer_state
#define yy_switch_to_buffer PL_switch_to_buffer
#define yyin PLin
#define yyleng PLleng
#define yylex PLlex
#define yylineno PLlineno
#define yyout PLout
#define yyrestart PLrestart
#define yytext PLtext
#define yywrap PLwrap
#define yyalloc PLalloc
#define yyrealloc PLrealloc
#define yyfree PLfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE PLrestart(PLin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int PLleng;

extern FILE *PLin, *PLout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE PLlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-PLlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < PLleng; ++yyl )\
                    if ( PLtext[yyl] == '\n' )\
                        --PLlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up PLtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up PLtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via PLrestart()), so that the user can continue scanning by
	 * just pointing PLin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when PLtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int PLleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow PLwrap()'s to do buffer switches
 * instead of setting up a fresh PLin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void PLrestart (FILE *input_file  );
void PL_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE PL_create_buffer (FILE *file,int size  );
void PL_delete_buffer (YY_BUFFER_STATE b  );
void PL_flush_buffer (YY_BUFFER_STATE b  );
void PLpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void PLpop_buffer_state (void );

static void PLensure_buffer_stack (void );
static void PL_load_buffer_state (void );
static void PL_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER PL_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE PL_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE PL_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE PL_scan_bytes (yyconst char *bytes,int len  );

void *PLalloc (yy_size_t  );
void *PLrealloc (void *,yy_size_t  );
void PLfree (void *  );

#define yy_new_buffer PL_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        PLensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            PL_create_buffer(PLin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        PLensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            PL_create_buffer(PLin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define PLwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *PLin = (FILE *) 0, *PLout = (FILE *) 0;

typedef int yy_state_type;

extern int PLlineno;

int PLlineno = 1;

extern char *PLtext;
#define yytext_ptr PLtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up PLtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	PLleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 154
#define YY_END_OF_BUFFER 155
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[556] =
    {   0,
        0,    0,    0,    0,    0,    0,  155,  153,    2,    1,
       13,    9,   13,    6,   39,   13,   21,   19,   20,   13,
       23,    5,    5,   13,   26,   13,   28,   37,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
       13,   22,   13,   40,   38,    8,    7,   12,  154,   11,
       12,   34,   32,   33,   35,   14,   16,    5,    0,    0,
       15,   46,   27,   17,   29,   47,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,   88,

       89,  152,  152,  152,  152,  152,   95,  152,   96,  152,
      152,  152,  152,  152,  152,  152,  152,   52,  152,  152,
      152,  152,  152,  152,  152,  152,   31,  152,   10,    0,
        0,   18,   77,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  114,  152,   25,  152,
      152,  152,   83,  152,  152,  152,  152,  152,  152,  152,
       98,  152,  152,   92,   24,   93,  152,  152,  139,  152,
      152,  152,  152,  152,  152,  152,  106,  152,  152,  152,
      152,  152,  152,  152,  105,    0,    0,  152,  152,  152,

      152,  152,  152,  152,  152,  152,   60,   58,   59,  152,
       57,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  122,  152,  152,  152,  152,  152,  152,  123,   81,
      152,  152,  152,  152,  152,  152,  152,  152,  118,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  138,  152,
       97,  152,  152,  152,  152,  152,  101,  152,  152,  102,
      103,  152,  152,  104,    3,    4,  152,   78,   36,  152,
      152,  152,  152,  152,  152,  152,  152,  152,   43,  152,
      152,  152,  152,   51,   49,   71,   50,   48,  152,  152,

       74,  152,  152,  152,  152,  152,   41,  152,  152,  152,
      152,  152,  152,  152,  152,   82,   84,  152,   86,   30,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  140,  152,  120,  152,  110,  144,  152,  152,  152,
      152,  115,  152,  152,  133,  152,  109,  152,  152,  152,
      152,   72,   44,   73,   76,   42,   65,  152,   55,   56,
       67,   70,   69,  152,   66,  152,   68,   45,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,   85,   87,  146,  152,  150,  152,  152,  152,  152,
       90,  117,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  152,  152,  152,   79,  152,  152,
       62,  152,  152,  152,  152,  145,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  124,   63,  152,
      107,  152,  152,  152,  152,  113,  152,  152,   99,  152,
      116,  152,  152,  152,  152,  152,   54,   75,  152,  111,
      152,  112,  152,  152,   80,   61,  152,  152,  152,  127,
      128,  152,  147,  152,  152,  152,  152,  152,   91,  152,
      152,  152,  152,  152,  100,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  149,  152,  152,  142,  152,  152,
      152,  119,  152,  134,  152,  152,  152,  148,  152,  152,

      152,  152,  126,  152,  152,   94,  152,  121,  141,  151,
      152,  135,   64,  152,  152,  152,  152,  152,  152,  152,
      143,  152,   53,  152,  137,  152,  131,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  136,  152,  152,  152,
      130,  108,  152,  152,  152,  125,  152,  152,  152,  152,
      132,  152,  152,  129,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,    4,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,    4,   22,
       23,   24,   10,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,    1,   57,   58,   57,   57,

       59,   57,   35,   60,   61,   35,   35,   35,   35,   62,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   63,
       35,   35,    4,   64,    4,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    3,
        1,    1,    1,    1,    1,    1,    1,    4,    4,    4,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    3,    4,    4,    4,    3,
        3,    3,    3,    1,    3
    } ;

static yyconst flex_int16_t yy_base[562] =
    {   0,
        0,    0,  587,  586,   63,   64,  588,  591,  591,  591,
      591,  591,   58,  591,  591,  581,  591,  591,  562,  569,
      561,   53,   56,  560,   55,  558,   56,  591,   42,   48,
       57,   72,   65,   63,  551,  550,   76,    0,   61,  539,
      538,   53,   79,  531,  546,   75,   95,  536,   93,  534,
      567,  591,    0,  591,  591,  591,  591,  591,  591,  591,
        0,  591,  591,  591,  591,  591,  591,  111,  511,  512,
      591,  591,  546,  591,  591,  591,    0,  540,   58,  524,
      522,  526,  120,  528,  534,   93,  518,  530,   89,  523,
      527,  515,  529,  523,  519,  515,  511,  508,  515,    0,

      106,  495,  512,  504,  519,  502,    0,  501,    0,  500,
      503,  509,  498,  511,  109,  502,  512,    0,  510,  507,
      114,  495,  490,  504,  488,  489,  591,    0,  591,  469,
      467,  591,    0,  484,  115,  124,  481,  490,  482,  485,
      117,  137,  478,  116,  486,  138,  147,  482,  145,  104,
      491,  483,  491,  473,  478,  490,    0,  470,    0,  473,
      473,  143,  478,  467,  466,  469,  160,  452,  466,  469,
      460,  470,  476,    0,    0,    0,  468,  456,  142,  461,
      466,  455,  460,  159,  450,  105,    0,  456,  163,  464,
      463,  449,  448,  457,    0,  176,    0,  456,  438,  439,

      443,  447,  454,  453,  449,  443,    0,    0,    0,  447,
        0,  442,  439,  434,  430,  434,  429,  439,  166,  435,
      167,  431,  440,  442,  434,  433,  432,  435,  424,  420,
      419,    0,  425,  169,  415,  414,  424,  401,    0,    0,
      425,  424,  409,  423,  409,  414,  420,  173,    0,  403,
      408,  408,  417,  405,  414,  403,  398,  396,  384,  389,
        0,  393,  411,  399,  390,  384,    0,  403,  388,    0,
        0,  405,  400,    0,  187,    0,  373,    0,    0,  383,
      386,  398,  174,  382,  383,  380,  377,  392,    0,  376,
      389,  171,  371,    0,    0,    0,    0,    0,  388,  378,

        0,  376,  367,  374,  374,  368,    0,  370,  163,  360,
      369,  377,  356,  366,  189,    0,    0,  360,    0,    0,
      366,  357,  368,  359,  349,  369,  370,  351,  369,  355,
      350,  336,  363,  334,  345,    0,    0,  345,  361,  352,
      344,    0,  353,  355,    0,  335,  347,  335,  334,  339,
      332,    0,    0,    0,    0,    0,    0,  350,    0,    0,
        0,    0,    0,  330,    0,  328,    0,    0,  343,  346,
      326,  325,  323,  325,  326,  338,  321,  327,  320,  328,
      333,    0,    0,    0,  326,    0,  318,  328,  310,  326,
        0,    0,  316,  310,  313,  307,  323,  305,  304,  303,

      317,  306,  315,  318,  303,  308,  301,    0,  297,  294,
        0,  294,  288,  291,  285,    0,  304,  186,  303,  287,
      287,  290,  289,  296,  299,  289,  295,    0,    0,  292,
        0,  295,  281,  271,  280,    0,  289,  272,    0,  274,
        0,  273,  276,  274,  270,  286,    0,    0,  266,    0,
      269,    0,  260,  268,    0,    0,  261,  262,  265,    0,
      248,  274,    0,  272,  261,  270,  258,  257,    0,  252,
      258,  239,  250,  254,    0,  264,  261,  260,  263,  259,
      249,  240,  254,  184,    0,  241,  242,    0,  252,  251,
      250,    0,  239,    0,  234,  232,  237,    0,  237,  244,

      232,  229,    0,  227,  227,    0,  239,    0,    0,    0,
      225,    0,    0,  238,  225,  228,  219,  233,  218,  221,
        0,  231,    0,  222,    0,  224,  201,  210,  215,  224,
      223,  212,  210,  210,  201,  188,    0,  190,  185,  186,
        0,    0,  182,  182,  176,    0,  180,  175,  144,  132,
        0,   98,   66,    0,  591,  234,  238,  240,  242,  246,
      104
    } ;

static yyconst flex_int16_t yy_def[562] =
    {   0,
      555,    1,  556,  556,  557,  557,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      555,  555,  559,  555,  555,  555,  555,  555,  555,  555,
      560,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  555,  558,  555,  555,
      555,  555,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  555,  561,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  555,  561,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,    0,  555,  555,  555,  555,  555,
      555
    } ;

static yyconst flex_int16_t yy_nxt[657] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   11,
       16,   11,   17,   18,   19,   20,   21,   22,   23,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   38,   49,   50,   38,
       38,   51,    8,   11,   52,   53,   38,   38,   38,   38,
       38,   38,   38,   54,   55,   59,   59,   60,   60,   62,
       68,   68,   68,   68,   68,   68,   72,   73,   75,   76,
       78,   81,   84,  107,   79,   80,  103,   82,   95,   85,
      104,  134,   91,  108,   83,  109,   86,   87,   88,   96,

      135,   92,   97,   93,  110,   89,  100,  276,  116,  554,
       69,   63,   70,   94,  101,   61,   61,   90,  111,  102,
      117,  112,  119,  118,  113,  124,  125,  120,   68,   68,
       68,  154,  158,  170,  183,  159,  553,  121,  155,  189,
      199,  213,  229,  230,  122,  139,  207,  140,  265,  266,
      171,  141,  184,  201,  200,  214,  142,  143,  144,  190,
      145,  208,  146,  147,  148,  149,  209,  216,  150,  202,
      151,  552,  240,  226,  551,  218,  241,  217,  219,  220,
      210,  211,  227,  221,  222,  246,  256,  228,  262,  223,
      268,  247,  224,  275,  275,  294,  297,  257,  310,  350,

      323,  269,  311,  263,  275,  275,  370,  359,  550,  504,
      295,  298,  324,  360,  377,  453,  378,  325,  371,  549,
      548,  547,  351,  454,  505,  546,  545,  544,  543,  379,
      542,  541,  380,  381,   56,   56,   56,   56,   58,   58,
       58,   58,   77,   77,  128,  128,  129,  540,  129,  129,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,

      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,

      385,  384,  383,  382,  376,  375,  374,  373,  372,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  358,  357,
      356,  355,  354,  353,  352,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  296,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  274,
      273,  272,  271,  270,  267,  264,  261,  260,  259,  258,

      255,  254,  253,  252,  251,  250,  249,  248,  245,  244,
      243,  242,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  225,  215,  212,  206,  205,  204,  203,  198,  197,
      196,  195,  194,  193,  192,  191,  188,  187,  186,  185,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  157,  156,  153,  152,  138,  137,  136,  133,  132,
      131,  130,  127,  126,  123,  115,  114,  106,  105,   99,
       98,   74,   71,   67,   66,   65,   64,  555,   57,   57,
        7,  555,  555,  555,  555,  555,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555
    } ;

static yyconst flex_int16_t yy_chk[657] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    6,    5,    6,   13,
       22,   22,   22,   23,   23,   23,   25,   25,   27,   27,
       29,   30,   31,   42,   29,   29,   39,   30,   34,   31,
       39,   79,   33,   42,   30,   42,   31,   32,   32,   34,

       79,   33,   34,   33,   43,   32,   37,  561,   46,  553,
       22,   13,   22,   33,   37,    5,    6,   32,   43,   37,
       46,   43,   47,   46,   43,   49,   49,   47,   68,   68,
       68,   86,   89,  101,  115,   89,  552,   47,   86,  121,
      135,  144,  150,  150,   47,   83,  141,   83,  186,  186,
      101,   83,  115,  136,  135,  144,   83,   83,   83,  121,
       83,  141,   83,   83,   83,   83,  142,  146,   83,  136,
       83,  550,  162,  149,  549,  147,  162,  146,  147,  147,
      142,  142,  149,  147,  147,  167,  179,  149,  184,  147,
      189,  167,  147,  196,  196,  219,  221,  179,  234,  283,

      248,  189,  234,  184,  275,  275,  309,  292,  548,  484,
      219,  221,  248,  292,  315,  418,  315,  248,  309,  547,
      545,  544,  283,  418,  484,  543,  540,  539,  538,  315,
      536,  535,  315,  315,  556,  556,  556,  556,  557,  557,
      557,  557,  558,  558,  559,  559,  560,  534,  560,  560,
      533,  532,  531,  530,  529,  528,  527,  526,  524,  522,
      520,  519,  518,  517,  516,  515,  514,  511,  507,  505,
      504,  502,  501,  500,  499,  497,  496,  495,  493,  491,
      490,  489,  487,  486,  483,  482,  481,  480,  479,  478,
      477,  476,  474,  473,  472,  471,  470,  468,  467,  466,

      465,  464,  462,  461,  459,  458,  457,  454,  453,  451,
      449,  446,  445,  444,  443,  442,  440,  438,  437,  435,
      434,  433,  432,  430,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  417,  415,  414,  413,  412,  410,  409,
      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  390,  389,  388,  387,  385,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  366,  364,  358,  351,  350,  349,  348,
      347,  346,  344,  343,  341,  340,  339,  338,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,

      323,  322,  321,  318,  314,  313,  312,  311,  310,  308,
      306,  305,  304,  303,  302,  300,  299,  293,  291,  290,
      288,  287,  286,  285,  284,  282,  281,  280,  277,  273,
      272,  269,  268,  266,  265,  264,  263,  262,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  247,
      246,  245,  244,  243,  242,  241,  238,  237,  236,  235,
      233,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      222,  220,  218,  217,  216,  215,  214,  213,  212,  210,
      206,  205,  204,  203,  202,  201,  200,  199,  198,  194,
      193,  192,  191,  190,  188,  185,  183,  182,  181,  180,

      178,  177,  173,  172,  171,  170,  169,  168,  166,  165,
      164,  163,  161,  160,  158,  156,  155,  154,  153,  152,
      151,  148,  145,  143,  140,  139,  138,  137,  134,  131,
      130,  126,  125,  124,  123,  122,  120,  119,  117,  116,
      114,  113,  112,  111,  110,  108,  106,  105,  104,  103,
      102,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       90,   88,   87,   85,   84,   82,   81,   80,   78,   73,
       70,   69,   51,   50,   48,   45,   44,   41,   40,   36,
       35,   26,   24,   21,   20,   19,   16,    7,    4,    3,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[155] =
    {   0,
1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int PL_flex_debug;
int PL_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *PLtext;
#line 1 "PL.lex"
#line 2 "PL.lex"
/*****************************************************************************/
/*!
 * \file PL.lex
 * 
 * Author: Sergey Berezin
 * 
 * Created: Feb 06 03:00:43 GMT 2003
 *
 * <hr>
 *
 * License to use, copy, modify, sell and/or distribute this software
 * and its documentation for any purpose is hereby granted without
 * royalty, subject to the terms and conditions defined in the \ref
 * LICENSE file provided with this distribution.
 * 
 * <hr>
 * 
 */
/*****************************************************************************/

#include <iostream>
#include "parser_temp.h"
#include "expr_manager.h" /* for the benefit of parsePL_defs.h */
#include "parsePL_defs.h"
#include "debug.h"

namespace CVC3 {
  extern ParserTemp* parserTemp;
}

extern int PL_inputLine;
extern char *PLtext;

extern int PLerror (const char *msg);

static int PLinput(std::istream& is, char* buf, int size) {
  int res;
  if(is) {
    // If interactive, read line by line; otherwise read as much as we
    // can gobble
    if(CVC3::parserTemp->interactive) {
      // Print the current prompt
      std::cout << CVC3::parserTemp->getPrompt() << std::flush;
      // Set the prompt to "middle of the command" one
      CVC3::parserTemp->setPrompt2();
      // Read the line
      is.getline(buf, size-1);
    } else // Set the terminator char to 0
      is.getline(buf, size-1, 0);
    // If failbit is set, but eof is not, it means the line simply
    // didn't fit; so we clear the state and keep on reading.
    bool partialStr = is.fail() && !is.eof();
    if(partialStr)
      is.clear();

    for(res = 0; res<size && buf[res] != 0; res++);
    if(res == size) PLerror("Lexer bug: overfilled the buffer");
    if(!partialStr) { // Insert \n into the buffer
      buf[res++] = '\n';
      buf[res] = '\0';
    }
  } else {
    res = YY_NULL;
  }
  return res;
}

// Redefine the input buffer function to read from an istream
#define YY_INPUT(buf,result,max_size) \
  result = PLinput(*CVC3::parserTemp->is, buf, max_size);

int PL_bufSize() { return YY_BUF_SIZE; }
YY_BUFFER_STATE PL_buf_state() { return YY_CURRENT_BUFFER; }

/* some wrappers for methods that need to refer to a struct.
   These are used by CVC3::Parser. */
void *PL_createBuffer(int sz) {
  return (void *)PL_create_buffer(NULL, sz);
}
void PL_deleteBuffer(void *buf_state) {
  PL_delete_buffer((struct yy_buffer_state *)buf_state);
}
void PL_switchToBuffer(void *buf_state) {
  PL_switch_to_buffer((struct yy_buffer_state *)buf_state);
}
void *PL_bufState() {
  return (void *)PL_buf_state();
}

void PL_setInteractive(bool is_interactive) {
  yy_set_interactive(is_interactive);
}

// File-static (local to this file) variables and functions
static std::string _string_lit;

 static char escapeChar(char c) {
   switch(c) {
   case 'n': return '\n';
   case 't': return '\t';
   default: return c;
   }
 }

// for now, we don't have subranges.  
//
// ".."		{ return DOTDOT_TOK; }
/*OPCHAR	(['!#?\_$&\|\\@])*/



#line 948 "lexPL.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING_LITERAL 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int PLlex_destroy (void );

int PLget_debug (void );

void PLset_debug (int debug_flag  );

YY_EXTRA_TYPE PLget_extra (void );

void PLset_extra (YY_EXTRA_TYPE user_defined  );

FILE *PLget_in (void );

void PLset_in  (FILE * in_str  );

FILE *PLget_out (void );

void PLset_out  (FILE * out_str  );

int PLget_leng (void );

char *PLget_text (void );

int PLget_lineno (void );

void PLset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int PLwrap (void );
#else
extern int PLwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( PLtext, PLleng, 1, PLout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( PLin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( PLin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, PLin))==0 && ferror(PLin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(PLin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int PLlex (void);

#define YY_DECL int PLlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after PLtext and PLleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 129 "PL.lex"


#line 1138 "lexPL.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! PLin )
			PLin = stdin;

		if ( ! PLout )
			PLout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			PLensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				PL_create_buffer(PLin,YY_BUF_SIZE );
		}

		PL_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of PLtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 556 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 591 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < PLleng; ++yyl )
				if ( PLtext[yyl] == '\n' )
					   
    PLlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 131 "PL.lex"
{ CVC3::parserTemp->lineNum++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 133 "PL.lex"
{ /* skip whitespace */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 135 "PL.lex"
{PLlval.str = new std::string(PLtext+4);return BINARY_TOK; 
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 137 "PL.lex"
{PLlval.str = new std::string(PLtext+4);return HEX_TOK; 
		}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 139 "PL.lex"
{PLlval.str = new std::string(PLtext);return NUMERAL_TOK; 
		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 142 "PL.lex"
{ BEGIN COMMENT; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 143 "PL.lex"
{ BEGIN INITIAL; /* return to normal mode */ 
                  CVC3::parserTemp->lineNum++; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 145 "PL.lex"
{ /* stay in comment mode */ }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "PL.lex"
{ BEGIN STRING_LITERAL; 
                          _string_lit.erase(_string_lit.begin(),
                                            _string_lit.end()); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 150 "PL.lex"
{ /* escape characters (like \n or \") */
                          _string_lit.insert(_string_lit.end(),
                                             escapeChar(PLtext[1])); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 153 "PL.lex"
{ BEGIN INITIAL; /* return to normal mode */ 
			  PLlval.str = new std::string(_string_lit);
                          return STRINGLIT_TOK; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 156 "PL.lex"
{ _string_lit.insert(_string_lit.end(),*PLtext); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 158 "PL.lex"
{ return PLtext[0]; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 160 "PL.lex"
{ return DOTDOT_TOK; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 161 "PL.lex"
{ return ASSIGN_TOK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 162 "PL.lex"
{ return NEQ_TOK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 163 "PL.lex"
{ return IMPLIES_TOK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 164 "PL.lex"
{ return IFF_TOK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 165 "PL.lex"
{ return PLUS_TOK; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 166 "PL.lex"
{ return MINUS_TOK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 167 "PL.lex"
{ return MULT_TOK; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 168 "PL.lex"
{ return POW_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 169 "PL.lex"
{ return DIV_TOK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 170 "PL.lex"
{ return MOD_TOK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 171 "PL.lex"
{ return INTDIV_TOK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 172 "PL.lex"
{ return LT_TOK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 173 "PL.lex"
{ return LE_TOK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 174 "PL.lex"
{ return GT_TOK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 175 "PL.lex"
{ return GE_TOK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 176 "PL.lex"
{ return FLOOR_TOK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 178 "PL.lex"
{ return SQHASH_TOK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 179 "PL.lex"
{ return HASHSQ_TOK; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "PL.lex"
{ return PARENHASH_TOK; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "PL.lex"
{ return HASHPAREN_TOK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "PL.lex"
{ return ARROW_TOK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "PL.lex"
{ return ARROW_TOK; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 184 "PL.lex"
{ return CONCAT_TOK;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 185 "PL.lex"
{ return BVNEG_TOK;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 186 "PL.lex"
{ return BVAND_TOK;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 187 "PL.lex"
{ return MID_TOK;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 188 "PL.lex"
{ return BVXOR_TOK;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 189 "PL.lex"
{ return BVNAND_TOK;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 190 "PL.lex"
{ return BVNOR_TOK;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 191 "PL.lex"
{ return BVCOMP_TOK;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 192 "PL.lex"
{ return BVXNOR_TOK;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 193 "PL.lex"
{ return LEFTSHIFT_TOK;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 194 "PL.lex"
{ return RIGHTSHIFT_TOK;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 195 "PL.lex"
{ return BVSLT_TOK;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 196 "PL.lex"
{ return BVSGT_TOK;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 197 "PL.lex"
{ return BVSLE_TOK;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 198 "PL.lex"
{ return BVSGE_TOK;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 199 "PL.lex"
{ return SX_TOK;} 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 200 "PL.lex"
{ return BVZEROEXTEND_TOK;} 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 201 "PL.lex"
{ return BVREPEAT_TOK;} 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 202 "PL.lex"
{ return BVROTL_TOK;} 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 203 "PL.lex"
{ return BVROTR_TOK;} 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 204 "PL.lex"
{ return BVLT_TOK;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 205 "PL.lex"
{ return BVGT_TOK;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 206 "PL.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 207 "PL.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 209 "PL.lex"
{ return DISTINCT_TOK; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 210 "PL.lex"
{ return BVTOINT_TOK;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 211 "PL.lex"
{ return INTTOBV_TOK;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 212 "PL.lex"
{ return BOOLEXTRACT_TOK;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 213 "PL.lex"
{ return BVPLUS_TOK;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 214 "PL.lex"
{ return BVUDIV_TOK;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 215 "PL.lex"
{ return BVSDIV_TOK;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 216 "PL.lex"
{ return BVUREM_TOK;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 217 "PL.lex"
{ return BVSREM_TOK;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 218 "PL.lex"
{ return BVSMOD_TOK;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 219 "PL.lex"
{ return BVSHL_TOK;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 220 "PL.lex"
{ return BVASHR_TOK;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 221 "PL.lex"
{ return BVLSHR_TOK;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 222 "PL.lex"
{ return BVSUB_TOK;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 223 "PL.lex"
{ return BVUMINUS_TOK;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 224 "PL.lex"
{ return BVMULT_TOK;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 225 "PL.lex"
{ return AND_TOK; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 226 "PL.lex"
{ return ARRAY_TOK; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 227 "PL.lex"
{ return BOOLEAN_TOK; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 228 "PL.lex"
{ return DATATYPE_TOK; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 229 "PL.lex"
{ return ELSE_TOK; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 230 "PL.lex"
{ return ELSIF_TOK; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 231 "PL.lex"
{ return END_TOK; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 232 "PL.lex"
{ return ENDIF_TOK; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 233 "PL.lex"
{ return EXISTS_TOK; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 234 "PL.lex"
{ return FALSELIT_TOK; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 235 "PL.lex"
{ return FORALL_TOK; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 236 "PL.lex"
{ return IF_TOK; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 237 "PL.lex"
{ return IN_TOK; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 238 "PL.lex"
{ return LAMBDA_TOK; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 239 "PL.lex"
{ return SIMULATE_TOK; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 240 "PL.lex"
{ return LET_TOK; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 241 "PL.lex"
{ return NOT_TOK; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 242 "PL.lex"
{ return IS_INTEGER_TOK; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 243 "PL.lex"
{ return OF_TOK; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 244 "PL.lex"
{ return OR_TOK; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 245 "PL.lex"
{ return REAL_TOK; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 246 "PL.lex"
{ return INT_TOK;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 247 "PL.lex"
{ return SUBTYPE_TOK;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 248 "PL.lex"
{ return BITVECTOR_TOK;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 250 "PL.lex"
{ return THEN_TOK; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 251 "PL.lex"
{ return TRUELIT_TOK; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 252 "PL.lex"
{ return TYPE_TOK; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 253 "PL.lex"
{ return WITH_TOK; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 254 "PL.lex"
{ return XOR_TOK; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 255 "PL.lex"
{ return TCC_TOK; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 256 "PL.lex"
{ return PATTERN_TOK; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 258 "PL.lex"
{ return ARITH_VAR_ORDER_TOK; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 259 "PL.lex"
{ return ASSERT_TOK; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 260 "PL.lex"
{ return QUERY_TOK; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 261 "PL.lex"
{ return CHECKSAT_TOK; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 262 "PL.lex"
{ return CONTINUE_TOK; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 263 "PL.lex"
{ return RESTART_TOK; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 264 "PL.lex"
{ return DBG_TOK; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 265 "PL.lex"
{ return TRACE_TOK; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 266 "PL.lex"
{ return UNTRACE_TOK; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 267 "PL.lex"
{ return OPTION_TOK; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 268 "PL.lex"
{ return HELP_TOK; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 269 "PL.lex"
{ return TRANSFORM_TOK; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 270 "PL.lex"
{ return PRINT_TOK; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 271 "PL.lex"
{ return PRINT_TYPE_TOK; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 272 "PL.lex"
{ return CALL_TOK; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 273 "PL.lex"
{ return ECHO_TOK; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 274 "PL.lex"
{ return INCLUDE_TOK; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 275 "PL.lex"
{ return DUMP_ASSUMPTIONS_TOK; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 276 "PL.lex"
{ return DUMP_PROOF_TOK; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 277 "PL.lex"
{ return DUMP_SIG_TOK; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 278 "PL.lex"
{ return DUMP_TCC_TOK; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 279 "PL.lex"
{ return DUMP_TCC_ASSUMPTIONS_TOK; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 280 "PL.lex"
{ return DUMP_TCC_PROOF_TOK; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 281 "PL.lex"
{ return DUMP_CLOSURE_TOK; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 282 "PL.lex"
{ return DUMP_CLOSURE_PROOF_TOK; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 283 "PL.lex"
{ return WHERE_TOK; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 284 "PL.lex"
{ return ASSERTIONS_TOK; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 285 "PL.lex"
{ return ASSUMPTIONS_TOK; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 286 "PL.lex"
{ return COUNTEREXAMPLE_TOK; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 287 "PL.lex"
{ return COUNTERMODEL_TOK; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 288 "PL.lex"
{ return PUSH_TOK; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 289 "PL.lex"
{ return POP_TOK; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 290 "PL.lex"
{ return POPTO_TOK; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 291 "PL.lex"
{ return PUSH_SCOPE_TOK; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 292 "PL.lex"
{ return POP_SCOPE_TOK; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 293 "PL.lex"
{ return POPTO_SCOPE_TOK; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 294 "PL.lex"
{ return RESET_TOK; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 295 "PL.lex"
{ return CONTEXT_TOK; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 296 "PL.lex"
{ return FORGET_TOK; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 297 "PL.lex"
{ return GET_TYPE_TOK; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 298 "PL.lex"
{ return CHECK_TYPE_TOK; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 299 "PL.lex"
{ return GET_CHILD_TOK; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 300 "PL.lex"
{ return GET_OP_TOK; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 301 "PL.lex"
{ return SUBSTITUTE_TOK; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 303 "PL.lex"
{  PLlval.str = new std::string(PLtext); return ID_TOK; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING_LITERAL):
#line 305 "PL.lex"
{ return DONE_TOK; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 307 "PL.lex"
{ PLerror("Illegal input character."); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 308 "PL.lex"
ECHO;
	YY_BREAK
#line 2019 "lexPL.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed PLin at a new source and called
			 * PLlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = PLin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( PLwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * PLtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of PLlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					PLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			PLrestart(PLin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) PLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 556 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 556 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 555);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					PLrestart(PLin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( PLwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve PLtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    PLlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void PLrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        PLensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            PL_create_buffer(PLin,YY_BUF_SIZE );
	}

	PL_init_buffer(YY_CURRENT_BUFFER,input_file );
	PL_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void PL_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		PLpop_buffer_state();
	 *		PLpush_buffer_state(new_buffer);
     */
	PLensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	PL_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (PLwrap()) processing, but the only time this flag
	 * is looked at is after PLwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void PL_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	PLin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE PL_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) PLalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in PL_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) PLalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in PL_create_buffer()" );

	b->yy_is_our_buffer = 1;

	PL_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with PL_create_buffer()
 * 
 */
    void PL_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		PLfree((void *) b->yy_ch_buf  );

	PLfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a PLrestart() or at EOF.
 */
    static void PL_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	PL_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then PL_init_buffer was _probably_
     * called from PLrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void PL_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		PL_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void PLpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	PLensure_buffer_stack();

	/* This block is copied from PL_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from PL_switch_to_buffer. */
	PL_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void PLpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	PL_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		PL_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void PLensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)PLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in PLensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)PLrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in PLensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE PL_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) PLalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in PL_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	PL_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to PLlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       PL_scan_bytes() instead.
 */
YY_BUFFER_STATE PL_scan_string (yyconst char * yystr )
{
    
	return PL_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to PLlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE PL_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) PLalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in PL_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = PL_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in PL_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up PLtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		PLtext[PLleng] = (yy_hold_char); \
		(yy_c_buf_p) = PLtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		PLleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int PLget_lineno  (void)
{
        
    return PLlineno;
}

/** Get the input stream.
 * 
 */
FILE *PLget_in  (void)
{
        return PLin;
}

/** Get the output stream.
 * 
 */
FILE *PLget_out  (void)
{
        return PLout;
}

/** Get the length of the current token.
 * 
 */
int PLget_leng  (void)
{
        return PLleng;
}

/** Get the current token.
 * 
 */

char *PLget_text  (void)
{
        return PLtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void PLset_lineno (int  line_number )
{
    
    PLlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see PL_switch_to_buffer
 */
void PLset_in (FILE *  in_str )
{
        PLin = in_str ;
}

void PLset_out (FILE *  out_str )
{
        PLout = out_str ;
}

int PLget_debug  (void)
{
        return PL_flex_debug;
}

void PLset_debug (int  bdebug )
{
        PL_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from PLlex_destroy(), so don't allocate here.
     */

    /* We do not touch PLlineno unless the option is enabled. */
    PLlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    PLin = stdin;
    PLout = stdout;
#else
    PLin = (FILE *) 0;
    PLout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * PLlex_init()
     */
    return 0;
}

/* PLlex_destroy is for both reentrant and non-reentrant scanners. */
int PLlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		PL_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		PLpop_buffer_state();
	}

	/* Destroy the stack itself. */
	PLfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * PLlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *PLalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *PLrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void PLfree (void * ptr )
{
	free( (char *) ptr );	/* see PLrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 308 "PL.lex"




