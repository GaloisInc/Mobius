package annot.textio;

import annot.attributes.AType;
import annot.attributes.BCPrintableAttribute;
import annot.bcclass.BCClass;
import annot.bcclass.MLog;
import annot.bcclass.MessageLog;

/**
 * This ugly class computes initial attribute positions
 * in bytecode generated by printCode() method (from BCClass).
 * Searching for annotations in current code has been moved
 * to CodeFragment class.
 *
 * @author Tomasz Batkiewicz (tb209231@students.mimuw.edu.pl)
 * @version a-01
 */
@Deprecated
public final class CodeSearch {

  /**
   * An empty private constructor to disallow the creation of instances.
   */
  private CodeSearch() {
  }

  /**
   * Replace all characters (except newlines) of given
   * String with 'X' characters.
   *
   * @param str - multi line String.
   * @return <code>str</code> with all except '\n' characters
   *     replaced with 'X'.
   */
  private static String clear(final String str) {
    String ret = "";
    for (int i = 0; i  <  str.length(); i++) {
      final char ch = str.charAt(i);
      if (ch == '\n') {
        ret += '\n';
      } else {
        ret += 'X';
      }
    }
    return ret;
  }

  /**
   * Compute line numbers of lines in whitch they were
   * displayed for each annotation in given BCClass.
   *
   * @param bcc - BCClass to update.
   */
  public static void ComputeAttributeLines(final BCClass bcc) {
    final BMLConfig conf = new BMLConfig();
    final BCPrintableAttribute[] all = bcc.getAllAttributes(AType.C_ALL);
    String code = bcc.printCode();
    code = Parsing.removeComment(code);
    // MLog.putMsg(MLog.PDebug, code);
    for (int a = 0; a  <  all.length; a++) {
      String lc = all[a].getLast_code();
      lc = Parsing.addComment(lc);
      lc = conf.getPrettyPrinter().afterDisplay(lc);
      lc = Parsing.removeComment(lc);
      // MLog.putMsg(MLog.PDebug, "#"+lc+"#");
      if (lc.length() == 0) {
        throw new RuntimeException("attribute wasn't displayed yet!");
      }
      int pos = code.indexOf(lc);
      if (pos  <  0) {
        MLog.putMsg(MLog.LEVEL_PDEBUG, all[a].getLast_code());
        MLog.putMsg(MLog.LEVEL_PDEBUG, lc);
        MLog.putMsg(MLog.LEVEL_PDEBUG, code);
        throw new RuntimeException("attribute's code not found!");
      }
      code = code.substring(0, pos) + clear(lc) +
        code.substring(pos + lc.length());
      int pos2 = pos + lc.length();
      while (code.charAt(pos) == '\n') {
        pos++;
      }
      while (code.charAt(pos2) == '\n') {
        pos2--;
      }
      final int start = Parsing.lineAt(code, pos + 1);
      final int end = Parsing.lineAt(code, pos2);
      MLog.putMsg(MessageLog.LEVEL_PNOTICE, a + ": " + start + "--" + end);
    }
  }
}
