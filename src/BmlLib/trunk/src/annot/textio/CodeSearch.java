package annot.textio;

import annot.attributes.AType;
import annot.attributes.BCPrintableAttribute;
import annot.bcclass.BCClass;
import annot.bcclass.MLog;

/**
 * This ugly class computes initial attribute positions in bytecode generated by
 * printCode() method (from BCClass). Searching for annotations in current code
 * has been moved to CodeFragment class.
 * 
 * @author tomekb
 */
@Deprecated
public final class CodeSearch {

	/**
	 * Replace all characters (except newlines) of given String with 'X'
	 * characters.
	 * 
	 * @param str -
	 *            multi line String.
	 * @return <code>str</code> with all except '\n' characters replaced with
	 *         'X'.
	 */
	private static String clear(String str) {
		String ret = "";
		for (int i = 0; i < str.length(); i++) {
			char ch = str.charAt(i);
			if (ch == '\n') {
				ret += '\n';
			} else {
				ret += 'X';
			}
		}
		return ret;
	}

	/**
	 * Compute line numbers of lines in whitch they were displayed for each
	 * annotation in given BCClass.
	 * 
	 * @param bcc -
	 *            BCClass to update.
	 */
	public static void ComputeAttributeLines(BCClass bcc) {
		BMLConfig conf = new BMLConfig();
		BCPrintableAttribute[] all = bcc.getAllAttributes(AType.C_ALL);
		String code = bcc.printCode();
		code = Parsing.removeComment(code);
		// MLog.putMsg(MLog.PDebug, code);
		for (int a = 0; a < all.length; a++) {
			String lc = all[a].getLast_code();
			lc = Parsing.addComment(lc);
			lc = conf.getPrettyPrinter().afterDisplay(lc);
			lc = Parsing.removeComment(lc);
			// MLog.putMsg(MLog.PDebug, "#"+lc+"#");
			if (lc.length() == 0)
				throw new RuntimeException("attribute wasn't displayed yet!");
			int pos = code.indexOf(lc);
			if (pos < 0) {
				System.out.println(all[a].getLast_code());
				System.out.println(lc);
				System.out.println(code);
				throw new RuntimeException("attribute's code not found!");
			}
			code = code.substring(0, pos) + clear(lc)
					+ code.substring(pos + lc.length());
			int pos2 = pos + lc.length();
			while (code.charAt(pos) == '\n')
				pos++;
			while (code.charAt(pos2) == '\n')
				pos2--;
			int start = Parsing.lineAt(code, pos + 1);
			int end = Parsing.lineAt(code, pos2);
			MLog.putMsg(MLog.PNotice, a + ": " + start + "--" + end);
			all[a].line_start = start;
			all[a].line_end = end;
		}
	}
}
