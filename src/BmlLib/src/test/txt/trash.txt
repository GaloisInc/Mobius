This are deprecated fragments of code, that may be needed again, for example for debugging
  after founding an old, hidden bug, but it's very unlikely. They have been commented out,
  and later moved here after they weren't needed for some (long) time.

//	| (e=shiftExpr {$ast = $e.ast;}
//		( EQ r1=shiftExpr {$ast = new Predicate2Ar($e.ast, $r1.ast, PredicateSymbol.EQ);}
//		| NEQ r2=shiftExpr {$ast = new Predicate2Ar($e.ast, $r1.ast, PredicateSymbol.NOTEQ);}));

			syso("        niesprawdzone -- EQ");
			Expression expr1 = readExpression(bytes);
			// here we substitute the appearing formulas in equality relation
			// as the JVM do not support the boolean type, in place of the true
			// boolean value
			// 1 is used and in place of the false boolean value 0 is used
			// Thus suppose that expr1 is a formula. It is substituted with:
			// 1 if the formula is the predicate true
			// 0 if the formula is the predicate false
			// else if it is another type of formula and expr2 is not a formula:
			// f == expr2 is substituted with
			// 1 == expr2 ==> f /\ 0 == expr2 ==> !f
			// else if
			Formula f1 = null;
//			DesugarNegBoolExpr des1 = null;
			if (expr1 == Predicate0Ar.TRUE) {
				expr1 = new NumberLiteral(1);
			} else if (expr1 == Predicate0Ar.FALSE) {
				expr1 = new NumberLiteral(0);
			} else if (expr1 instanceof Formula) {
				f1 = (Formula) expr1;
//			} else if (expr1 instanceof DesugarNegBoolExpr) {
//				des1 = (DesugarNegBoolExpr) expr1;
			}

			Expression expr2 = readExpression(bytes);
//			return new UnknownFormula("EQ");
			Formula f2 = null;
//			DesugarNegBoolExpr des2 = null;
			if (expr2 == Predicate0Ar.TRUE) {
				expr2 = new NumberLiteral(1);
			} else if (expr2 == Predicate0Ar.FALSE) {
				expr2 = new NumberLiteral(0);
			} else if (expr2 instanceof Formula) {
				f2 = (Formula) expr2;
//			} else if (expr2 instanceof DesugarNegBoolExpr) {
//				des2 = (DesugarNegBoolExpr) expr2;
			}
//			if ((des2 != null) && (f1 == null) && (des1 == null)) {
//				Formula posCondition = des2.getPositiveCondition();
//				Expression posValue = des2.getPositiveValue();
//				Formula expr2_eq_posValue = new Predicate2Ar(expr1, posValue,
//						PredicateSymbol.EQ);
//				Formula posCase = Formula.getFormula(posCondition,
//						expr2_eq_posValue, Connector.EQUIV);
//
//				return posCase;
//				/*
//				 * Formula negCondition = des2.getNegativeCondition();
//				 * Expression negValue = des2.getNegativeValue(); Formula
//				 * expr2_eq_negValue = new Predicate2Ar(expr1, negValue,
//				 * PredicateSymbol.EQ ); Formula negCase = Formula.getFormula(
//				 * negCondition, expr2_eq_negValue, Connector.IMPLIES); Formula
//				 * posAndNeg = Formula.getFormula(posCase, negCase,
//				 * Connector.AND); return posAndNeg;
//				 */
//			}
			if ((f1 != null) && (f2 != null)) {
				Formula f = Formula.getFormula(f1, f2, Connector.EQUIV);
				return f;
			} else if (f1 != null) {
				Formula true_eq_e2 = Predicate2Ar.getPredicate(
						new NumberLiteral(1), expr2, PredicateSymbol.EQ);
				Formula true_eq_e2_equiv_f1 = Formula.getFormula(true_eq_e2,
						f1, Connector.EQUIV);
				return true_eq_e2_equiv_f1;

				/*
				 * Formula false_eq_e2 = Predicate2Ar.getPredicate(new
				 * NumberLiteral(0), expr2, PredicateSymbol.EQ); Formula
				 * false_eq_e2_equiv_notf1 = Formula.getFormula(false_eq_e2,
				 * Formula.getFormula(f1, Connector.NOT), Connector.IMPLIES );
				 * 
				 * Formula equivalence = Formula.getFormula(true_eq_e2_equiv_f1,
				 * false_eq_e2_equiv_notf1, Connector.AND); return equivalence;
				 */
			} else if (f2 != null) {
				Formula true_eq_e1 = Predicate2Ar.getPredicate(expr1,
						new NumberLiteral(1), PredicateSymbol.EQ);
				Formula true_eq_e1_equiv_f2 = Formula.getFormula(true_eq_e1,
						f2, Connector.EQUIV);
				return true_eq_e1_equiv_f2;
				/*
				 * Formula false_eq_e1 = Predicate2Ar.getPredicate(expr1, new
				 * NumberLiteral(0), PredicateSymbol.EQ); Formula
				 * false_eq_e1_equiv_notf2 = Formula.getFormula(false_eq_e1,
				 * Formula.getFormula(f2, Connector.NOT), Connector.IMPLIES);
				 * 
				 * Formula equivalence = Formula.getFormula(true_eq_e1_equiv_f2,
				 * false_eq_e1_equiv_notf2, Connector.AND); return equivalence;
				 */
			} else {
				Formula predicate = Predicate2Ar.getPredicate(expr1, expr2,
						PredicateSymbol.EQ);
				return predicate;
			}


						if ((i > 1) || (sub2.length < 4) || (breakLines(sub2[1], start, sub2[2].length()+epos, w, "").lastIndexOf("\n") >= 0)) {
						} else {
							e = breakLines(sub[i], start, sub[i+1].length()+epos, b ? w : w+conf.lineIndent, "");
						}


				result += "{"+conf.start_line_pos()+"+"+start+"+"+strlen(s)+"<"+conf.max_total_line_width+"-"+epos+cleanup(s)+"}";

		for (int i=0; i<sub.length-2; i+=2) {
			int epos = (i > sub.length-5) ? end : 0; //?
			String s = sub[i] + sub[i+1];
			if (strlen(s) + start < conf.max_line_width - epos) {
				result += cleanup(s);
				start += strlen(s);
			} else {
				String[] sub2 = splitRoot(sub[i+1]);
				boolean b = breakLines(sub2[1], 0, sub2[2].length(), w).lastIndexOf("\n") >= 0;
				start += strlen(sub[i]);
				String e = breakLines(sub[i+1], strlen(sub[i]), epos, b ? w : w+"  ");
				if (e.charAt(0) != '\n') {
					result += conf.newLine();
					start = 0;
				}
				result += sub[i] + e;
				start += e.length() - e.lastIndexOf("\n")
					- (conf.max_total_line_width - conf.max_line_width) + sub[i].length();
			}
		}
		if (sub.length % 2 == 0)
			result += sub[sub.length - 2];
	
	private int colsLeft(String str, int start) {
		int p = str.lastIndexOf("\n");
		if (p < 0) {
			return conf.max_line_width - start - str.length();
		} else {
			return conf.max_total_line_width - str.substring(p).length();
		}
	}
			
	private String breakLines(String str, int spos, String suffix) {
//		if (str.length() < 1) throw new RuntimeException(str);
//		System.out.println("|"+str+"|");
		String result = "";
		if (strlen(str) < conf.max_line_width - spos - suffix.length())
			return cleanup(str);
		String[] sub = splitRoot(str);
		if (sub.length == 1)
			return cleanup(sub[0]);
		String w = conf.wciecie;
		conf.wciecie += "  ";
		if (spos == 0)
			result = "  ";
		result += sub[0];
		spos += strlen(sub[0]); //XXX
		for (int i=1; i<sub.length-1; i+=2) {
			String s = sub[i] + sub[i+1];
			if (colsLeft(s, spos) > 0) {
				result += cleanup(s);
				spos += strlen(s);
			} else {
				if (spos > 0)
					result += conf.newLine();
				result += breakLines(sub[i], 0, "");
				spos = conf.max_line_width - colsLeft(result, 0);
				result += sub[i+1];
				spos += strlen(sub[i+1]);
			}
		}
		if (sub.length % 2 == 1)
			result += sub[sub.length - 1];
		conf.wciecie = w;
		return result;
	}

		System.out.println(str);
		System.out.println(cleanup(str));
		for (int i=0; i<sub.length; i++)
			System.out.println(sub[i]);
		System.out.println("-----------------------------------");
