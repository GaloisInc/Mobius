(WfSetStmts
 (wf_set_stmts_TCC1 0
  (wf_set_stmts_TCC1-2 nil 3410513647 3431425660
   (";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
    (skosimp*)
    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
      (typepred "program(p!1)")
      ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
        (expand "wf_Program")
        ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
          (flatten)
          ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
            (expand "methods")
            ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
              (skosimp*)
              ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                (expand "wf_Classes")
                ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                  (inst?)
                  ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                    (assert)
                    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                      (expand "program_pred")
                      ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                        (inst?)
                        ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                          (assert)
                          ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                            (flatten)
                            ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                              (inst?)
                              ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                (assert)
                                ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                  (expand "method_pred")
                                  ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                    (flatten)
                                    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                      (inst? -9)
                                      nil))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   proved
   ((program formal-const-decl "[FullProgram -> Program]" WfSetStmts nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (FullProgram formal-type-decl nil WfSetStmts nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WfSetStmts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil))
   3176 3090 nil nil)
  (wf_set_stmts_TCC1-1 nil 3410513626 nil ("" (subtype-tcc) nil nil) nil nil
   nil nil nil nil))
 (wf_set_stmts_TCC2 0
  (wf_set_stmts_TCC2-2 nil 3410513656 3431425663
   (";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
    (skosimp*)
    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
      (typepred "program(p!1)")
      ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
        (expand "wf_Program")
        ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
          (flatten)
          ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
            (expand "methods")
            ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
              (skosimp*)
              ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                (expand "wf_Classes")
                ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                  (inst?)
                  ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                    (assert)
                    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                      (expand "program_pred")
                      ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                        (inst?)
                        ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                          (assert)
                          ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                            (flatten)
                            ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                              (inst?)
                              ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                (assert)
                                ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                  (expand "method_pred")
                                  ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                    (flatten)
                                    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                      (inst? -10)
                                      nil))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   proved
   ((program formal-const-decl "[FullProgram -> Program]" WfSetStmts nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (FullProgram formal-type-decl nil WfSetStmts nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WfSetStmts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil))
   3115 3030 nil nil)
  (wf_set_stmts_TCC2-1 nil 3410513626 nil ("" (subtype-tcc) nil nil) nil nil
   nil nil nil nil))
 (wf_set_stmts_TCC3 0
  (wf_set_stmts_TCC3-2 nil 3410513661 3431425666
   (";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
    (skosimp*)
    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
      (typepred "program(p!1)")
      ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
        (expand "wf_Program")
        ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
          (flatten)
          ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
            (expand "methods")
            ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
              (skosimp*)
              ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                (expand "wf_Classes")
                ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                  (inst?)
                  ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                    (assert)
                    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                      (expand "program_pred")
                      ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                        (inst?)
                        ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                          (assert)
                          ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                            (flatten)
                            ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                              (inst?)
                              ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                (assert)
                                ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                  (expand "method_pred")
                                  ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                    (flatten)
                                    ((";;; Proof only_JMLExc_in_sets_TCC1-1 for formula OnlyJMLExceptionInSet.only_JMLExc_in_sets_TCC1"
                                      (inst? -11)
                                      nil))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   proved
   ((program formal-const-decl "[FullProgram -> Program]" WfSetStmts nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (FullProgram formal-type-decl nil WfSetStmts nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WfSetStmts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil))
   3246 3180 nil nil)
  (wf_set_stmts_TCC3-1 nil 3410513626 nil ("" (subtype-tcc) nil nil) nil nil
   nil nil nil nil)))
(WfSetStmtsAP
 (only_JMLExc_TCC1 0
  (only_JMLExc_TCC1-1 nil 3431423095 3431431729 ("" (subtype-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil WfSetStmtsAP nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   5899 5750 nil nil))
 (wf_set_stmts_TCC1 0
  (wf_set_stmts_TCC1-1 nil 3431423095 3431432732
   ("" (skosimp*)
    (("" (expand "methods")
      (("" (skosimp*)
        (("" (assert)
          (("" (typepred "p!1")
            (("" (expand "wf_Program")
              (("" (flatten)
                (("" (expand "wf_Classes")
                  (("" (inst?)
                    (("" (assert)
                      (("" (expand "program_pred")
                        (("" (inst?)
                          (("" (assert)
                            (("" (flatten)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (expand "method_pred")
                                    (("" (flatten) (("" (inst? -9) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WfSetStmtsAP nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil))
   38247 3690 t nil))
 (wf_set_stmts_TCC2 0
  (wf_set_stmts_TCC2-1 nil 3431423095 3431432788
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "methods")
            (("" (skosimp*)
              (("" (expand "wf_Classes")
                (("" (inst?)
                  (("" (assert)
                    (("" (expand "program_pred")
                      (("" (inst?)
                        (("" (assert)
                          (("" (flatten)
                            (("" (inst?)
                              (("" (assert)
                                (("" (expand "method_pred")
                                  (("" (flatten) (("" (inst? -10) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WfSetStmtsAP nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil))
   17746 3690 t nil))
 (wf_set_stmts_TCC3 0
  (wf_set_stmts_TCC3-1 nil 3431423095 3431432818
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "methods")
            (("" (skosimp*)
              (("" (expand "wf_Classes")
                (("" (inst?)
                  (("" (assert)
                    (("" (expand "program_pred")
                      (("" (inst?)
                        (("" (assert)
                          (("" (flatten)
                            (("" (inst?)
                              (("" (assert)
                                (("" (expand "method_pred")
                                  (("" (flatten) (("" (inst? -11) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WfSetStmtsAP nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil))
   21499 3660 t nil)))

