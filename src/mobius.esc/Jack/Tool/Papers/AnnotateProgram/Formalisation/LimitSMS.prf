(LimitSMS
 (n_var_TCC1 0
  (n_var_TCC1-1 nil 3411730535 3411732386 ("" (subtype-tcc) nil nil)
   proved
   ((string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (defined? const-decl "boolean" ValProp nil))
   16 20 nil nil))
 (limitSMS_prop_TCC1 0
  (limitSMS_prop_TCC1-1 nil 3411730535 3411732546
   ("" (expand "is_finite")
    (("" (inst 1 "3" "id")
      (("1" (expand* "injective?" "id") (("1" (skosimp) nil nil)) nil)
       ("2" (expand "id")
        (("2" (skosimp)
          (("2" (typepred x1!1)
            (("2" (expand* "cps" "s1" "s2") (("2" (ground) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((id_preserves application-judgement "S" identity_props nil)
    (< const-decl "bool" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cps const-decl "set[CP]" LimitSMS nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (CP nonempty-type-eq-decl nil Examples nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (s1 const-decl "CP" LimitSMS nil) (s2 const-decl "CP" LimitSMS nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil))
   128027 110 t nil))
 (limitSMS_prop_TCC2 0
  (limitSMS_prop_TCC2-1 nil 3411730535 3411732764
   ("" (expand "is_finite")
    ((""
      (inst 1 "5"
       "LAMBDA (e : (evs)): IF e=sendSMS_entry THEN 1 ELSIF e=sendSMS_exitN THEN 2 ELSIF e=sendSMS_exitE THEN 3 ELSE 4 ENDIF")
      (("" (expand "injective?")
        (("" (skosimp*)
          (("" (lift-if)
            (("" (lift-if)
              (("" (ground)
                (("" (typepred "x1!1" "x2!1")
                  (("" (expand "evs") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EventType type-decl nil EventType_adt nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Event type-eq-decl nil MVA nil) (set type-eq-decl nil sets nil)
    (evs const-decl "set[Event]" LimitSMS nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sendSMS_entry const-decl "Event" LimitSMS nil)
    (sendSMS_exitN const-decl "Event" LimitSMS nil)
    (sendSMS_exitE const-decl "Event" LimitSMS nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   211623 160 t nil))
 (limitSMS_prop_TCC3 0
  (limitSMS_prop_TCC3-1 nil 3411730535 3411732871
   ("" (expand "is_finite")
    ((""
      (inst 1 "5"
       "LAMBDA (t : (ts)): IF t=t1 THEN 1 ELSIF t=t2 THEN 2 ELSIF t=t3 THEN 3 ELSE 4 ENDIF")
      (("" (expand "injective?")
        (("" (skosimp*)
          (("" (lift-if)
            (("" (lift-if)
              (("" (ground)
                (("" (typepred "x1!1" "x2!1")
                  (("" (expand "ts") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (set type-eq-decl nil sets nil)
    (ts const-decl "set[Transition]" LimitSMS nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (t1 const-decl "Transition" LimitSMS nil)
    (t2 const-decl "Transition" LimitSMS nil)
    (t3 const-decl "Transition" LimitSMS nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   92338 150 t nil))
 (limitSMS_prop_TCC4 0
  (limitSMS_prop_TCC4-1 nil 3411730535 3411732388
   ("" (subtype-tcc) nil nil) proved
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (n_var const-decl "MVAVarDecl" LimitSMS nil)
    (vdsA const-decl "set[MVAVarDecl]" LimitSMS nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   59 60 nil nil))
 (limitSMS_prop_TCC5 0
  (limitSMS_prop_TCC5-1 nil 3411730535 3411732388
   ("" (subtype-tcc) nil nil) proved
   ((vdsP const-decl "set[ProgVarDecl]" LimitSMS nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   27 30 nil nil))
 (wf_n_lt_N 0
  (wf_n_lt_N-1 nil 3411730562 3411730764
   ("" (expand* "wf_Guard" "limitSMS_prop" "n_lt_N")
    (("" (skosimp)
      (("" (lift-if)
        (("" (prop)
          (("" (expand "var_names" 2)
            (("" (inst 2 "n_var")
              (("" (expand "n_var" 2 2)
                (("" (rewrite -1)
                  (("" (expand* "vdsA" "singleton") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (n_var const-decl "MVAVarDecl" LimitSMS nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vdsA const-decl "set[MVAVarDecl]" LimitSMS nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (n_lt_N const-decl "Guard" LimitSMS nil)
    (limitSMS_prop const-decl "MVA" LimitSMS nil))
   201672 300 t shostak))
 (wf_inc_n 0
  (wf_inc_n-1 nil 3411730809 3411730962
   ("" (expand* "wf_Action" "limitSMS_prop")
    (("" (skosimp)
      (("" (expand "member")
        (("" (expand* "member" "member")
          (("" (split)
            (("1" (rewrite -1)
              (("1" (expand* "var_names" "vdsA" "singleton" "inc_n")
                (("1" (inst 1 "n_var")
                  (("1" (expand "n_var") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand* "wf_Expr" "wf_Body") (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (vdsP const-decl "set[ProgVarDecl]" LimitSMS nil)
    (s1 const-decl "CP" LimitSMS nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (nth def-decl "T" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-eq-decl nil Body_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OneAction type-eq-decl nil MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inc_n const-decl "OneAction" LimitSMS nil)
    (n_var const-decl "MVAVarDecl" LimitSMS nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vdsA const-decl "set[MVAVarDecl]" LimitSMS nil)
    (member def-decl "bool" list_props nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (limitSMS_prop const-decl "MVA" LimitSMS nil))
   152877 2300 t shostak))
 (wf_reset_n 0
  (wf_reset_n-1 nil 3411730994 3411731141
   ("" (expand* "wf_Action" "limitSMS_prop")
    (("" (skosimp)
      (("" (expand* "member" "member")
        (("" (split)
          (("1" (rewrite -1)
            (("1" (expand* "var_names" "vdsA" "singleton" "reset_n")
              (("1" (inst 1 "n_var")
                (("1" (expand "n_var") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand* "wf_Expr" "wf_Body") (("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((vdsA const-decl "set[MVAVarDecl]" LimitSMS nil)
    (singleton const-decl "(singleton?)" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (n_var const-decl "MVAVarDecl" LimitSMS nil)
    (reset_n const-decl "OneAction" LimitSMS nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OneAction type-eq-decl nil MVA nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil Body_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (s1 const-decl "CP" LimitSMS nil)
    (vdsP const-decl "set[ProgVarDecl]" LimitSMS nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (member def-decl "bool" list_props nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (limitSMS_prop const-decl "MVA" LimitSMS nil))
   147461 1670 t shostak))
 (wf_limitSMS_prop 0
  (wf_limitSMS_prop-1 nil 3411731172 3411732209
   ("" (expand* "wf_MVA" "limitSMS_prop")
    (("" (split)
      (("1" (expand "cps") (("1" (propax) nil nil)) nil)
       ("2" (expand "s1")
        (("2" (use "halted_imp") (("2" (assert) nil nil)) nil)) nil)
       ("3" (expand* "wf_vdsA" "vdsA" "singleton")
        (("3" (split)
          (("1" (skosimp) (("1" (assert) nil nil)) nil)
           ("2"
            (expand* "disjoint?" "empty?" "intersection" "member"
             "var_names" "n_var" "reserved_words")
            (("2" (skosimp*)
              (("2" (rewrite -1)
                (("1" (use "reserved_words_strings")
                  (("1" (ground) nil nil)) nil)
                 ("2" (expand "defined?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (expand* "wf_vdsP" "vdsP" "emptyset") nil nil)
       ("5"
        (expand* "disjoint?" "empty?" "intersection" "member"
         "var_names" "vdsA" "vdsP")
        (("5" (skosimp*)
          (("5" (expand* "singleton" "emptyset" "n_var") nil nil))
          nil))
        nil)
       ("6" (skosimp)
        (("6" (expand "wf_Trans")
          (("6" (skosimp)
            (("6" (expand "ts" -1)
              (("6" (expand* "t1" "t2" "t3" "t4")
                (("6" (split 1)
                  (("1" (expand "cps") (("1" (ground) nil nil)) nil)
                   ("2" (expand "cps") (("2" (ground) nil nil)) nil)
                   ("3" (expand "evs") (("3" (ground) nil nil)) nil)
                   ("4" (use "wf_n_lt_N")
                    (("4" (use "wf_reset_n")
                      (("4" (use "wf_TRUE_guard")
                        (("4" (expand "limitSMS_prop")
                          (("4" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (use "wf_inc_n")
                    (("5" (use "wf_reset_n")
                      (("5" (use "wf_skip")
                        (("5" (expand "limitSMS_prop")
                          (("5" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((cps const-decl "set[CP]" LimitSMS nil)
    (halted_imp formula-decl nil Examples nil)
    (s1 const-decl "CP" LimitSMS nil)
    (reserved_words_strings formula-decl nil Examples nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (n_var const-decl "MVAVarDecl" LimitSMS nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vdsA const-decl "set[MVAVarDecl]" LimitSMS nil)
    (emptyset const-decl "set" sets nil)
    (vdsP const-decl "set[ProgVarDecl]" LimitSMS nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (ts const-decl "set[Transition]" LimitSMS nil)
    (evs const-decl "set[Event]" LimitSMS nil)
    (wf_reset_n formula-decl nil LimitSMS nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_TRUE_guard formula-decl nil Examples nil)
    (wf_n_lt_N formula-decl nil LimitSMS nil)
    (wf_skip formula-decl nil Examples nil)
    (wf_inc_n formula-decl nil LimitSMS nil)
    (t1 const-decl "Transition" LimitSMS nil)
    (t3 const-decl "Transition" LimitSMS nil)
    (t4 const-decl "Transition" LimitSMS nil)
    (t2 const-decl "Transition" LimitSMS nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (limitSMS_prop const-decl "MVA" LimitSMS nil))
   1037662 2470 t shostak)))

