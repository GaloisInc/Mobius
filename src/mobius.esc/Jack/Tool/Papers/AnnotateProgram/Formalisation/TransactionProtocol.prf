(TransactionProtocol
 (T_VarDecl_TCC1 0
  (T_VarDecl_TCC1-1 nil 3411411235 3411721047 ("" (tcc)) unchecked
   ((string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (defined? const-decl "boolean" ValProp nil))
   17 20 nil nil))
 (transaction_protocol_TCC1 0
  (transaction_protocol_TCC1-1 nil 3383892294 3411724451
   ("" (expand "is_finite")
    (("" (inst 1 "4" "id")
      (("1" (expand* "injective?" "id") (("1" (skosimp*) nil nil)) nil)
       ("2" (expand "id")
        (("2" (skosimp)
          (("2" (typepred "x1!1")
            (("2" (expand* "cps" "q1" "q2" "q3")
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((id_preserves application-judgement "S" identity_props nil)
    (< const-decl "bool" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cps const-decl "set[CP]" TransactionProtocol nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (CP nonempty-type-eq-decl nil Examples nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (q1 const-decl "CP" TransactionProtocol nil)
    (q3 const-decl "CP" TransactionProtocol nil)
    (q2 const-decl "CP" TransactionProtocol nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil))
   355051 1020 t shostak))
 (transaction_protocol_TCC2 0
  (transaction_protocol_TCC2-1 nil 3383892294 3411725719
   ("" (expand "is_finite")
    ((""
      (inst 1 "8"
       "LAMBDA (e : (evs)): IF e=bt_entry THEN 1 ELSIF e=bt_exitN THEN 2 ELSIF e=bt_exitE THEN 3 ELSIF e=ct_entry THEN 4 ELSIF e=ct_exitN THEN 5 ELSIF e=ct_exitE THEN 6 ELSE 7 ENDIF")
      (("" (expand "injective?")
        (("" (skosimp*)
          (("" (lift-if)
            (("" (lift-if)
              (("" (ground)
                (("" (typepred "x1!1" "x2!1")
                  (("" (expand "evs") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EventType type-decl nil EventType_adt nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Event type-eq-decl nil MVA nil) (set type-eq-decl nil sets nil)
    (evs const-decl "set[Event]" TransactionProtocol nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bt_entry const-decl "Event" TransactionProtocol nil)
    (bt_exitN const-decl "Event" TransactionProtocol nil)
    (bt_exitE const-decl "Event" TransactionProtocol nil)
    (ct_entry const-decl "Event" TransactionProtocol nil)
    (ct_exitN const-decl "Event" TransactionProtocol nil)
    (ct_exitE const-decl "Event" TransactionProtocol nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   1248548 6590 t shostak))
 (transaction_protocol_TCC3 0
  (transaction_protocol_TCC3-1 nil 3383892294 3411726166
   ("" (expand "is_finite")
    ((""
      (inst 1 "8"
       "LAMBDA (t : (ts)) : IF t=t1 THEN 1 ELSIF t=t2 THEN 2 ELSIF t=t3 THEN 3 ELSIF t=t4 THEN 4 ELSIF t=t5 THEN 5 ELSIF t=t6 THEN 6 ELSIF t=t7 THEN 7 ELSE 8 ENDIF")
      (("1" (expand "injective?")
        (("1" (skosimp*)
          (("1" (lift-if)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred "x1!1" "x2!1")
                  (("1" (expand "ts") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (typepred "t!1")
          (("2" (expand "ts") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((t1 const-decl "Transition" TransactionProtocol nil)
    (t2 const-decl "Transition" TransactionProtocol nil)
    (t3 const-decl "Transition" TransactionProtocol nil)
    (t4 const-decl "Transition" TransactionProtocol nil)
    (t5 const-decl "Transition" TransactionProtocol nil)
    (t6 const-decl "Transition" TransactionProtocol nil)
    (t7 const-decl "Transition" TransactionProtocol nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ts const-decl "set[Transition]" TransactionProtocol nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   436069 800 t shostak))
 (transaction_protocol_TCC4 0
  (transaction_protocol_TCC4-1 nil 3387705638 3411721050 ("" (tcc))
   unchecked
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (T_VarDecl const-decl "MVAVarDecl" TransactionProtocol nil)
    (vdsA const-decl "set[MVAVarDecl]" TransactionProtocol nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   185 110 nil nil))
 (transaction_protocol_TCC5 0
  (transaction_protocol_TCC5-1 nil 3387705638 3411721050 ("" (tcc))
   unchecked
   ((vdsP const-decl "set[ProgVarDecl]" TransactionProtocol nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   29 30 nil nil))
 (wf_T_lt_N 0
  (wf_T_lt_N-1 nil 3411412391 3411721050
   ("" (expand* "wf_Guard" "transaction_protocol" "T_lt_N")
    (("" (skosimp)
      (("" (lift-if)
        (("" (prop)
          (("" (expand "var_names" 2)
            (("" (inst 2 "T_VarDecl")
              (("" (expand "T_VarDecl" 2 2)
                (("" (rewrite -1)
                  (("" (expand* "vdsA" "singleton") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (T_VarDecl const-decl "MVAVarDecl" TransactionProtocol nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vdsA const-decl "set[MVAVarDecl]" TransactionProtocol nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (T_lt_N const-decl "Guard" TransactionProtocol nil)
    (transaction_protocol const-decl "MVA" TransactionProtocol nil))
   92 100 t shostak))
 (wf_T_is_pos 0
  (wf_T_is_pos-1 nil 3411412489 3411721050
   ("" (expand* "wf_Guard" "transaction_protocol" "T_is_pos")
    (("" (skosimp)
      (("" (lift-if)
        (("" (prop)
          (("" (expand "var_names" 2)
            (("" (inst 2 "T_VarDecl")
              (("" (expand "T_VarDecl" 2 2)
                (("" (rewrite -1)
                  (("" (expand* "vdsA" "singleton") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (T_VarDecl const-decl "MVAVarDecl" TransactionProtocol nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vdsA const-decl "set[MVAVarDecl]" TransactionProtocol nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (T_is_pos const-decl "Guard" TransactionProtocol nil)
    (transaction_protocol const-decl "MVA" TransactionProtocol nil))
   156 90 t shostak))
 (wf_inc_T 0
  (wf_inc_T-1 nil 3387712720 3411721054
   ("" (expand* "wf_Action" "transaction_protocol")
    (("" (skosimp)
      (("" (expand "member")
        (("" (expand "member")
          (("" (split)
            (("1" (rewrite -1)
              (("1" (expand* "var_names" "vdsA" "singleton" "inc_T")
                (("1" (inst 1 "T_VarDecl")
                  (("1" (expand "T_VarDecl") (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand* "wf_Expr" "wf_Body") (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (vdsP const-decl "set[ProgVarDecl]" TransactionProtocol nil)
    (q1 const-decl "CP" TransactionProtocol nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (nth def-decl "T" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-eq-decl nil Body_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OneAction type-eq-decl nil MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inc_T const-decl "OneAction" TransactionProtocol nil)
    (T_VarDecl const-decl "MVAVarDecl" TransactionProtocol nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vdsA const-decl "set[MVAVarDecl]" TransactionProtocol nil)
    (member def-decl "bool" list_props nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (transaction_protocol const-decl "MVA" TransactionProtocol nil))
   3667 3430 t shostak))
 (wf_dec_T 0
  (wf_dec_T-2 nil 3387713299 3411721054
   ("" (expand* "wf_Action" "transaction_protocol" "member")
    (("" (expand "member")
      (("" (skosimp)
        (("" (rewrite -1)
          (("" (split)
            (("1" (expand* "var_names" "vdsA" "singleton" "dec_T")
              (("1" (inst 1 "T_VarDecl")
                (("1" (expand "T_VarDecl") (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand* "wf_Expr" "wf_Body")
              (("2" (split)
                (("1" (expand* "subset?" "union" "member")
                  (("1" (expand* "dec_T" "var_names")
                    (("1"
                      (expand* "union" "member" "var_names" "vdsA"
                       "vdsP")
                      (("1" (skosimp)
                        (("1"
                          (expand* "union" "member" "var_names"
                           "singleton" "emptyset")
                          (("1" (inst 1 "T_VarDecl")
                            (("1" (expand "T_VarDecl")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand* "subterm" "dec_T")
                    (("2" (assert)
                      (("2" (expand "subterm")
                        (("2" (expand "subterm")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-eq-decl nil Body_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OneAction type-eq-decl nil MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dec_T const-decl "OneAction" TransactionProtocol nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (vdsP const-decl "set[ProgVarDecl]" TransactionProtocol nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (vdsA const-decl "set[MVAVarDecl]" TransactionProtocol nil)
    (singleton const-decl "(singleton?)" sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (T_VarDecl const-decl "MVAVarDecl" TransactionProtocol nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (member def-decl "bool" list_props nil)
    (transaction_protocol const-decl "MVA" TransactionProtocol nil))
   634 550 t nil)
  (wf_dec_T-1 nil 3387712703 3387712708 ("" (postpone) nil nil)
   unfinished nil 4343 0 t shostak))
 (transaction_protocol_is_well_formed 0
  (transaction_protocol_is_well_formed-1 nil 3411721425 3411724071
   ("" (expand* "wf_MVA" "transaction_protocol")
    (("" (split)
      (("1" (expand "cps") (("1" (propax) nil nil)) nil)
       ("2" (expand "q1")
        (("2" (use "halted_imp") (("2" (assert) nil nil)) nil)) nil)
       ("3" (expand* "wf_vdsA" "vdsA" "singleton")
        (("3" (split)
          (("1" (skosimp) (("1" (assert) nil nil)) nil)
           ("2"
            (expand* "disjoint?" "empty?" "intersection" "member"
             "var_names" "T_VarDecl" "reserved_words")
            (("2" (skosimp*)
              (("2" (rewrite -1)
                (("1" (assert)
                  (("1" (use "reserved_words_strings")
                    (("1" (ground) nil nil)) nil))
                  nil)
                 ("2" (expand "defined?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (expand* "wf_vdsP" "vdsP" "emptyset") nil nil)
       ("5"
        (expand* "disjoint?" "empty?" "intersection" "member"
         "var_names" "vdsA" "vdsP")
        (("5" (skosimp*)
          (("5" (expand* "singleton" "emptyset" "T_VarDecl") nil nil))
          nil))
        nil)
       ("6" (skosimp)
        (("6" (expand "wf_Trans")
          (("6" (skosimp)
            (("6" (expand "ts" -1)
              (("6" (expand* "t1" "t2" "t3" "t4" "t5" "t6" "t7")
                (("6" (split 1)
                  (("1" (expand "cps") (("1" (ground) nil nil)) nil)
                   ("2" (expand "cps") (("2" (ground) nil nil)) nil)
                   ("3" (expand "evs") (("3" (ground) nil nil)) nil)
                   ("4" (use "wf_T_lt_N")
                    (("4" (use "wf_T_is_pos")
                      (("4" (use "wf_TRUE_guard")
                        (("4" (expand "transaction_protocol")
                          (("4" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (use "wf_inc_T")
                    (("5" (use "wf_dec_T")
                      (("5" (use "wf_skip")
                        (("5" (expand "transaction_protocol")
                          (("5" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((cps const-decl "set[CP]" TransactionProtocol nil)
    (halted_imp formula-decl nil Examples nil)
    (q1 const-decl "CP" TransactionProtocol nil)
    (reserved_words_strings formula-decl nil Examples nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (T_VarDecl const-decl "MVAVarDecl" TransactionProtocol nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vdsA const-decl "set[MVAVarDecl]" TransactionProtocol nil)
    (emptyset const-decl "set" sets nil)
    (vdsP const-decl "set[ProgVarDecl]" TransactionProtocol nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (ts const-decl "set[Transition]" TransactionProtocol nil)
    (evs const-decl "set[Event]" TransactionProtocol nil)
    (wf_T_is_pos formula-decl nil TransactionProtocol nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_TRUE_guard formula-decl nil Examples nil)
    (wf_T_lt_N formula-decl nil TransactionProtocol nil)
    (wf_dec_T formula-decl nil TransactionProtocol nil)
    (wf_skip formula-decl nil Examples nil)
    (wf_inc_T formula-decl nil TransactionProtocol nil)
    (t1 const-decl "Transition" TransactionProtocol nil)
    (t3 const-decl "Transition" TransactionProtocol nil)
    (t5 const-decl "Transition" TransactionProtocol nil)
    (t7 const-decl "Transition" TransactionProtocol nil)
    (t6 const-decl "Transition" TransactionProtocol nil)
    (t4 const-decl "Transition" TransactionProtocol nil)
    (t2 const-decl "Transition" TransactionProtocol nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (transaction_protocol const-decl "MVA" TransactionProtocol nil))
   50859 3550 t shostak)))

