(WellBehavedMVA
 (guard_to_expression_behavior_TCC1 0
  (guard_to_expression_behavior_TCC1-2 nil 3430036977 3433502450
   (";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
    (skosimp*)
    ((";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
      (expand "id")
      ((";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
        (expand "wf_Expr")
        ((";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
          (propax) nil))))))
    ";;; developed with shostak decision procedures")
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   99 90 nil nil)
  (guard_to_expression_behavior_TCC1-1 nil 3413185312 3430036930
   ("" (skosimp*) (("" (expand "wf_Expr") (("" (propax) nil nil)) nil)) nil)
   unfinished ((wf_Expr const-decl "boolean" WellFormedProgram nil)) 99 100 t
   nil))
 (eval_action_behavior_TCC1 0
  (eval_action_behavior_TCC1-1 nil 3413185312 3433502450
   ("" (skosimp*)
    (("" (expand "id") (("" (expand "wf_Expr") (("" (propax) nil nil)) nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   133 90 t nil))
 (big_conj_wf_Expr 0
  (big_conj_wf_Expr-1 nil 3433155604 3433502451
   ("" (skolem 1 "p!1" _)
    (("" (use "finite_set_induction_rest[Expr]")
      (("" (assert)
        (("" (split -1)
          (("1" (propax) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (split -1)
                (("1" (expand "big_conj" 1)
                  (("1" (expand "wf_Expr")
                    (("1" (inst -2 "choose(SS!1)")
                      (("1" (assert)
                        (("1" (expand "wf_Body")
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1" (hide -2 -4)
                                (("1" (skosimp*)
                                  (("1" (inst?)
                                    (("1" (inst?)
                                      (("1"
                                        (expand "var_names" -1)
                                        (("1"
                                          (auto-rewrite "union" "member")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1 -3)
                                (("2" (skosimp*)
                                  (("2" (inst?)
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subterm" -2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (auto-rewrite "rest" "remove" "member")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (big_conj def-decl "Expr" MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil) (rest const-decl "set" sets nil)
    (remove const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set[Expr]" WellBehavedMVA
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (finite_rest application-judgement "finite_set[Expr]" WellBehavedMVA nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[Expr]" WellBehavedMVA nil))
   1260 1180 t shostak))
 (big_conj_wf_Expr_components 0
  (big_conj_wf_Expr_components-1 nil 3433238551 3433502452
   ("" (skolem 1 "p!1")
    (("" (use "finite_set_induction_rest[Expr]")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (split -1)
              (("1" (inst -1 "e!1")
                (("1" (assert)
                  (("1" (expand* "rest" "remove" "member")
                    (("1" (expand "/=")
                      (("1" (replace -1 :dir rl :hide? t)
                        (("1" (expand "wf_Expr")
                          (("1" (expand "wf_Body")
                            (("1" (flatten)
                              (("1" (expand "big_conj")
                                (("1" (split 1)
                                  (("1" (skosimp*)
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "var_names" 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "union")
                                              (("1"
                                                (expand "member")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp*)
                                    (("2" (inst? -4)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subterm" 2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "wf_Expr")
                  (("2" (expand "wf_Body")
                    (("2" (expand "big_conj" -1)
                      (("2" (flatten)
                        (("2" (split 1)
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "var_names" 2)
                                  (("1" (expand "union")
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst? -4)
                              (("2" (assert)
                                (("2" (expand "subterm" 2)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (big_conj def-decl "Expr" MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_rest application-judgement "finite_set[Expr]" WellBehavedMVA nil)
    (/= const-decl "boolean" notequal nil) (rest const-decl "set" sets nil)
    (remove const-decl "set" sets nil) (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (finite_emptyset name-judgement "finite_set[Expr]" WellBehavedMVA nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   1106 1000 t shostak))
 (big_conj_cases_TCC1 0
  (big_conj_cases_TCC1-1 nil 3433498085 3433502453 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   637 600 nil nil))
 (big_conj_cases_TCC2 0
  (big_conj_cases_TCC2-1 nil 3433498774 3433502526
   ("" (skosimp*)
    (("" (use "big_conj_wf_Expr_components")
      (("" (assert)
        (("" (expand* "id" "wf_Expr")
          (("" (inst -1 "e1!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((big_conj_wf_Expr_components formula-decl nil WellBehavedMVA nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (id_preserves application-judgement "S" identity_props nil))
   27352 300 t nil))
 (big_conj_cases_TCC3 0
  (big_conj_cases_TCC3-1 nil 3433502450 3433502550
   ("" (skosimp*) (("" (expand* "id" "wf_Expr") nil nil)) nil) proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   14769 140 t nil))
 (big_conj_cases 0
  (big_conj_cases-1 nil 3433498085 3433500039
   ("" (use "finite_set_induction_rest[Expr]")
    ((""
      (inst -1 "LAMBDA(E : finite_set[Expr]): FORALL(p: Program, s: APState):
        (FORALL (e: Expr):
           wf_Expr(p)(e) IMPLIES
            E(e) IMPLIES
             (EXISTS (v1: (Bool?), n1: nat): derive(p)(e, s, v1, s)(n1)))
         IMPLIES
         NOT up?(ex(pstate(s))) IMPLIES
          wf_Expr(p)(big_conj(E)) IMPLIES
           LET v =
                 (FORALL (e: Expr):
                    E(e) IMPLIES
                     (EXISTS (n1: nat):
                        derive(p)(e, s, Bool(TRUE), s)(n1)))
             IN EXISTS (n: nat): derive(p)(big_conj(E), s, Bool(v), s)(n)")
      (("1" (split -1)
        (("1" (skosimp*)
          (("1" (inst?)
            (("1" (assert)
              (("1" (split -1) (("1" (propax) nil nil) ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (skosimp*) (("2" (grind) nil nil)) nil)) nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (inst -1 "p!1" "s!1")
              (("3" (assert)
                (("3" (split -1)
                  (("1" (skosimp*)
                    (("1" (expand "big_conj" 2)
                      (("1" (inst-cp -2 "choose(SS!1)")
                        (("1" (assert)
                          (("1" (split -3)
                            (("1" (skosimp*)
                              (("1" (case "b(v1!1)")
                                (("1" (inst 2 "n1!1 + 1 + n!1")
                                  (("1" (expand "derive" 2 1)
                                    (("1"
                                      (inst
                                       2
                                       "s!1"
                                       "v1!1"
                                       "Bool(FORALL (e: Expr):
                    rest(SS!1)(e) IMPLIES
                     (EXISTS (n1: nat):
                        derive(p!1)(e, s!1, Bool(TRUE), s!1)(n1)))"
                                       "n1!1"
                                       "n!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "check_for_exception")
                                          (("1"
                                            (expand
                                             "check_for_exception_final")
                                            (("1"
                                              (expand "check_for_exception")
                                              (("1"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (iff)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand*
                                                               "rest"
                                                               "remove"
                                                               "member")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case-replace
                                                               "v1!1 = Bool(TRUE)")
                                                              (("1"
                                                                (expand*
                                                                 "rest"
                                                                 "remove"
                                                                 "member")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "big_conj_wf_Expr_components")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst -1 "e!1")
                                                        (("2"
                                                          (expand*
                                                           "id"
                                                           "wf_Expr"
                                                           "rest"
                                                           "remove"
                                                           "member")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (use
                                                     "big_conj_wf_Expr_components")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand*
                                                         "id"
                                                         "wf_Expr")
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (use "big_conj_wf_Expr_components")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand* "id" "wf_Expr")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand*
                                                     "rest"
                                                     "remove"
                                                     "member")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst 3 "n1!1 + 1")
                                  (("2" (hide -2)
                                    (("2" (expand "derive" 3 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst 3 "s!1" "v1!1" _ "n1!1" "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "check_for_exception")
                                              (("2"
                                                (inst 3 "Bool(TRUE)")
                                                (("2"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (case-replace
                                                     "v1!1 = Bool(False)")
                                                    (("1"
                                                      (inst -2 "choose(SS!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (lemma
                                                             "derive_determ_step")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p!1"
                                                               "n1!1"
                                                               "n1!2"
                                                               "choose(SS!1)"
                                                               "Bool(FALSE)"
                                                               "Bool(TRUE)"
                                                               "s!1"
                                                               "s!1"
                                                               "s!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (case-replace
                                                                     "b(Bool(FALSE)) = b(Bool(TRUE))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (use
                                                       "big_conj_wf_Expr_components")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand*
                                                           "id"
                                                           "wf_Expr")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "big_conj_wf_Expr_components")
                              (("2" (assert)
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "big_conj_wf_Expr")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (use "big_conj_wf_Expr_components")
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (assert)
                                  (("2" (expand* "rest" "remove" "member") nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (inst? -3)
                      (("3" (assert)
                        (("3" (expand* "rest" "remove" "member")
                          (("3" (assert)
                            (("3" (flatten) (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp*) (("2" (expand* "id" "wf_Expr") nil nil)) nil)) nil)
       ("3" (hide 2)
        (("3" (skosimp*)
          (("3" (use "big_conj_wf_Expr_components")
            (("3" (assert)
              (("3" (inst -1 "e1!1")
                (("3" (assert) (("3" (expand* "id" "wf_Expr") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (skosimp*) (("4" (expand* "id" "wf_Expr") nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (big_conj def-decl "Expr" MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil) nil
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (FALSE const-decl "bool" booleans nil)
    (derive_determ_step formula-decl nil SemanticsProofs nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil nil
    (rest const-decl "set" sets nil)
    (check_for_exception const-decl "bool" SemanticsAuxiliaryFunctions nil)
    (id_preserves application-judgement "S" identity_props nil)
    (big_conj_wf_Expr_components formula-decl nil WellBehavedMVA nil)
    (remove const-decl "set" sets nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (check_for_exception_final const-decl "bool" SemanticsAuxiliaryFunctions
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (big_conj_wf_Expr formula-decl nil WellBehavedMVA nil) nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil) nil nil
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/"))
   1257963 24480 t shostak))
 (well_behaved_MVA_preserved_by_complete_TCC1 0
  (well_behaved_MVA_preserved_by_complete_TCC1-1 nil 3430036855 3433495620
   ("" (skosimp*) (("" (use "complete_MVA_yields_wf_MVA") nil nil)) nil)
   unchecked
   ((partial const-decl "boolean" MVAProperties nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (complete_MVA_yields_wf_MVA formula-decl nil MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil))
   247 250 t nil))
 (well_behaved_MVA_preserved_by_complete 0
  (well_behaved_MVA_preserved_by_complete-1 nil 3430123744 3433502114
   ("" (skosimp*)
    (("" (expand "well_behaved_MVA")
      (("" (flatten)
        (("" (split 1)
          (("1" (hide -2)
            (("1" (expand "guard_to_expression_behavior")
              (("1" (skosimp*)
                (("1" (expand "complete_MVA" -1)
                  (("1" (auto-rewrite "union" "member")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (inst? -4) (("1" (assert) nil nil)) nil)
                         ("2" (expand "complete_trans")
                          (("2" (assert)
                            (("2" (split -1)
                              (("1" (flatten)
                                (("1" (replace -3 :hide? t)
                                  (("1"
                                    (use "guard_to_expression_build_guard")
                                    (("1" (replace -1 :hide? t)
                                      (("1"
                                        (expand "build_guard")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             " is_finite[(Bool?[Name])]
                       ({v: (Bool?[Name]) |
                           EXISTS (p: Guard[CP, Name]):
                             all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(p) AND
                              v =
                               Bool[Name]
                                   (NOT p(stA!1(s!1), fvs(st(pstate(s!1))), arg!1))})")
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (case-replace
                                                 "          Bool(b(big_and({v: (Bool?) |
                                      EXISTS (p: Guard[CP, Name]):
                                        all_guards(mva!1)(scp(t!1), event(t!1))(p)
                                         AND
                                         v =
                                          Bool(NOT
                                               p
                                               (stA!1(s!1),
                                                fvs(st(pstate(s!1))),
                                                arg!1))}))) = big_and({v: (Bool?) |
                              EXISTS (p: Guard[CP, Name]):
                                all_guards(mva!1)(scp(t!1), event(t!1))(p) AND
                                 v =
                                  Bool(NOT p(stA!1(s!1), fvs(st(pstate(s!1))),
                                             arg!1))})"
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (case
                                                   "is_finite[Expr[Name]]
                           ({expr: Expr[Name] |
                               EXISTS (g: Guard[CP, Name]):
                                 all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(g) AND
                                  expr = Neg[Name](guard_to_expression[CP, Name](g)(arg!1))})")
                                                  (("1"
                                                    (use "big_conj_cases")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (case-replace
                                                               "(FORALL (e: Expr):
                    (EXISTS (g: Guard[CP, Name]):
                       all_guards(mva!1)(scp(t!1), event(t!1))(g) AND
                        e = Neg(guard_to_expression(g)(arg!1)))
                     IMPLIES
                     (EXISTS (n1: nat):
                        derive(p!1)(e, s!1, Bool(TRUE), s!1)(n1))) = b(big_and({v: ((Bool?)) |
                        EXISTS (p: Guard[CP, Name]):
                          all_guards(mva!1)(scp(t!1), event(t!1))(p) AND
                           v =
                            Bool(NOT p
                                     (stA!1(s!1),
                                      fvs(st(pstate(s!1))),
                                      arg!1))}))")
                                                              (("1"
                                                                (rewrite
                                                                 "Val_Bool_eta")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "big_and_is_forall")
                                                                (("2"
                                                                  (hide -1 3)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6)
                                                                    (("2"
                                                                      (iff)
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "all_guards"
                                                                                 -2)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "t!2"
                                                                                     "p!1"
                                                                                     "s!1"
                                                                                     "arg!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -9)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "Neg(guard_to_expression(guard(t!2))(arg!1))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "derive"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "check_for_exception_final")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "check_for_exception")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "derive_determ_step")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "p!1"
                                                                                                                     "n1!1 - 1"
                                                                                                                     "n!2"
                                                                                                                     "guard_to_expression(guard(t!2))(arg!1)"
                                                                                                                     "v1!1"
                                                                                                                     "v!2"
                                                                                                                     "s!1"
                                                                                                                     "s!1"
                                                                                                                     "s!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -8)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "b(Bool(TRUE)) = b(Bool(FALSE))")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -6)
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "big_conj_wf_Expr_components")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "Neg(guard_to_expression(guard(t!2))(arg!1))")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "wf_Expr")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "wf_Body")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names"
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -4)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subterm"
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "all_guards")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "all_guards"
                                                                             -2)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -9
                                                                                 "t!2"
                                                                                 "p!1"
                                                                                 "s!1"
                                                                                 "arg!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -9)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "n!2 + 1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "derive"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "v!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "check_for_exception_final")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "check_for_exception")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -3
                                                                                                         "Bool(NOT b(v!1))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "all_guards")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "big_conj_wf_Expr_components")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "Neg(guard_to_expression(guard(t!2))(arg!1))")
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -1))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "wf_Expr")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "wf_Body")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "var_names"
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subterm"
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "all_guards")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (use
                                                                   "big_conj_wf_Expr_components")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "e!1")
                                                                      (("3"
                                                                        (replace
                                                                         -3)
                                                                        (("3"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (1
                                                                              -1))
                                                                            (("1"
                                                                              (expand
                                                                               "wf_Expr")
                                                                              (("1"
                                                                                (expand
                                                                                 "id")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "all_guards")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst
                                                                 -15
                                                                 "t!2"
                                                                 "p!1"
                                                                 "s!1"
                                                                 "arg!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -15)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "Bool(NOT b(v!1))"
                                                                         "n!1 + 1")
                                                                        (("1"
                                                                          (replace
                                                                           -8)
                                                                          (("1"
                                                                            (expand
                                                                             "derive"
                                                                             1)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "check_for_exception_final")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "check_for_exception")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -6)
                                                                      (("2"
                                                                        (replace
                                                                         -5)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "wf_Expr")
                                                                            (("2"
                                                                              (expand
                                                                               "wf_Body")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -4)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subterm"
                                                                                           2)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred
                                                       "all_guards(mva!1)(scp(t!1), event(t!1))")
                                                      (("2"
                                                        (expand "is_finite")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "N!1"
                                                             "LAMBDA(expr : ({expr: Expr[Name] |
                     EXISTS (g: Guard[CP, Name]):
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(g)
                        AND
                        expr =
                         Neg[Name]
                             (guard_to_expression[CP, Name](g)(arg!1))})) : f!1(choose({g: Guard[CP, Name]|
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(g)
                        AND
                        expr =
                         Neg[Name]
                             (guard_to_expression[CP, Name](g)(arg!1))}))")
                                                            (("1"
                                                              (expand
                                                               "injective?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "nonempty_exists")
                                                                    (("2"
                                                                      (typepred
                                                                       "x2!1")
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (rewrite
                                                                     "nonempty_exists")
                                                                    (("3"
                                                                      (typepred
                                                                       "x1!1")
                                                                      (("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (rewrite
                                                                 "nonempty_exists")
                                                                (("2"
                                                                  (typepred
                                                                   "expr!1")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (typepred
                                                 "all_guards(mva!1)(scp(t!1), event(t!1))")
                                                (("2"
                                                  (expand "is_finite")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "N!1"
                                                       "LAMBDA(v : ({v: (Bool?[Name]) |
                     EXISTS (p: Guard[CP, Name]):
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(p)
                        AND
                        v =
                         Bool[Name]
                             (NOT p(stA!1(s!1),
                                    fvs(st(pstate(s!1))),
                                    arg!1))})) : f!1(choose({p: Guard[CP, Name]|
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(p)
                        AND
                        v =
                         Bool[Name]
                             (NOT p(stA!1(s!1),
                                    fvs(st(pstate(s!1))),
                                    arg!1))}))")
                                                      (("1"
                                                        (expand "injective?")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "nonempty_exists")
                                                              (("2"
                                                                (typepred
                                                                 "x2!1")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (rewrite
                                                               "nonempty_exists")
                                                              (("3"
                                                                (typepred
                                                                 "x1!1")
                                                                (("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (rewrite
                                                           "nonempty_exists")
                                                          (("2"
                                                            (typepred "v!1")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (replace -3)
                                  (("2" (assert)
                                    (("2"
                                      (rewrite
                                       "guard_to_expression_LAMBDA_true")
                                      (("2"
                                        (expand "derive" 2)
                                        (("2"
                                          (inst?)
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (expand "eval_action_behavior")
              (("2" (skosimp*)
                (("2" (expand "complete_MVA" -1)
                  (("2" (auto-rewrite "union" "member")
                    (("2" (assert)
                      (("2" (split -1)
                        (("1" (inst?)
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                         ("2" (expand "complete_trans")
                          (("2" (assert)
                            (("2" (case-replace "action(t!1) = skip")
                              (("1" (expand "skip")
                                (("1" (expand "member")
                                  (("1" (propax) nil nil)) nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((OneAction type-eq-decl nil MVA nil)
    (member def-decl "bool" list_props nil) (skip const-decl "Action" MVA nil)
    (eval_action_behavior const-decl "boolean" WellBehavedMVA nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (guard_to_expression_LAMBDA_true formula-decl nil MVACompletion nil)
    (guard_to_expression_build_guard formula-decl nil MVACompletion nil)
    (partial const-decl "boolean" MVAProperties nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (EventType type-decl nil EventType_adt nil)
    (build_guard const-decl "Guard" MVACompletion nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (all_guards const-decl "finite_set[Guard]" MVACompletion nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil) nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil
    (injective? const-decl "bool" functions nil) nil nil
    (big_conj_cases formula-decl nil WellBehavedMVA nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (id_preserves application-judgement "S" identity_props nil)
    (big_and_is_forall formula-decl nil MVACompletion nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_for_exception const-decl "bool" SemanticsAuxiliaryFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (derive_determ_step formula-decl nil SemanticsProofs nil)
    (check_for_exception_final const-decl "bool" SemanticsAuxiliaryFunctions
     nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (big_conj_wf_Expr_components formula-decl nil WellBehavedMVA nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (Val_Bool_eta formula-decl nil Val_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (guard_to_expression const-decl "[ValOrExcpt -> Expr]" MVAMonitoring nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (big_and def-decl "(Bool?)" MVACompletion nil) nil nil nil nil nil nil nil
    nil nil nil nil
    (complete_trans const-decl "finite_set[Transition]" MVACompletion nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (complete_MVA const-decl "MVA" MVACompletion nil)
    (guard_to_expression_behavior const-decl "boolean" WellBehavedMVA nil)
    (well_behaved_MVA const-decl "boolean" WellBehavedMVA nil))
   2061605 44640 t shostak)))

