\relax 
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction}{7}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\citation{escjava}
\citation{jacobs03java}
\citation{marche03krakatoa}
\citation{BRL-JACK}
\citation{BRL-JACK}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Contributions}{8}}
\citation{Ljbc}
\citation{DesNecLee98}
\@writefile{toc}{\contentsline {section}{\numberline {1.2}Related work}{10}}
\@writefile{toc}{\contentsline {section}{\numberline {1.3}Applications}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {1.4}Plan of the thesis}{11}}
\citation{VMSpec}
\@writefile{toc}{\contentsline {chapter}{\numberline {2} Java bytecode language and its operational semantics}{13}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{opSem:prelim}{{2}{13}}
\citation{ESC2000LNS}
\citation{DRT03GLF}
\citation{stata98type}
\citation{FM99FFJ}
\citation{qian99formal}
\citation{pusch98proving}
\citation{KleinN04}
\citation{barthe01formal}
\citation{barthe02formal}
\citation{siveroni04operational}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Related Work}{16}}
\newlabel{relWork}{{2.1}{16}}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Notation}{17}}
\newlabel{notation}{{2.2}{17}}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Classes, fields and methods}{17}}
\newlabel{clazz}{{2.3}{17}}
\@writefile{toc}{\contentsline {section}{\numberline {2.4}Program types and values}{19}}
\newlabel{types}{{2.4}{19}}
\@writefile{toc}{\contentsline {section}{\numberline {2.5}State configuration}{20}}
\newlabel{def}{{2.5}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.1}Modeling the object heap}{21}}
\newlabel{heap}{{2.5.1}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.2}Registers}{24}}
\newlabel{register}{{2.5.2}{24}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.3}The operand stack}{24}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.4}Program counter}{25}}
\newlabel{pc}{{2.5.4}{25}}
\@writefile{toc}{\contentsline {section}{\numberline {2.6}Throwing and handling exceptions}{25}}
\newlabel{opSem:exc}{{2.6}{25}}
\@writefile{toc}{\contentsline {section}{\numberline {2.7}Design choices for the operational semantics}{26}}
\newlabel{opSem:JVM}{{2.7}{26}}
\@writefile{toc}{\contentsline {section}{\numberline {2.8}Bytecode language and its operational semantics}{27}}
\newlabel{opSem}{{2.8}{27}}
\newlabel{stateTrans}{{2.8.1}{27}}
\newlabel{stateTransit}{{2.8.2}{27}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces \sc  Bytecode language}}{28}}
\newlabel{opSem:bclang}{{2.1}{28}}
\newlabel{stateTransClos}{{2.8.3}{28}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces \sc  Operational semantics for control transfer instructions}}{29}}
\newlabel{opSem:jump}{{2.2}{29}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces \sc  Operational semantics for arithmetic and load store instructions}}{30}}
\newlabel{opSem:arithStack}{{2.3}{30}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces \sc  Operational semantics for object manipulation }}{31}}
\newlabel{opSem:obj:manip}{{2.4}{31}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.5}{\ignorespaces \sc  Operational semantics for object creation }}{33}}
\newlabel{opSem:obj:creat}{{2.5}{33}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.6}{\ignorespaces \sc  Operational semantics for type checking }}{34}}
\newlabel{opSem:obj:typecheck}{{2.6}{34}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.7}{\ignorespaces \sc  Operational semantics for programmatic exceptions }}{34}}
\newlabel{opSem:obj:throw}{{2.7}{34}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.8}{\ignorespaces \sc  Operational semantics for programmatic exceptions }}{35}}
\newlabel{opSem:obj:method}{{2.8}{35}}
\@writefile{toc}{\contentsline {section}{\numberline {2.9}Representing bytecode programs as control flow graphs}{35}}
\newlabel{prelim:ctrFlow}{{2.9}{35}}
\citation{ARUCom1986}
\citation{ARUCom1986}
\newlabel{defLoop}{{2.9.1}{36}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.9}{\ignorespaces \sc  Execution relation between bytecode instructions in a control flow graph}}{37}}
\newlabel{defEdge}{{2.9}{37}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.10}{\ignorespaces { \sc  The control flow graph of the source program from Fig.3.1\hbox {}} }}{38}}
\newlabel{ctrlflow}{{2.10}{38}}
\citation{JMLRefMan}
\citation{M97oos}
\citation{BreunesseCHJ04}
\citation{jmlrac}
\citation{escjava}
\citation{ECG01DDL}
\citation{BurdyCCEKLLP03}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Bytecode modeling language}{39}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{bcsl}{{3}{39}}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Overview of JML}{39}}
\newlabel{BCSLprelim}{{3.1}{39}}
\citation{BRL-JACK}
\citation{PD06LBR}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces \sc  class \unhbox \voidb@x \hbox {\rm  \lstinline !ListArray!} with JML annotations}}{41}}
\newlabel{replaceSrc}{{3.1}{41}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces \sc  specifying No Nested Transaction property with ghost variable}}{42}}
\newlabel{bml:ghost}{{3.2}{42}}
\citation{december-jml}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces \sc  An example for a method with a heavy weight specification in JML}}{43}}
\newlabel{bml:heavySp}{{3.3}{43}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Design features of BML}{44}}
\newlabel{BML:design}{{3.2}{44}}
\citation{VMSpec}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}The subset of JML supported in BML}{45}}
\newlabel{BCSLgrammar}{{3.3}{45}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Notation convention}{45}}
\newlabel{bml:notation}{{3.3.1}{45}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}BML Grammar}{46}}
\newlabel{BCSL}{{3.3.2}{46}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Syntax and semantics of BML}{47}}
\@writefile{toc}{\contentsline {subsubsection}{BML expressions}{47}}
\@writefile{toc}{\contentsline {subsubsection}{BML predicates}{48}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces \sc  An example for a heavy weight specification in BML}}{49}}
\newlabel{bml:heavySpBML}{{3.4}{49}}
\@writefile{toc}{\contentsline {subsubsection}{Class Specification}{49}}
\citation{RT03djml}
\@writefile{toc}{\contentsline {subsubsection}{Frame conditions}{50}}
\@writefile{toc}{\contentsline {subsubsection}{Inter --- method specification}{50}}
\@writefile{toc}{\contentsline {subsubsection}{Intra --- method specification}{51}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces \sc  An example for a loop specification in BML}}{52}}
\newlabel{bml:loopBML}{{3.5}{52}}
\citation{VMSpec}
\citation{Ljbc}
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Well formed BML specification}{53}}
\citation{RT03djml}
\@writefile{toc}{\contentsline {section}{\numberline {3.5}Compiling JML into BML}{54}}
\newlabel{BCSLcompile}{{3.5}{54}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces \sc  Compilation of ghost variable declaration}}{54}}
\newlabel{bml:compiler:ghost}{{3.6}{54}}
\citation{ARUCom1986}
\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces \textbf  {Line\_Number\_Table} {\sc  for the method } \texttt  {replace} {\sc  in Fig. 3.1\hbox {} } }}{56}}
\newlabel{bml:compiler:loopEntry}{{3.7}{56}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.8}{\ignorespaces \sc  The compilation of the postcondition in Fig. 3.1\hbox {}}}{57}}
\newlabel{postCompile}{{3.8}{57}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.9}{\ignorespaces \sc  Structure of the Loop Attribute}}{58}}
\newlabel{loopAttribute}{{3.9}{58}}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Assertion language for the verification condition generator}{59}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{assertLang}{{4}{59}}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}The assertion language}{60}}
\newlabel{assertLang:lang}{{4.1}{60}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}Substitution}{61}}
\newlabel{subst}{{4.2}{61}}
\@writefile{toc}{\contentsline {section}{\numberline {4.3}Interpretation}{61}}
\newlabel{interpret}{{4.3}{61}}
\citation{gries95avoiding}
\citation{schieder99adapting}
\citation{WPCDS}
\citation{gries95avoiding}
\citation{burdy98treatment}
\citation{burdy98treatment}
\newlabel{interpPred}{{4.3.1}{62}}
\newlabel{interpExpr}{{4.3.2}{63}}
\@writefile{toc}{\contentsline {section}{\numberline {4.4}Extending method declarations with specification}{65}}
\newlabel{methExtend}{{4.4}{65}}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}Verification condition generator for Java bytecode }{67}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{wpGeneral}{{5}{67}}
\@writefile{toc}{\contentsline {section}{\numberline {5.1}Discussion}{67}}
\newlabel{wp:discussionVC}{{5.1}{67}}
\citation{WPCDS}
\citation{escjava}
\citation{BLS04sp}
\citation{F67amp}
\citation{gta05:fast}
\citation{B04tlsj}
\citation{Ljbc}
\citation{F67amp}
\citation{Hoare69ABC}
\citation{WPCDS}
\citation{escjava}
\citation{jacobs03java}
\citation{BRL-JACK}
\citation{Quigley03PLJ}
\citation{B04tlsj}
\@writefile{toc}{\contentsline {section}{\numberline {5.2}Related work}{69}}
\newlabel{relWorkWp}{{5.2}{69}}
\citation{BM05plb}
\citation{BLS04sp}
\citation{leinoWPUP}
\@writefile{toc}{\contentsline {section}{\numberline {5.3}Weakest precondition calculus}{70}}
\newlabel{wpRules}{{5.3}{70}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.1}{\ignorespaces \sc  bytecode of method \lstinline !sum! and its specification }}{71}}
\newlabel{wp:example:sum}{{5.1}{71}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.1}Intermediate predicates}{73}}
\newlabel{wp:interPred}{{5.3.1}{73}}
\newlabel{inter}{{5.3.1.1}{73}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.2}Weakest precondition in the presence of exceptions }{74}}
\newlabel{wp:Exc}{{5.3.2}{74}}
\newlabel{defExc}{{5.3.2.1}{74}}
\newlabel{wp:exc:defExcRuntime}{{5.3.2.2}{74}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.3}Rules for single instruction}{75}}
\newlabel{wp:singleInstr}{{5.3.3}{75}}
\@writefile{toc}{\contentsline {section}{\numberline {5.4}Example}{82}}
\newlabel{wp:example}{{5.4}{82}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.2}{\ignorespaces \sc  weakest precondition predicates for the instructions of the bytecode of method \lstinline !sum!}}{84}}
\newlabel{wp:example:sumVC}{{5.2}{84}}
\citation{Nipkow-MOD2001}
\@writefile{toc}{\contentsline {chapter}{\numberline {6}Correctness of the verification condition generator}{85}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{proofGeneral}{{6}{85}}
\@writefile{toc}{\contentsline {section}{\numberline {6.1}Proof outline}{85}}
\newlabel{proof:outline}{{6.1}{85}}
\citation{leinoWPUP}
\citation{leinoWPUP}
\@writefile{toc}{\contentsline {section}{\numberline {6.2}Relation between syntactic substitution and semantic evaluation}{87}}
\newlabel{substProp}{{6.2}{87}}
\newlabel{substLv}{{6.2.1}{88}}
\newlabel{substHeap}{{6.2.2}{89}}
\newlabel{newHeap}{{6.2.3}{89}}
\newlabel{substStack}{{6.2.4}{90}}
\newlabel{substCntr}{{6.2.5}{90}}
\newlabel{substRet}{{6.2.6}{90}}
\@writefile{toc}{\contentsline {section}{\numberline {6.3}Proof of Correctness }{90}}
\newlabel{proof}{{6.3}{90}}
\newlabel{defCorrect}{{6.3.1}{90}}
\citation{M97oos}
\newlabel{lemma0}{{6.3.1}{91}}
\newlabel{lemma1}{{6.3.2}{95}}
\newlabel{lemma3}{{6.3.3}{98}}
\newlabel{lemma2}{{6.3.4}{99}}
\newlabel{vcGenCorrect}{{6.3.5}{99}}
\citation{ComNec}
\@writefile{toc}{\contentsline {chapter}{\numberline {7}Equivalence between Java source and bytecode proof Obligations}{101}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{pogEquiv}{{7}{101}}
\citation{gta05:fast}
\citation{gta05:fast}
\citation{SU05CNS}
\@writefile{toc}{\contentsline {section}{\numberline {7.1}Related work}{102}}
\newlabel{pog:relWork}{{7.1}{102}}
\citation{FB04LBT}
\@writefile{toc}{\contentsline {section}{\numberline {7.2}Source language}{103}}
\newlabel{source}{{7.2}{103}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.1}{\ignorespaces \sc  Source language}}{104}}
\newlabel{source:grammar}{{7.1}{104}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.2}{\ignorespaces \sc  method \lstinline !square! written in our source language}}{105}}
\newlabel{pogComp:source:example}{{7.2}{105}}
\@writefile{toc}{\contentsline {section}{\numberline {7.3}Compiler}{106}}
\newlabel{compile}{{7.3}{106}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.1}Exception handler table}{106}}
\newlabel{pogEq:compile:excHandlers}{{7.3.1}{106}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.2}Compiling loop invariants}{107}}
\newlabel{pogEq:compile:loopInv}{{7.3.2}{107}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.3}Compiling source program constructs in bytecode instructions}{107}}
\newlabel{pogEq:compile:compExpr}{{7.3.3}{107}}
\citation{VMSpec}
\@writefile{lof}{\contentsline {figure}{\numberline {7.3}{\ignorespaces \sc  Definition of the compiler for expressions }}{109}}
\newlabel{pogEq:compile:compExpr:defExpr}{{7.3}{109}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.4}{\ignorespaces \sc  Definition of the compiler for statements }}{110}}
\newlabel{pogEq:compile:compExpr:defStmt}{{7.4}{110}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.5}{\ignorespaces \sc  Definition of the compiler for statements that change the exception handler table}}{111}}
\newlabel{pogEq:compile:compExpr:defExc}{{7.5}{111}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.6}{\ignorespaces \sc  Definition of the compiler for the loop statement}}{111}}
\newlabel{pogEq:compile:compExpr:defLoop}{{7.6}{111}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.4}Properties of the compiler function}{112}}
\newlabel{compile:prop}{{7.3.4}{112}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.7}{\ignorespaces \sc  relation between bytecode and source code of method \lstinline !square! from Fig. 7.2\hbox {} }}{113}}
\newlabel{pogEquiv:compile:prop}{{7.7}{113}}
\newlabel{compile:prop:compProp0}{{7.3.4.1}{113}}
\newlabel{compile:prop:compProp1}{{7.3.4.2}{114}}
\newlabel{compile:prop:compProp2}{{7.3.4.3}{115}}
\newlabel{compile:prop:compPropSubstmt}{{7.3.4.4}{115}}
\newlabel{compile:prop:compProp6}{{7.3.4.5}{115}}
\newlabel{seqInstr}{{7.3.4.1}{115}}
\newlabel{compile:prop:compProp3}{{7.3.4.6}{116}}
\newlabel{compile:prop:compProp4}{{7.3.4.7}{116}}
\newlabel{compile:prop:compProp5}{{7.3.4.8}{117}}
\newlabel{compile:prop:compProp7}{{7.3.4.9}{117}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.8}{\ignorespaces \sc  relation between bytecode and source code of method \lstinline !abs! }}{118}}
\newlabel{pogEquiv:compile:prop:exc}{{7.8}{118}}
\newlabel{compile:prop:compProp8}{{7.3.4.10}{118}}
\newlabel{compile:prop:compProp9}{{7.3.4.11}{119}}
\newlabel{compile:prop:compProp10}{{7.3.4.12}{119}}
\@writefile{toc}{\contentsline {section}{\numberline {7.4}Weakest precondition calculus for source programs}{119}}
\newlabel{pog:wpSrcGeneral}{{7.4}{119}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.1}Source assertion language}{119}}
\newlabel{formulasSrc}{{7.4.1}{119}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.2}Weakest predicate transformer for the source language }{120}}
\newlabel{pog:wpSrc}{{7.4.2}{120}}
\@writefile{toc}{\contentsline {subsubsection}{Exceptional Postcondition Function}{120}}
\newlabel{pog:wpSrc:excPost}{{7.4.2}{120}}
\@writefile{toc}{\contentsline {subsubsection}{Expressions}{121}}
\newlabel{pog:wpSrc:wpExpr}{{7.4.2}{121}}
\@writefile{toc}{\contentsline {subsubsection}{Statements}{121}}
\newlabel{pog:wpSrc:wpStmt}{{7.4.2}{121}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.9}{\ignorespaces \sc  WP for source expressions }}{122}}
\newlabel{pog:wpSrc:wpExpr:wpSrcExpr}{{7.9}{122}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.10}{\ignorespaces \sc  Weakest precondition for instance creation }}{123}}
\newlabel{pog:wpSrc:wpExpr:wpSrcInvoke}{{7.10}{123}}
\@writefile{toc}{\contentsline {section}{\numberline {7.5}Weakest precondition calculus for bytecode programs}{123}}
\newlabel{pog:wpBcGeneral}{{7.5}{123}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.11}{\ignorespaces \sc  WP for source control statements without exceptions }}{124}}
\newlabel{pog:wpSrc:wpStmt:withoutExc}{{7.11}{124}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.12}{\ignorespaces \sc  WP for the control statements with exceptions }}{124}}
\newlabel{pog:wpSrc:wpStmt:withExc}{{7.12}{124}}
\newlabel{pog:wpBc:wpSeq}{{7.5.1}{125}}
\newlabel{wpExpr}{{7.5.2}{125}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.5.1}Properties of the \unhbox \voidb@x \hbox {\rm  \textit  {wp}}\ functions}{126}}
\newlabel{pog:wpBcProp}{{7.5.1}{126}}
\newlabel{wpIns}{{7.5.1.1}{126}}
\newlabel{wpBlock}{{7.5.1.2}{127}}
\newlabel{relWpExpr}{{7.5.1.3}{127}}
\newlabel{relWpStmt}{{7.5.1.4}{128}}
\@writefile{toc}{\contentsline {section}{\numberline {7.6}Proof obligation equivalence on source and bytecode level}{131}}
\newlabel{pogEq:aux}{{7.6}{131}}
\newlabel{pogEq:aux:wpExprSrc}{{7.6.1}{131}}
\newlabel{exprValueOnStack}{{7.6.2}{132}}
\newlabel{pogEq:aux:exprSrcBcWp}{{7.6.3}{132}}
\newlabel{wpStmtBcSrc1}{{7.6.4}{133}}
\newlabel{wpStmtBcSrc2}{{7.6.5}{133}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.13}{\ignorespaces \sc  Definition of $\unhbox \voidb@x \hbox {\rm  \textit  {wp}}^{bc}_{stmt}$ }}{135}}
\newlabel{pog:wpBcGeneral:wpNameStmt}{{7.13}{135}}
\@writefile{toc}{\contentsline {chapter}{\numberline {8}Constraint memory consumption policies using Hoare logics}{137}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{applications:memory}{{8}{137}}
\@writefile{toc}{\contentsline {section}{\numberline {8.1}Modeling memory consumption}{137}}
\newlabel{sec:verif}{{8.1}{137}}
\@writefile{toc}{\contentsline {section}{\numberline {8.2}Principles}{137}}
\newlabel{sec:principles}{{8.2}{137}}
\@writefile{toc}{\contentsline {paragraph}{The precondition}{137}}
\@writefile{toc}{\contentsline {paragraph}{The normal postcondition}{138}}
\@writefile{toc}{\contentsline {paragraph}{The exceptional postcondition}{138}}
\@writefile{toc}{\contentsline {paragraph}{Loops}{138}}
\@writefile{toc}{\contentsline {paragraph}{For every instruction that allocates memory}{139}}
\@writefile{toc}{\contentsline {section}{\numberline {8.3}Examples}{139}}
\newlabel{sec:examples}{{8.3}{139}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3.1}Inheritance and overridden methods}{139}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3.2}Recursive Methods}{139}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.1}{\ignorespaces \sc  Example of overridden methods}}{140}}
\newlabel{classExt}{{8.1}{140}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3.3}More precise specification}{140}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.2}{\ignorespaces \sc  Example of a recursive method}}{141}}
\newlabel{recMeth}{{8.2}{141}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.3}{\ignorespaces \sc  Example of a method with possible exceptional termination}}{142}}
\newlabel{excMeth}{{8.3}{142}}
\@writefile{toc}{\contentsline {section}{\numberline {8.4}Inferring memory allocation for methods}{142}}
\newlabel{sec:infer}{{8.4}{142}}
\citation{ASU86cpt}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.4.1}Annotation assistant}{143}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.4}{\ignorespaces \sc  Inference algorithm}}{143}}
\newlabel{methodAlloc}{{8.4}{143}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.5}{\ignorespaces \sc  Definition of the function $\unhbox \voidb@x \hbox {\rm  \texttt  {allocPath}}(i_{s})$}}{144}}
\newlabel{fig:allocMethod}{{8.5}{144}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.6}{\ignorespaces \sc  Definition of the function $\unhbox \voidb@x \hbox {\rm  \texttt  {loopConsumption}}(\cdot )$ and $\unhbox \voidb@x \hbox {\rm  \texttt  {allocLoopPath}}(\cdot  , \cdot )$ }}{144}}
\newlabel{fig:loopPath}{{8.6}{144}}
\citation{MWCG99tal}
\citation{AH02ats}
\citation{Hofmann00tsb}
\citation{HP99rdd}
\citation{AC03hba}
\citation{VC04fta}
\citation{ACDJ04fsb}
\citation{HJ03sph}
\citation{CW00rbc}
\citation{CJPS05cmu}
\citation{schneider04cba}
\newlabel{sec:infer}{{8.4.1}{145}}
\@writefile{toc}{\contentsline {section}{\numberline {8.5}Related work}{145}}
\newlabel{sec:rel}{{8.5}{145}}
\citation{GNYZ04pir}
\citation{fredlund04gcp}
\citation{CEILN05}
\citation{CEILN05}
\citation{Mulchandani1998}
\citation{Lagosanto2002}
\citation{Grimaud2003}
\@writefile{toc}{\contentsline {chapter}{\numberline {9}A Low-Footprint Java-to-Native Compilation Scheme Using Formal Methods}{147}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{applications:optimComp}{{9}{147}}
\newlabel{sec:intro}{{9}{147}}
\@writefile{toc}{\contentsline {section}{\numberline {9.1}Ahead-of-time \& just-in-time compilation}{148}}
\newlabel{sec:sota}{{9.1}{148}}
\citation{Lindholm2000}
\@writefile{toc}{\contentsline {section}{\numberline {9.2}Java runtime exceptions}{149}}
\newlabel{sec:runtimeexceptions}{{9.2}{149}}
\citation{Ishizaki1999}
\@writefile{lof}{\contentsline {figure}{\numberline {9.1}{\ignorespaces \sc  A Java bytecode program and its (simplified) C-compiled version. The behavior of the division operator in Java must be entirely reproduced by the C program, which leads to the generation of a runtime exception check site}}{151}}
\newlabel{fig:javatoc}{{9.1}{151}}
\@writefile{toc}{\contentsline {section}{\numberline {9.3}Optimizing ahead-of-time compiled Java code}{151}}
\newlabel{sec:method}{{9.3}{151}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.3.1}Methodology for writing specification against runtime exception}{152}}
\@writefile{lof}{\contentsline {figure}{\numberline {9.2}{\ignorespaces \sc  A JML-annotated method}}{153}}
\newlabel{fig:jmlexample}{{9.2}{153}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.3.2}From program proofs to program optimizations }{153}}
\newlabel{proofs}{{9.3.2}{153}}
\citation{BRL-JACK}
\citation{JITSWebsite}
\@writefile{lof}{\contentsline {figure}{\numberline {9.3}{\ignorespaces \sc  The verification condition for the \texttt  {ArrayIndexOutOfBoundException} check related to the \texttt  {sastore} instruction of figure\nobreakspace  {}3\hbox {}}}{154}}
\newlabel{proofs:vc}{{9.3}{154}}
\@writefile{toc}{\contentsline {section}{\numberline {9.4}Experimental results}{154}}
\newlabel{sec:experiments}{{9.4}{154}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.4.1}Methodology}{154}}
\@writefile{lot}{\contentsline {table}{\numberline {9.1}{\ignorespaces Number of exception check sites and memory footprints when compiled for ARM thumb}}{155}}
\newlabel{tab:nbexcsites}{{9.1}{155}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.4.2}Results}{155}}
\newlabel{results}{{9.4.2}{155}}
\@writefile{lot}{\contentsline {table}{\numberline {9.2}{\ignorespaces Human work on the tested programs}}{156}}
\newlabel{tab:implication}{{9.2}{156}}
\citation{Proebsting1997}
\citation{Muller1997}
\citation{JCVM}
\citation{Raja1999}
\citation{Hummel1997}
\citation{Azevedo1999}
\citation{Ishizaki1999}
\@writefile{toc}{\contentsline {section}{\numberline {9.5}Limitations}{157}}
\newlabel{sec:limitations}{{9.5}{157}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.5.1}Multi-threaded programs}{157}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.5.2}Dynamic code loading}{157}}
\@writefile{toc}{\contentsline {section}{\numberline {9.6}Related work}{157}}
\newlabel{sec:relatedwork}{{9.6}{157}}
\@writefile{toc}{\contentsline {chapter}{\numberline {10}Conclusion}{159}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {chapter}{Appendices}{159}}
\@writefile{toc}{\contentsline {section}{\numberline {.1}Proofs of properties from Section 7.3.4\hbox {} }{159}}
\newlabel{appendix:compile:prop}{{.1}{159}}
\@writefile{toc}{\contentsline {section}{\numberline {.2}Proofs from Section 7.6\hbox {}}{162}}
\newlabel{pogEq:aux:exprSrcBcWp}{{.2.2}{164}}
\bibstyle{plain}
\bibdata{biblio,specification,bib_mem-wpc,optimComp}
\bibcite{ARUCom1986}{1}
\bibcite{BM05plb}{2}
\bibcite{BLS04sp}{3}
\bibcite{barthe02formal}{4}
\bibcite{barthe01formal}{5}
\bibcite{B04tlsj}{6}
\bibcite{M97oos}{7}
\bibcite{BreunesseCHJ04}{8}
\bibcite{BurdyCCEKLLP03}{9}
\bibcite{BRL-JACK}{10}
\bibcite{jmlrac}{11}
\bibcite{WPCDS}{12}
\bibcite{FM99FFJ}{13}
\bibcite{JMLRefMan}{14}
\bibcite{Hoare69ABC}{15}
\bibcite{jacobs03java}{16}
\bibcite{KleinN04}{17}
\bibcite{escjava}{18}
\bibcite{Ljbc}{19}
\bibcite{VMSpec}{20}
\bibcite{leinoWPUP}{21}
\bibcite{pusch98proving}{22}
\bibcite{qian99formal}{23}
\bibcite{Quigley03PLJ}{24}
\bibcite{RT03djml}{25}
\bibcite{F67amp}{26}
\bibcite{siveroni04operational}{27}
\bibcite{WildmoserN-ESOP05}{28}
