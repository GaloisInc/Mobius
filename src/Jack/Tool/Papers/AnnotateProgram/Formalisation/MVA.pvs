EventType : DATATYPE
BEGIN

  Entry : Entry?
  ExitNormal : ExitNormal?
  ExitExceptional : ExitExceptional?


END EventType


% Multi-Variable Automata
MVA[CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING JType, 
            Expr[Name], 
            Val
  
  MVAVarDecl : TYPE =
    [# name : Name,
       jtype : JType,
       init_val : Val
    #]

  ProgVarDecl : TYPE =
    [# name : Name,
       jtype : JType
    #]

  IMPORTING State[Name]

  Guard : TYPE = [Store, PSt -> boolean]

  OneAction : TYPE =
    [# target : Name,
       source : Expr[Name]
    #]

  Action : TYPE = list[OneAction]

  skip : Action = null[OneAction]

  IMPORTING EventType

  Event : TYPE =
    [# etype : EventType,
       mname : Name
    #]

  Transition : TYPE =
    [# scp : CP,         % source control point
       event : Event,
       guard : Guard,
       action : Action,
       tcp : CP          % target control point
    #]
   
  % halted is our characterization of a state where the automaton is blocked
  halted : CP

  % An NVA consists of:
  % a name of the class that the automaton monitors,
  % a finite set of control points other than halted,
  % an initial control point,
  % a finite set of events,
  % a finite set of variable declarations used by the automaton,
  % a finite set of vars decls from the program that may be used in guards,
  % a finite transition relation
  MVA : TYPE =
    [# name : Name,
       class_name : Name,
       cps : finite_set[CP],
       init_cp : CP,
       evs : finite_set[Event],
       vdsA : finite_set[MVAVarDecl],
       vdsP : finite_set[ProgVarDecl],
       ts : finite_set[Transition]
    #]

  % NOTE: vdsA and vdsP are just the signatures of the variables, they do not
  %       contain their values. Only states have values for variables.


END MVA


WellFormedMVA[CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING MVA[CP, Name],
            WellFormedProgram[Name]   % imports var_names(e : Expr) : set[Name]

  % Functions to get a set of names from a set of variable declarations
  var_names(vds : set[MVAVarDecl]) : set[Name] =
    {n : Name | EXISTS (va : MVAVarDecl) : vds(va) AND name(va) = n}

  var_names(vds : set[ProgVarDecl]) : set[Name] =
    {n : Name | EXISTS (vp : ProgVarDecl) : vds(vp) AND name(vp) = n}


  wf_Store(vds : finite_set[MVAVarDecl])(st : Store) : boolean =
    FORALL (n : Name) :
      var_names(vds)(n) IFF NOT Bottom?(st(n))

  wf_Store(a : MVA)(f : Store) : boolean =
    wf_Store(vdsA(a))(f)

  % NOTE: Recall that we assume that variables in PSt are fields.
  % Variables in PSt are a subset of the program variables, if we require them
  % to be equal then we can use an IFF
  wf_PSt(vds : finite_set[ProgVarDecl])(st : PSt) : boolean =
    FORALL (n : Name) :
      var_names(vds)(n) IMPLIES NOT Bottom?(fvs(st)(n))

  wf_PSt(a : MVA)(f : PSt) : boolean =
    wf_PSt(vdsP(a))(f)

  wf_vdsA(vds : set[MVAVarDecl]) : boolean =
    FORALL (vd1, vd2 : MVAVarDecl) : vds(vd1) IMPLIES vds(vd2) IMPLIES
      name(vd1) = name(vd2) IMPLIES vd1 = vd2

  wf_vdsP(vds : set[ProgVarDecl]) : boolean =
    FORALL (vd1, vd2 : ProgVarDecl) : vds(vd1) IMPLIES vds(vd2) IMPLIES
      name(vd1) = name(vd2) IMPLIES vd1 = vd2

  wf_Guard(a : MVA)(g : Guard) : boolean =
    FORALL (sA : Store, sP : PSt, n : Name, v : Val) :
      (NOT var_names(vdsA(a))(n) AND NOT var_names(vdsP(a))(n)) IMPLIES
        g(sA, sP) = g(sA WITH [n |-> v], sP) AND
        g(sA, sP) = g(sA, sP WITH [fvs := fvs(sP) WITH [n |-> v]])

  wf_Action(a : MVA)(l : Action) : boolean =
    FORALL (c : OneAction) :
      member(c, l) IMPLIES
        var_names(vdsA(a))(target(c)) AND
        subset?(var_names(source(c)), 
                union(var_names(vdsA(a)), var_names(vdsP(a))))

  % Rules that every MVA must follow:
  % The initial control point is in the set of control points of the automaton
  % The set vdsA and vdsP are "well formed"
  % The name of the variables in vdsA and vdsP are distinct
  % The source and target of every transition is in the set of control points
  % The event of every transition is in the set of events
  % The target of every OneAction in every transition is in vdsA and variables
  % appearing in the source expression are either in vdsA or in vdsP
  % Guards and actions are well formed
  wf_MVA(a : MVA) : boolean =
    cps(a)(init_cp(a)) AND
    wf_vdsA(vdsA(a)) AND
    wf_vdsP(vdsP(a)) AND
    disjoint?(var_names(vdsA(a)), var_names(vdsP(a))) AND
    FORALL (t : Transition) :
      ts(a)(t) IMPLIES
        cps(a)(scp(t)) AND
        cps(a)(tcp(t)) AND
        evs(a)(event(t)) AND
        wf_Guard(a)(guard(t)) AND
        wf_Action(a)(action(t))


END WellFormedMVA


MVASemantics[CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING WellFormedMVA[CP, Name]

  deterministic(a : (wf_MVA)) : boolean =
    FORALL (t1, t2 : Transition, stA : Store, stP : PSt) :
      ts(a)(t1) IMPLIES
      ts(a)(t2) IMPLIES
      wf_Store(a)(stA) IMPLIES
      wf_PSt(a)(stP) IMPLIES
      scp(t2) = scp(t1) IMPLIES
      event(t2) = event(t1) IMPLIES
      guard(t1)(stA, stP) IMPLIES
      guard(t2)(stA, stP) IMPLIES
        t1 = t2

  total(a : (wf_MVA)) : boolean =
    FORALL (q : CP, e : Event, stA : Store, stP : PSt) :
      cps(a)(q) IMPLIES
      evs(a)(e) IMPLIES
      wf_Store(a)(stA) IMPLIES
      wf_PSt(a)(stP) IMPLIES
        EXISTS (t : Transition) : ts(a)(t) AND
                                  scp(t) = q AND
                                  event(t) = e AND
                                  guard(t)(stA, stP)

  trap_state(q : CP, a : (wf_MVA)) : boolean =
    FORALL (t : Transition) :
      ts(a)(t) AND scp(t) = q IMPLIES
        tcp(t) = halted

  % A MVA does not necessarily have to pass through our completion function to
  % be usable. These are the conditions we require to work with a MVA
  complete(a : MVA) : boolean =
    wf_MVA(a) AND
    cps(a)(halted) AND
    trap_state(halted, a) AND
    NOT init_cp(a) = halted AND  % needed to prove initial_states_are_equivalent
    deterministic(a) AND
    total(a)

  AUTO_REWRITE- complete, total, deterministic


  % The state of a MVA is composed by its currrent control point and values for
  % its variables
  AState : TYPE =
    [# cp : CP,
       stA : Store
    #]

  % TODO: Give a definition that does not use choose (use lists)
  get_MVAVarDecl(n : Name, a : (wf_MVA)) : lift[MVAVarDecl] =
    LET vds = {vd : MVAVarDecl | vdsA(a)(vd) AND name(vd) = n}  IN
      IF empty?(vds) 
      THEN bottom 
      ELSE up(choose(vds))
      ENDIF

  % Initial state of a MVA
  initial_MVA_state(a : MVA) : AState =
    (# cp := init_cp(a),
       stA := LAMBDA (n: Name) :
         LET vd = get_MVAVarDecl(n, a) IN
         IF bottom?(vd)
         THEN Bottom
         ELSE init_val(down(vd))
         ENDIF
    #)


  % A program event is an event that occurred in the program together with the 
  % value of its variables at that point
  PEvent : TYPE =
    [# stP : PSt,
       event : Event
    #]

  % Updates a store
  update(st : Store)(n : Name)(v : Val) : Store =
    LAMBDA(m : Name) :
      IF m = n
      THEN v
      ELSE st(m)
      ENDIF

  % guard_to_expression is implicitly defined by guard_to_expression_behavior
  % in MonitoredProgramSemantics.
  guard_to_expression(a : MVA)(g : Guard) : Expr

  % NOTE: eval is implicitly defined by eval_action_behavior in 
  % MonitoredProgramSemantics. Since we only consider the PSt of the state of
  % the program, actions can not talk about existing ghost variables in the
  % monitored program, but that is fine since we assumed that they are fields
  % (although it could be extended to handle ghosts as well).
  eval(e : Expr)(stA : Store, stP : PSt) : Val

  % type checking problem, because program expressions cannot be evaluated
  execute_action(l : Action)(stA : Store, stP : PSt) : RECURSIVE Store =
    IF null?(l)
    THEN stA
    ELSE execute_action(cdr(l))(update(stA)(target(car(l)))
                                            (eval(source(car(l)))(stA, stP)),
                                 stP)
    ENDIF
  MEASURE length(l)


  %  Well formed states

  wf_AState(a : MVA)(s : AState) : boolean =
    cps(a)(cp(s)) AND
    wf_Store(a)(stA(s))

  wf_PEvent(a : MVA)(pe : PEvent) : boolean =
    evs(a)(event(pe)) AND wf_PSt(a)(stP(pe))


  % Single judgement for a MVA
  step(a : (total))(s : (wf_AState(a)), pe : (wf_PEvent(a))) : AState =
      LET t = choose(LAMBDA (t : Transition) : 
                       ts(a)(t) AND 
                       scp(t) = cp(s) AND 
                       event(t) = event(pe) AND
                       guard(t)(stA(s), stP(pe))) IN
      (# cp := tcp(t),
         stA := execute_action(action(t))(stA(s), stP(pe))
      #)


  %  Well-formed lemmas

  % TODO: prove but first change the definition of get_MVAVarDecl
  wf_initial_MVA_state: LEMMA
    FORALL (a: MVA) :
      wf_MVA(a) IMPLIES wf_AState(a)(initial_MVA_state(a))

  % The evaluation of actions must return a defined value (thus it can not
  % return a state with an exception)
  eval_yields_not_bottom : AXIOM
    FORALL (a : MVA, e : Expr, stA : Store, stP : PSt) :
      wf_Store(a)(stA) IMPLIES
      wf_PSt(a)(stP) IMPLIES
        NOT Bottom?(eval(e)(stA, stP))

  execute_action_yields_wf_state : LEMMA % :-)
    FORALL (a : MVA, l : Action, stA : Store, stP : PSt) :
      wf_Store(a)(stA) IMPLIES
      wf_PSt(a)(stP) IMPLIES
      wf_Action(a)(l) IMPLIES
        wf_Store(a)(execute_action(l)(stA, stP))

  step_yields_wf_state : THEOREM % :-)
    FORALL (a : (total), s : (wf_AState(a)), pe : (wf_PEvent(a))) :
      wf_AState(a)(step(a)(s, pe))


END MVASemantics


MVACompletion[CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING MVASemantics[CP, Name],
            EpsilonProps, 
            MVAFiniteProps

  % Returns the set of guards from transitions with cp as source control
  % point and e as event
  all_guards(a : MVA)(cp : CP, e : Event) : finite_set[Guard] =
    {p : Guard | EXISTS (t : Transition) : ts(a)(t) AND scp(t) = cp AND
                                           event(t) = e AND guard(t) = p}
 
  % Returns a guard that is the conjuction of the negation of the guards in ts
  % with source control point cp and event e. The sets of variable declarations
  % are needed to make sure that the guard is defined in for those variables.
  build_guard(a : MVA)(cp : CP, e : Event) : Guard =
   LAMBDA (stA : Store, stP : PSt) :
     FORALL (p : Guard) : all_guards(a)(cp, e)(p) IMPLIES NOT p(stA, stP)

  % Makes ts(a) complete with respect cps and evs(a)
  complete_trans(a : MVA) : finite_set[Transition] =
    union({t : Transition | cps(a)(scp(t)) AND evs(a)(event(t)) AND
                            guard(t) = build_guard(a)(scp(t), event(t)) AND
                            action(t) = skip AND tcp(t) = halted},
          {t : Transition | scp(t) = halted AND evs(a)(event(t)) AND
                            guard(t) = (LAMBDA (stA : Store, stP : PSt) : TRUE)
                            AND action(t) = skip AND tcp(t) = halted})


  % Preconditions for completeMVA
  complete_MVA_pre(a : (wf_MVA)) : boolean =
    deterministic(a) AND NOT cps(a)(halted)

  % Makes a deterministic MVA total
  complete_MVA(a : (complete_MVA_pre)) : MVA =
    a WITH [cps := add(halted, cps(a)),
            ts := union(ts(a), complete_trans(a))]


  build_guard_yields_wf_guard : LEMMA % :-)
    FORALL (a : MVA, cp : CP, e : Event ) :
      wf_MVA(a) IMPLIES wf_Guard(a)(build_guard(a)(cp, e))

  complete_MVA_yields_wf_MVA : LEMMA % :-)
    FORALL (a : (complete_MVA_pre)) :
      wf_MVA(complete_MVA(a))

  complete_MVA_has_trap_state: LEMMA % :-)
    FORALL (a : (complete_MVA_pre)) :
      trap_state(halted, complete_MVA(a))

  complete_MVA_is_deterministic : LEMMA % :-)
    FORALL (a : (complete_MVA_pre)) :
      deterministic(complete_MVA(a))

  complete_MVA_is_total : LEMMA % :-)
    FORALL (a : (complete_MVA_pre)) :
      total(complete_MVA(a))

  complete_MVA_is_complete : THEOREM % :-)
    FORALL (a : (complete_MVA_pre)) :
      complete(complete_MVA(a))


END MVACompletion
