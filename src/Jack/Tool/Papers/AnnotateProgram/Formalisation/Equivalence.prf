(Equivalence
 (MVA_modeled?_TCC1 0
  (MVA_modeled?_TCC1-1 nil 3386483209 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (MP_modeled?_TCC1 0
  (MP_modeled?_TCC1-1 nil 3386667098 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (initial_states_are_equivalent 0
  (initial_states_are_equivalent-1 nil 3383291365 3384516249
   ("" (skosimp)
    (("" (expand "MP_modeled?")
      (("" (split)
        (("1" (expand "MVA_modeled?")
          (("1" (split)
            (("1"
              (expand* "cp2val" "initial_MP_state"
               "initial_Program_state")
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (postpone) nil nil)
                   ("2" (expand "initial_MVA_state")
                    (("2" (expand "get_GhostVarDecl")
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (assert) nil nil)
                           ("2" (delete 1)
                            (("2" (lemma "get_GhostVarDecl_is_determ")
                              (("2"
                                (inst -1 "\"cp\"" "ann_program(mp!1)")
                                (("1"
                                  (beta)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (use
                                       "choose_singleton?[{gd: GhostVarDecl[string] | EXISTS (c: Class[string]):
            classes(ann_program(mp!1))(c) AND ghost_vars(c)(gd) AND name(gd) = \"cp\"}]")
                                      (("1"
                                        (prop)
                                        (("1" (postpone) nil nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil)
             ("3" (flatten)
              (("3"
                (expand* "initial_MP_state" "initial_Program_state"
                 "initial_MVA_state" "ann_program_pre" "wf_MP"
                 "complete")
                (("3" (prop) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2"
          (expand* "Program_modeled?" "initial_MP_state"
           "initial_Program_state" "ann_program_pre")
          (("2" (expand "wf_MP")
            (("2" (prop)
              (("1" (apply-extensionality)
                (("1" (hide 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide-all-but (-1 1))
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (postpone) nil nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                 ("4" (postpone) nil nil) ("5" (postpone) nil nil)
                 ("6" (postpone) nil nil) ("7" (postpone) nil nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 2658012 15280 t shostak))
 (MP_modeled_implies_same_exception 0
  (MP_modeled_implies_same_exception-1 nil 3386411363 3386591983
   ("" (skosimp)
    (("" (expand "MP_modeled?")
      (("" (expand "Program_modeled?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unfinished ((Program_modeled? const-decl "boolean" Equivalence nil))
   52363 40 t shostak))
 (MP_modeled_preserved_by_update 0
  (MP_modeled_preserved_by_update-2 nil 3386678151 3387011723
   ("" (skosimp*)
    (("" (expand "MP_modeled?")
      (("" (prop)
        (("1" (use "wf_state_implies_updated_MP_state")
          (("1" (assert) nil nil)) nil)
         ("2" (use "ann_program_preserves_state_vars")
          (("2" (assert)
            (("2" (lemma "wf_state_vars_local_or_field")
              (("2"
                (inst -1 "ann_program(mp!1)" "pstate(sAP!1)" "vn!1")
                (("2" (split -1)
                  (("1" (hide-all-but (-1 -2 -4 1))
                    (("1" (flatten)
                      (("1"
                        (expand* "update_state_MP" "update_state_AP"
                         "update" "update_field" "update_local")
                        (("1" (lift-if) (("1" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "wf_updated_AP_state_implies_wf_state")
                    (("2" (use "wf_updated_AP_state_implies_wf_state")
                      (("2" (assert) (("2" (postpone) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (use "wf_updated_AP_state_implies_wf_state")
          (("3" (assert) (("3" (postpone) nil nil)) nil)) nil)
         ("4" (use "wf_updated_AP_state_implies_wf_state")
          (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 812999 1450 t nil)
  (MP_modeled_preserved_by_update-1 nil 3386476534 3386667099
   ("" (skosimp*)
    (("" (expand* "MP_modeled?" "update_state_MP" "update_state_AP")
      (("" (prop)
        (("1"
          (expand* "MVA_modeled?" "update" "update_local"
           "update_field")
          nil nil)
         ("2"
          (expand* "Program_modeled?" "update" "update_local"
           "update_field")
          (("2" (use "ann_program_preserves_state_vars")
            (("2" (assert)
              (("2" (lemma "wf_state_vars_local_or_field")
                (("2"
                  (inst -1 "ann_program(mp!1)" "pstate(sAP!1)" "vn!1")
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (lift-if)
                        (("1" (lift-if) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "wf_state" -4)
                      (("2" (flatten -4) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((update_field const-decl "PState" State nil)
    (update_local const-decl "PState" State nil)
    (update const-decl "PState" State nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (ann_program_preserves_state_vars formula-decl nil
     AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_state_vars_local_or_field formula-decl nil State nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_MP const-decl "boolean" WellFormedMonitoredProgram nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (update_state_AP const-decl "(update_FullState_type)"
     AnnotatedProgramSemantics nil)
    (update_state_MP const-decl "(update_FullState_type)"
     MonitoredProgramSemantics nil))
   1381 530 t shostak))
 (MP_modeled_implies_same_num_eval 0
  (MP_modeled_implies_same_num_eval-1 nil 3386678588 3386680211
   ("" (skolem!)
    (("" (skolem!)
      (("" (induct "n")
        (("1" (skosimp)
          (("1" (expand "eval") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skosimp)
          (("2" (assert)
            (("2" (expand "eval" 1) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (assert)
            (("3" (expand "eval" 1) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (skosimp*)
          (("4" (expand "eval" 1) (("4" (assert) nil nil)) nil)) nil)
         ("5" (skosimp*)
          (("5" (expand "eval" 1)
            (("5" (lift-if)
              (("5" (lift-if) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("6" (skosimp*)
          (("6" (expand "eval")
            (("6" (expand "lookup")
              (("6" (use "ann_program_preserves_state_vars")
                (("6" (lift-if)
                  (("6" (lift-if)
                    (("6" (use "wf_state_vars_local_or_field")
                      (("1" (expand "MP_modeled?")
                        (("1" (postpone) nil nil)) nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1623010 40250 t shostak))
 (deriv_expr_maintains_equivalence 0
  (deriv_expr_maintains_equivalence-1 nil 3386497242 3387008105
   ("" (skosimp)
    (("" (induct e)
      (("1" (skosimp*)
        (("1" (expand "deriv_expr" (-4 -5))
          (("1" (expand "deriv_expr" (-4 -5))
            (("1" (use "MP_modeled_implies_same_exception")
              (("1" (assert)
                (("1" (case "up?(ex(pstate(sMP1!1)))")
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (skosimp*)
                        (("2"
                          (inst -2 "v1!1" "v2!1" "sMP1!1" "tau!1"
                           "sAP1!1" "tau!2" "n1!1 - 1" "n2!1 - 1")
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lemma
                                   "MP_modeled_implies_same_exception")
                                  (("1"
                                    (inst -1 "mp!1" "tau!1" "tau!2")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (case "up?(ex(pstate(tau!1)))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite -9)
                                            (("1"
                                              (rewrite -11)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (use
                                               "MP_modeled_preserved_by_update")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "deriv_expr" 1)
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (expand "deriv_expr" 1)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "deriv_expr" (-3 -4))
          (("2" (expand "deriv_expr" (-3 -4))
            (("2" (use "MP_modeled_implies_same_exception")
              (("2" (assert)
                (("2" (case "up?(ex(pstate(sMP1!1)))")
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (assert) nil nil)
                       ("2" (rewrite -8) (("2" (rewrite -5) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (prop)
                      (("1" (rewrite -5)
                        (("1" (rewrite -7)
                          (("1"
                            (use "MP_modeled_implies_same_bool_eval")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (rewrite -4) (("2" (rewrite -6) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil)
       ("4" (skosimp*)
        (("4" (expand "deriv_expr" (-5 -6))
          (("4" (expand "deriv_expr" (-5 -6))
            (("4" (use "MP_modeled_implies_same_exception")
              (("4" (assert)
                (("4" (case "up?(ex(pstate(sMP1!1)))")
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (assert) nil nil)
                       ("2" (rewrite -7) (("2" (rewrite -9) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (skosimp*)
                      (("2"
                        (inst -2 "a!1" "a!2" "sMP1!1" "tau1!1" "sAP1!1"
                         "tau1!2" "m1!1" "m1!2")
                        (("2" (split -2)
                          (("1"
                            (inst -3 "pv!1" "pv!2" "tau1!1" "tau2!1"
                             "tau1!2" "tau2!2" "m2!1" "m2!2")
                            (("1" (expand "deriv_expr" -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -3 -7 -9 -10 -21 -22)
                                      (("1"
                                        (lemma
                                         "MP_modeled_implies_same_exception")
                                        (("1"
                                          (inst
                                           -1
                                           "mp!1"
                                           "tau1!1"
                                           "tau1!2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "MP_modeled?(mp!1)(tau3!1, tau3!2)")
                                              (("1"
                                                (hide
                                                 -2
                                                 -3
                                                 -4
                                                 -6
                                                 -9
                                                 -19)
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1
                                                  -2
                                                  -5
                                                  -6
                                                  -8
                                                  -18
                                                  1))
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (case
                                                     "up?(ex(pstate(tau1!1))) AND Null?(a!1)")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             -7)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             -8)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite -4)
                                                        (("2"
                                                          (rewrite -3)
                                                          (("2"
                                                            (prop)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split -5)
                                                      (("1"
                                                        (split -6)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -7)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -3)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "deriv_expr" 1)
                            (("2" (propax) nil nil)) nil)
                           ("3" (expand "deriv_expr" 1)
                            (("3" (propax) nil nil)) nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skosimp*)
        (("5" (expand "deriv_expr")
          (("5" (expand "deriv_expr")
            (("5" (use "MP_modeled_implies_same_exception")
              (("5" (assert)
                (("5" (case "up?(ex(pstate(sMP1!1)))")
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (prop)
                      (("1" (use "MP_modeled_implies_same_num_eval")
                        (("1" (assert) nil nil)) nil)
                       ("2" (rewrite -4) (("2" (rewrite -6) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skosimp*)
        (("6" (expand "deriv_expr")
          (("6" (expand "deriv_expr")
            (("6" (use "MP_modeled_implies_same_exception")
              (("6" (assert)
                (("6" (case "up?(ex(pstate(sMP1!1)))")
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (assert) nil nil)
                       ("2" (rewrite -5) (("2" (rewrite -7) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (prop)
                      (("1" (case "RExpr1_var!1 = Null")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (replace -5 2)
                            (("2" (replace -8 2)
                              (("2" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skosimp*)
        (("7" (expand "MP_modeled?")
          (("7" (expand "ann_program_pre") (("7" (flatten) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 10234636 56060 t nil))
 (deriv_stmt_maintains_equivalence 0
  (deriv_stmt_maintains_equivalence-1 nil 3386674579 3386674587
   ("" (postpone) nil nil) unfinished nil 7597 10 t shostak))
 (correcteness_of_ann_program 0
  (correctness_of_ann_program-1 "" 3386566650 3386566650
   ("" (skosimp*)
    ((""
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram")
      (("" (use "initial_states_are_equivalent")
        (("" (assert)
          (("" (lemma "deriv_stmt_maintains_equivalence")
            ((""
              (inst -1 "mp!1" "ann_program(mp!1)" "n!1" "m!1"
               "StmtExpr(MethodCall(RExpr(RefVarEval(This)), name(main!1), NExpr(Int(arg!1))))"
               "initial_MP_state(mp!1)" "sMP!1"
               "initial_AP_state(ann_program(mp!1))" "sAP!1")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 32756 440 nil shostak)
  (correcteness_of_ann_program-2 nil 3386566615 nil
   (";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
    (skosimp*)
    ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram")
      ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
        (use "initial_states_are_equivalent")
        ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
          (assert)
          ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
            (lemma "deriv_stmt_maintains_equivalence")
            ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
              (inst -1 "mp!1" "ann_program(mp!1)" "n!1" "m!1"
               "StmtExpr(MethodCall(RExpr(RefVarEval(This)), name(main!1), NExpr(Int(arg!1))))"
               "initial_MP_state(mp!1)" "sMP!1"
               "initial_AP_state(ann_program(mp!1))" "sAP!1")
              ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
                (assert) nil))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((initial_states_are_equivalent formula-decl nil Equivalence nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (deriv_stmt_maintains_equivalence formula-decl nil Equivalence nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Int adt-constructor-decl "[int -> (Int?)]" NumExpr_adt nil)
    (Int? adt-recognizer-decl "[NumExpr -> boolean]" NumExpr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (This const-decl "Name" Program nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]"
     RefExpr_adt nil)
    (RefVarEval? adt-recognizer-decl "[RefExpr -> boolean]" RefExpr_adt
     nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_MP const-decl "boolean" WellFormedMonitoredProgram nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (run_FullProgram const-decl "boolean" Semantics nil)
    (run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil))
   nil nil nil nil)
  (correcteness_of_ann_program-1 nil 3386483536 3386497564
   ("" (skosimp*)
    ((""
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram")
      (("" (use "initial_states_are_equivalent")
        (("" (assert)
          (("" (lemma "deriv_stmt_equivalence")
            ((""
              (inst -1 "mp!1" "ann_program(mp!1)"
               "StmtExpr(MethodCall(RExpr(RefVarEval(This)), name(main!1), NExpr(Int(arg!1))))"
               "initial_MP_state(mp!1)" "sMP!1"
               "initial_AP_state(ann_program(mp!1))" "n!1")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil)
    (run_FullProgram const-decl "boolean" Semantics nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (wf_MP const-decl "boolean" WellFormedMonitoredProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (RefVarEval? adt-recognizer-decl "[RefExpr -> boolean]" RefExpr_adt
     nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]"
     RefExpr_adt nil)
    (This const-decl "Name" Program nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[NumExpr -> boolean]" NumExpr_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" NumExpr_adt nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (initial_states_are_equivalent formula-decl nil Equivalence nil))
   218957 520 t shostak)))

