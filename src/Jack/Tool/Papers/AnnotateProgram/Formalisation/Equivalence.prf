(Equivalence
 (IMP_AnnotateProgram_TCC1 0
  (IMP_AnnotateProgram_TCC1-1 nil 3390219476 3390219526
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil Equivalence nil)) 11730 60 t
   nil))
 (related_states_TCC1 0
  (related_states_TCC1-1 nil 3393587927 3393588010
   ("" (subtype-tcc) nil nil) proved
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (invariants_are_booleans const-decl "boolean" WellTypedProgram nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil)
    (disjoint_model_vars const-decl "boolean" AnnotateProgram nil)
    (not_clashing_model_vars const-decl "boolean" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (Stmt type-decl nil Stmt_adt nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (Expr type-decl nil Expr_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (well_behaved_Program const-decl "boolean" Semantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Class type-eq-decl nil Program nil)
    (FieldDecl type-eq-decl nil Program nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   23542 14590 nil nil))
 (MP_modeled_implies_same_exception 0
  (MP_modeled_implies_same_exception-1 nil 3386411363 3387017059
   ("" (skosimp)
    (("" (expand "MP_modeled?")
      (("" (expand "Program_modeled?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unfinished
   ((Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil))
   68 40 t shostak))
 (MP_modeled_implies_cp_not_halted 0
  (MP_modeled_implies_cp_not_halted-1 nil 3387023160 3387109213
   ("" (skosimp)
    (("" (expand* "MP_modeled?" "MVA_modeled?")
      (("" (flatten) (("" (assert) nil nil)) nil)) nil))
    nil)
   unfinished
   ((MVA_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil))
   104837 160 t shostak))
 (MP_modeled_preserved_by_update 0
  (MP_modeled_preserved_by_update-2 nil 3386678151 3390810685
   ("" (skosimp*)
    (("" (expand "related_states")
      (("" (use "MP_modeled_implies_cp_not_halted")
        (("" (prop)
          ((""
            (expand* "MP_modeled?" "update_state_MP" "update_PState")
            (("" (prop)
              (("1" (expand "MVA_modeled?") (("1" (propax) nil nil))
                nil)
               ("2" (expand "Program_modeled?")
                (("2" (flatten) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((related_states const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (MP_modeled_implies_cp_not_halted formula-decl nil Equivalence
     nil))
   297546 420 t nil)
  (MP_modeled_preserved_by_update-1 nil 3386476534 3386667099
   ("" (skosimp*)
    (("" (expand* "MP_modeled?" "update_state_MP" "update_state_AP")
      (("" (prop)
        (("1"
          (expand* "MVA_modeled?" "update" "update_local"
           "update_field")
          nil nil)
         ("2"
          (expand* "Program_modeled?" "update" "update_local"
           "update_field")
          (("2" (use "ann_program_preserves_state_vars")
            (("2" (assert)
              (("2" (lemma "wf_state_vars_local_or_field")
                (("2"
                  (inst -1 "ann_program(mp!1)" "pstate(sAP!1)" "vn!1")
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (lift-if)
                        (("1" (lift-if) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "wf_state" -4)
                      (("2" (flatten -4) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((update_field const-decl "PState" State nil)
    (update_local const-decl "PState" State nil)
    (update const-decl "PState" State nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (ann_program_preserves_state_vars formula-decl nil
     AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_state_vars_local_or_field formula-decl nil State nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Program_modeled? const-decl "boolean" Equivalence nil))
   1381 530 t shostak))
 (MP_modeled_implies_same_num_eval 0
  (MP_modeled_implies_same_num_eval-1 nil 3386678588 3393594815
   ("" (skolem!)
    (("" (skolem!)
      (("" (induct "n")
        (("1" (skosimp)
          (("1" (expand "eval") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skosimp)
          (("2" (assert)
            (("2" (expand "eval" 1) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (assert)
            (("3" (expand "eval" 1) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (skosimp*)
          (("4" (expand "eval" 1) (("4" (assert) nil nil)) nil)) nil)
         ("5" (skosimp*)
          (("5" (expand "eval" 1)
            (("5" (lift-if)
              (("5" (lift-if) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("6" (skosimp*)
          (("6" (expand "eval")
            (("6" (expand "lookup")
              (("6" (use "ann_program_preserves_state_vars")
                (("6" (lemma "wf_state_vars_local_or_field")
                  (("6"
                    (inst -1 "program(mp!1)" "pstate(sMP!1)"
                     "NumVarEval1_var!1")
                    (("6"
                      (expand* "related_states"
                       "specification_requirements" "wf_MP")
                      (("6" (flatten)
                        (("6" (assert)
                          (("6" (expand "wf_state" (-9 -10))
                            (("6" (flatten)
                              (("6"
                                (assert)
                                (("6"
                                  (hide
                                   -8
                                   -9
                                   -10
                                   -11
                                   -12
                                   -13
                                   -14
                                   -15
                                   -16
                                   -17
                                   -18)
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_state_vars_local_or_field formula-decl nil State nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (lookup_local const-decl "Val" State nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (val2int const-decl "int" State nil)
    (lookup_field const-decl "Val" State nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (ann_program_preserves_state_vars formula-decl nil
     AnnotateProgramProperties nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NumExpr_induction formula-decl nil NumExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (eval def-decl "int" Evaluation nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (related_states const-decl "boolean" Equivalence nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NumExpr type-decl nil NumExpr_adt nil))
   264565 62680 t shostak))
 (MP_modeled_implies_same_bool_eval 0
  (MP_modeled_implies_same_bool_eval-1 nil 3387017252 3393595216
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand "related_states")
        (("" (induct "b")
          (("1" (expand "eval") (("1" (propax) nil nil)) nil)
           ("2" (expand "eval") (("2" (propax) nil nil)) nil)
           ("3" (skosimp)
            (("3" (expand "eval" 1) (("3" (assert) nil nil)) nil)) nil)
           ("4" (skosimp)
            (("4" (expand "eval" 1)
              (("4" (assert)
                (("4" (replace -1)
                  (("4" (replace -2) (("4" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skosimp)
            (("5" (assert)
              (("5" (expand "eval" 1)
                (("5" (replace -1)
                  (("5" (replace -2) (("5" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (skosimp)
            (("6" (use "MP_modeled_implies_same_num_eval")
              (("6" (lemma "MP_modeled_implies_same_num_eval")
                (("6"
                  (inst -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Lt2_var!1")
                  (("6" (expand "related_states")
                    (("6" (assert)
                      (("6" (expand "eval" 1)
                        (("6" (replace -1)
                          (("6" (replace -2) (("6" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (skosimp)
            (("7" (use "MP_modeled_implies_same_num_eval")
              (("7" (lemma "MP_modeled_implies_same_num_eval")
                (("7"
                  (inst -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Le2_var!1")
                  (("7" (expand "related_states")
                    (("7" (assert)
                      (("7" (expand "eval" 1)
                        (("7" (replace -1)
                          (("7" (replace -2) (("7" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (skosimp)
            (("8" (use "MP_modeled_implies_same_num_eval")
              (("8" (lemma "MP_modeled_implies_same_num_eval")
                (("8"
                  (inst -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Eq2_var!1")
                  (("8" (expand "related_states")
                    (("8" (assert)
                      (("8" (expand "eval" 1)
                        (("8" (replace -1)
                          (("8" (replace -2) (("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (skosimp)
            (("9" (use "MP_modeled_implies_same_num_eval")
              (("9" (lemma "MP_modeled_implies_same_num_eval")
                (("9"
                  (inst -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Neq2_var!1")
                  (("9" (expand "related_states")
                    (("9" (assert)
                      (("9" (expand "eval" 1)
                        (("9" (replace -1)
                          (("9" (replace -2) (("9" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("10" (skosimp)
            (("10" (use "MP_modeled_implies_same_num_eval")
              (("10" (lemma "MP_modeled_implies_same_num_eval")
                (("10"
                  (inst -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Ge2_var!1")
                  (("10" (expand "related_states")
                    (("10" (assert)
                      (("10" (expand "eval" 1)
                        (("10" (replace -1)
                          (("10" (replace -2) (("10" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("11" (skosimp)
            (("11" (use "MP_modeled_implies_same_num_eval")
              (("11" (lemma "MP_modeled_implies_same_num_eval")
                (("11"
                  (inst -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Gt2_var!1")
                  (("11" (expand "related_states")
                    (("11" (assert)
                      (("11" (expand "eval" 1)
                        (("11" (replace -1)
                          (("11" (replace -2) (("11" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("12" (skosimp)
            (("12" (expand* "eval" "val2bool" "lookup")
              (("12" (use "ann_program_preserves_state_vars")
                (("12" (lemma "wf_state_vars_local_or_field")
                  (("12"
                    (inst -1 "program(mp!1)" "pstate(sMP!1)"
                     "BoolVarEval1_var!1")
                    (("12"
                      (expand* "related_states"
                       "specification_requirements" "wf_MP")
                      (("12" (flatten)
                        (("12" (assert)
                          (("12" (expand "wf_state" (-9 -10))
                            (("12" (flatten)
                              (("12"
                                (assert)
                                (("12"
                                  (hide
                                   -8
                                   -9
                                   -10
                                   -11
                                   -12
                                   -13
                                   -14
                                   -15
                                   -16
                                   -17
                                   -18)
                                  (("12" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("13" (expand "specification_requirements")
            (("13" (flatten) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((related_states const-decl "boolean" Equivalence nil)
    (ann_program_preserves_state_vars formula-decl nil
     AnnotateProgramProperties nil)
    (is_field const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (lookup_field const-decl "Val" State nil)
    (lookup_local const-decl "Val" State nil)
    (cp const-decl "string" AnnotateProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (wf_state_vars_local_or_field formula-decl nil State nil)
    (val2bool const-decl "bool" State nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (MP_modeled_implies_same_num_eval formula-decl nil Equivalence nil)
    (BoolExpr_induction formula-decl nil BoolExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (eval def-decl "bool" Evaluation nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-decl nil BoolExpr_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, string]" Equivalence
     nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil))
   333802 53830 t shostak))
 (MP_modeled_preserved_by_assertion_checking_TCC1 0
  (MP_modeled_preserved_by_assertion_checking_TCC1-1 nil 3387792304
   3390912279
   ("" (skosimp) (("" (typepred "n1!1") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   45823 6330 t nil))
 (MP_modeled_preserved_by_assertion_checking_TCC2 0
  (MP_modeled_preserved_by_assertion_checking_TCC2-1 nil 3387792304
   3390912320
   ("" (skosimp) (("" (typepred "n2!1") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   32136 90 t nil))
 (MP_modeled_preserved_by_assertion_checking 0
  (MP_modeled_preserved_by_assertion_checking-1 nil 3387792310
   3387793899
   ("" (skosimp*)
    (("" (expand* "related_states" "check_assertion")
      (("" (flatten)
        (("" (skosimp*)
          (("" (inst -6 "v!1" "v!2" "tau1!1" "tau1!2")
            (("" (assert)
              (("" (flatten)
                (("" (lift-if)
                  (("" (ground)
                    (("" (use "MP_modeled_preserved_by_update2")
                      (("" (expand "related_states")
                        ((""
                          (lemma "MP_modeled_implies_same_exception")
                          (("" (inst -1 "tau1!1" "tau1!2")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Val type-decl nil Val_adt nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (MP_modeled_implies_same_exception formula-decl nil Equivalence
     nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil) (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (up adt-constructor-decl "[T -> (up?)]" lift_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (related_states const-decl "boolean" Equivalence nil))
   177704 1900 t nil))
 (on_method_entry_for_ann_method_equivalence_TCC1 0
  (on_method_entry_for_ann_method_equivalence_TCC1-1 nil 3390219476
   3390912168
   ("" (skosimp)
    (("" (expand "related_states")
      (("" (expand "specification_requirements") (("" (prop) nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((related_states const-decl "boolean" Equivalence nil)
    (specification_requirements const-decl "boolean" Equivalence nil))
   67857 6710 t nil))
 (on_method_entry_for_ann_method_equivalence 0
  (on_method_entry_for_ann_method_equivalence-1 nil 3387599066
   3387794977
   ("" (skosimp*)
    (("" (use "ann_program_preserves_side_effect_freedom")
      (("" (expand "related_states")
        (("" (flatten)
          (("" (assert)
            (("" (expand* "on_method_entry_MP" "on_method_entry_AP")
              (("" (flatten)
                (("" (skosimp*)
                  (("" (case "MP_modeled?(tau1!1, tau1!2)")
                    (("1" (case "MP_modeled?(tau2!1, tau2!2)")
                      (("1" (postpone) nil nil)
                       ("2" (postpone) nil nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 548561 640 t shostak))
 (initial_states_are_equivalent 0
  (initial_states_are_equivalent-1 nil 3383291365 3387620013
   ("" (skosimp)
    (("" (expand "MP_modeled?")
      (("" (split)
        (("1" (expand "MVA_modeled?")
          (("1" (split)
            (("1"
              (expand* "cp2val" "initial_MP_state" "initial_AP_state"
               "initial_MVA_state")
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (postpone) nil nil) ("2" (postpone) nil nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   unfinished nil 1273125 450 t shostak))
 (deriv_expr_maintains_equivalence 0
  (deriv_expr_maintains_equivalence-2 nil 3390810250 nil
   (";;; Proof deriv_expr_maintains_equivalence-1 for formula Equivalence.deriv_expr_maintains_equivalence"
    (skosimp)
    ((";;; Proof deriv_expr_maintains_equivalence-1 for formula Equivalence.deriv_expr_maintains_equivalence"
      (induct e)
      (("1" (skosimp*)
        (("1" (expand "related_states")
          (("1" (flatten)
            (("1" (expand "deriv_expr" (-7 -8))
              (("1" (expand "deriv_expr" (-7 -8))
                (("1" (use "MP_modeled_implies_same_exception")
                  (("1" (assert)
                    (("1" (case "up?(ex(pstate(sMP1!1)))")
                      (("1" (ground) nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2"
                              (inst -2 "v1!1" "v2!1" "sMP1!1" "tau!1"
                               "sAP1!1" "tau!2" "n1!1 - 1" "n2!1 - 1")
                              (("1"
                                (expand "deriv_expr" -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lemma
                                       "MP_modeled_implies_same_exception")
                                      (("1"
                                        (inst -1 "tau!1" "tau!2")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "up?(ex(pstate(tau!1)))")
                                              (("1" (assert) nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "MP_modeled_preserved_by_update")
                                                  (("2"
                                                    (expand
                                                     "related_states")
                                                    (("2"
                                                      (lemma
                                                       "related_states_implies_wf_mp_and_ap")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "mp!1"
                                                         "ap!1"
                                                         "sMP1!1"
                                                         "sAP1!1")
                                                        (("2"
                                                          (expand
                                                           "related_states")
                                                          (("2"
                                                            (lemma
                                                             "deriv_expr_yields_wf_state_MP")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "mp!1"
                                                               "Assign2_var!1"
                                                               "v1!1"
                                                               "sMP1!1"
                                                               "tau!1"
                                                               "n1!1 -1")
                                                              (("2"
                                                                (lemma
                                                                 "deriv_expr_yields_wf_state_AP")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "ap!1"
                                                                   "Assign2_var!1"
                                                                   "v2!1"
                                                                   "sAP1!1"
                                                                   "tau!2"
                                                                   "n2!1 -1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replace
                                                                       -10)
                                                                      (("2"
                                                                        (expand
                                                                         "deriv_expr"
                                                                         (-1
                                                                          -2))
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))))
                               ("2" (assert) nil)
                               ("3"
                                (assert)
                                nil)))))))))))))))))))))))))
       ("2" (skosimp*)
        (("2" (expand* "related_states" "deriv_expr")
          (("2" (expand "deriv_expr")
            (("2" (flatten)
              (("2" (use "MP_modeled_implies_same_exception")
                (("2" (assert)
                  (("2" (case "up?(ex(pstate(sMP1!1)))")
                    (("1" (ground) nil)
                     ("2" (assert)
                      (("2" (prop)
                        (("1" (use "MP_modeled_implies_same_bool_eval")
                          (("1" (assert)
                            (("1" (expand "related_states")
                              (("1" (propax) nil)))))))
                         ("2" (assert) nil)))))))))))))))))))
       ("3" (skosimp*)
        (("3" (expand "related_states")
          (("3" (flatten)
            (("3" (expand "deriv_expr" (-9 -10))
              (("3" (expand "deriv_expr" (-9 -10))
                (("3" (use "MP_modeled_implies_same_exception")
                  (("3" (assert)
                    (("3" (case "up?(ex(pstate(sMP1!1)))")
                      (("1" (ground) nil)
                       ("2" (assert)
                        (("2" (skosimp*)
                          (("2"
                            (inst -2 "v1!2" "v1!3" "sMP1!1" "tau!1"
                             "sAP1!1" "tau!2" "m1!1" "m1!2")
                            (("2" (expand "deriv_expr" -2)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "deriv_expr_yields_wf_state_MP")
                                    (("2"
                                      (inst
                                       -1
                                       "mp!1"
                                       "CondExpr1_var!1"
                                       "v1!2"
                                       "sMP1!1"
                                       "tau!1"
                                       "m1!1")
                                      (("2"
                                        (lemma
                                         "deriv_expr_yields_wf_state_AP")
                                        (("2"
                                          (inst
                                           -1
                                           "ap!1"
                                           "CondExpr1_var!1"
                                           "v1!3"
                                           "sAP1!1"
                                           "tau!2"
                                           "m1!2")
                                          (("2"
                                            (expand
                                             "deriv_expr"
                                             (-1 -2))
                                            (("2"
                                              (use
                                               "ann_program_yields_wf_program")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "ann_program_pre")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide
                                                         -4
                                                         -10
                                                         -12
                                                         -13
                                                         -14
                                                         -15
                                                         -16
                                                         -19
                                                         1)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -8
                                                                   "v1!1"
                                                                   "v2!1"
                                                                   "tau!1"
                                                                   "sMP2!1"
                                                                   "tau!2"
                                                                   "sAP2!1"
                                                                   "m2!1"
                                                                   "m2!2")
                                                                  (("1"
                                                                    (expand
                                                                     "deriv_expr"
                                                                     -8)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))))))))
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "v1!1"
                                                                   "v2!1"
                                                                   "tau!1"
                                                                   "sMP2!1"
                                                                   "tau!2"
                                                                   "sAP2!1"
                                                                   "m2!1"
                                                                   "m2!2")
                                                                  (("2"
                                                                    (expand
                                                                     "deriv_expr"
                                                                     -8)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("4" (skosimp*)
        (("4" (expand "related_states")
          (("4" (flatten)
            (("4" (expand "deriv_expr" (-8 -9))
              (("4" (expand "deriv_expr" (-8 -9))
                (("4" (use "MP_modeled_implies_same_exception")
                  (("4" (assert)
                    (("4" (case "up?(ex(pstate(sMP1!1)))")
                      (("1" (ground) nil)
                       ("2" (assert)
                        (("2" (skosimp*)
                          (("2"
                            (inst -2 "a!1" "a!2" "sMP1!1" "tau1!1"
                             "sAP1!1" "tau1!2" "m1!1" "m1!2")
                            (("2" (expand "deriv_expr" -2)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst
                                     -4
                                     "pv!1"
                                     "pv!2"
                                     "tau1!1"
                                     "tau2!1"
                                     "tau1!2"
                                     "tau2!2"
                                     "m2!1"
                                     "m2!2")
                                    (("2"
                                      (expand "deriv_expr" -4)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "deriv_expr_yields_wf_state_MP")
                                          (("2"
                                            (inst
                                             -1
                                             "mp!1"
                                             "MethodCall1_var!1"
                                             "a!1"
                                             "sMP1!1"
                                             "tau1!1"
                                             "m1!1")
                                            (("2"
                                              (lemma
                                               "deriv_expr_yields_wf_state_AP")
                                              (("2"
                                                (inst
                                                 -1
                                                 "ap!1"
                                                 "MethodCall1_var!1"
                                                 "a!2"
                                                 "sAP1!1"
                                                 "tau1!2"
                                                 "m1!2")
                                                (("2"
                                                  (lemma
                                                   "related_states_implies_wf_mp_and_ap")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "mp!1"
                                                     "ap!1"
                                                     "sMP1!1"
                                                     "sAP1!1")
                                                    (("2"
                                                      (expand
                                                       "related_states")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "deriv_expr"
                                                           (-3 -4))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -5
                                                                 -12
                                                                 -13
                                                                 -14
                                                                 -15
                                                                 -16
                                                                 -27
                                                                 -28)
                                                                (("2"
                                                                  (lemma
                                                                   "deriv_expr_yields_wf_state_MP")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "mp!1"
                                                                     "MethodCall3_var!1"
                                                                     "pv!1"
                                                                     "tau1!1"
                                                                     "tau2!1"
                                                                     "m2!1")
                                                                    (("2"
                                                                      (lemma
                                                                       "deriv_expr_yields_wf_state_AP")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "ap!1"
                                                                         "MethodCall3_var!1"
                                                                         "pv!2"
                                                                         "tau1!2"
                                                                         "tau2!2"
                                                                         "m2!2")
                                                                        (("2"
                                                                          (expand
                                                                           "deriv_expr"
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (hide
                                                                             -5
                                                                             -6
                                                                             -8
                                                                             -13
                                                                             -23
                                                                             1)
                                                                            (("2"
                                                                              (case
                                                                               "MP_modeled?(tau3!1, tau3!2)")
                                                                              (("1"
                                                                                (case
                                                                                 "wf_state(mp!1)(tau3!1) AND wf_state(ap!1)(tau3!2)")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -4
                                                                                     -5
                                                                                     -10
                                                                                     -13
                                                                                     -22)
                                                                                    (("1"
                                                                                      (case
                                                                                       "IF name(down(get_class(program(mp!1))(a!1, pstate(tau3!1)))) = class_name(mva(mp!1)) THEN md!2 = ann_method(mp!1)(md!1) ELSE md!2 = md!1 ENDIF")
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -12
                                                                                             -20)
                                                                                            (("1"
                                                                                              (case
                                                                                               "MP_modeled?(tau4!1, tau4!2)")
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "on_method_entry_for_ann_method_equivalence")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "mp!1"
                                                                                                   "ap!1"
                                                                                                   "tau3!1"
                                                                                                   "tau4!1"
                                                                                                   "tau3!2"
                                                                                                   "tau4!2"
                                                                                                   "md!1"
                                                                                                   "md!2"
                                                                                                   "a!1"
                                                                                                   "m3!1"
                                                                                                   "m3!2"
                                                                                                   "LAMBDA (p_1: MonitoredProgram[CP, string])
                                                                (s: Stmt[string],
                                                                 sigma1_1, sigma2_1: MPState[CP, string])
                                                                (m_1: below(1 + m3!1)):
                                                           deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (p: MonitoredProgram[CP, string])
                                                                (c: Expr[string],
                                                                 sigma1: MPState[CP, string], v: Val,
                                                                 sigma2: MPState[CP, string])
                                                                (m: below(1 + m3!1)):
                                                           deriv_expr(p)
                                                                     (c, sigma1, v, sigma2)
                                                                     (m)
                                                                     (LAMBDA
                                                                      (p_1: MonitoredProgram[CP, string])
                                                                      (s: Stmt[string],
                                                                       sigma1_1,
                                                                       sigma2_1: MPState[CP, string])
                                                                      (m_1: below(m)):
                                                                      deriv_stmt
                                                                      (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                   "LAMBDA (p_1: Program[string])
                                                                (s: Stmt[string],
                                                                 sigma1_1, sigma2_1: APState[string])
                                                                (m_1: below(1 + m3!2)):
                                                           deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (p: Program[string])
                                                                (c: Expr[string], sigma1: APState[string],
                                                                 v: Val, sigma2: APState[string])
                                                                (m: below(1 + m3!2)):
                                                           deriv_expr(p)
                                                                     (c, sigma1, v, sigma2)
                                                                     (m)
                                                                     (LAMBDA
                                                                      (p_1: Program[string])
                                                                      (s: Stmt[string],
                                                                       sigma1_1, sigma2_1: APState[string])
                                                                      (m_1: below(m)):
                                                                      deriv_stmt
                                                                      (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "related_states"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil)))))))))))))
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (postpone)
                                                                                            nil)))))
                                                                                       ("2"
                                                                                        (use
                                                                                         "lookup_mthd_ann_program")
                                                                                        (("2"
                                                                                          (split
                                                                                           -11)
                                                                                          (("1"
                                                                                            (split
                                                                                             -19)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "id")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))))
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil)))))
                                                                                       ("3"
                                                                                        (use
                                                                                         "get_class_definedness")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "wf_state"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    -3
                                                                                    -4
                                                                                    -5
                                                                                    -11
                                                                                    -20
                                                                                    1))
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_update_state_MP")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -4
                                                                                           -5
                                                                                           -7)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (split
                                                                                               -4)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil)))))))))))
                                                                                     ("2"
                                                                                      (hide
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -5)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (use
                                                                                               "wf_update_state_AP")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skolem!)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))))))))
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (hide
                                                                                 -6
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 -15
                                                                                 -16
                                                                                 -17
                                                                                 -18
                                                                                 -20
                                                                                 -21
                                                                                 -22
                                                                                 -23
                                                                                 -24
                                                                                 -25
                                                                                 -26
                                                                                 -27
                                                                                 2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "MP_modeled_implies_same_exception")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "tau2!1"
                                                                                     "tau2!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "bottom?(ex(pstate(tau2!1))) AND Null?(a!1)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (use
                                                                                               "MP_modeled_preserved_by_update")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "related_states")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil)))))))))
                                                                                         ("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("5" (skosimp*)
        (("5" (expand* "related_states" "deriv_expr")
          (("5" (expand "deriv_expr")
            (("5" (flatten)
              (("5" (use "MP_modeled_implies_same_exception")
                (("5" (assert)
                  (("5" (case "up?(ex(pstate(sMP1!1)))")
                    (("1" (ground) nil)
                     ("2" (assert)
                      (("2" (prop)
                        (("1" (use "MP_modeled_implies_same_num_eval")
                          (("1" (assert)
                            (("1" (expand "related_states")
                              (("1" (propax) nil)))))))
                         ("2" (assert) nil)))))))))))))))))))
       ("6" (skosimp*)
        (("6" (expand* "related_states" "deriv_expr")
          (("6" (expand "deriv_expr")
            (("6" (flatten)
              (("6" (use "MP_modeled_implies_same_exception")
                (("6" (assert)
                  (("6" (case "up?(ex(pstate(sMP1!1)))")
                    (("1" (ground) nil)
                     ("2" (assert)
                      (("2" (prop)
                        (("1" (case "RExpr1_var!1 = Null")
                          (("1" (assert) nil) ("2" (assert) nil)))
                         ("2" (assert) nil))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil nil nil nil nil)
  (deriv_expr_maintains_equivalence-1 nil 3386497242 3387618724
   ("" (skosimp)
    (("" (induct e)
      (("1" (skosimp*)
        (("1" (expand "related_states")
          (("1" (flatten)
            (("1" (expand "deriv_expr" (-7 -8))
              (("1" (expand "deriv_expr" (-7 -8))
                (("1" (use "MP_modeled_implies_same_exception")
                  (("1" (assert)
                    (("1" (case "up?(ex(pstate(sMP1!1)))")
                      (("1" (ground) nil nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2"
                              (inst -2 "v1!1" "v2!1" "sMP1!1" "tau!1"
                               "sAP1!1" "tau!2" "n1!1 - 1" "n2!1 - 1")
                              (("1"
                                (expand "deriv_expr" -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lemma
                                       "MP_modeled_implies_same_exception")
                                      (("1"
                                        (inst -1 "tau!1" "tau!2")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "up?(ex(pstate(tau!1)))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "MP_modeled_preserved_by_update2")
                                                  (("2"
                                                    (expand
                                                     "related_states")
                                                    (("2"
                                                      (lemma
                                                       "related_states_implies_wf_mp_and_ap")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "mp!1"
                                                         "ap!1"
                                                         "sMP1!1"
                                                         "sAP1!1")
                                                        (("2"
                                                          (expand
                                                           "related_states")
                                                          (("2"
                                                            (lemma
                                                             "deriv_expr_yields_wf_state_MP")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "mp!1"
                                                               "Assign2_var!1"
                                                               "v1!1"
                                                               "sMP1!1"
                                                               "tau!1"
                                                               "n1!1 -1")
                                                              (("2"
                                                                (lemma
                                                                 "deriv_expr_yields_wf_state_AP")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "ap!1"
                                                                   "Assign2_var!1"
                                                                   "v2!1"
                                                                   "sAP1!1"
                                                                   "tau!2"
                                                                   "n2!1 -1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replace
                                                                       -10)
                                                                      (("2"
                                                                        (expand
                                                                         "deriv_expr"
                                                                         (-1
                                                                          -2))
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand* "related_states" "deriv_expr")
          (("2" (expand "deriv_expr")
            (("2" (flatten)
              (("2" (use "MP_modeled_implies_same_exception")
                (("2" (assert)
                  (("2" (case "up?(ex(pstate(sMP1!1)))")
                    (("1" (ground) nil nil)
                     ("2" (assert)
                      (("2" (prop)
                        (("1" (use "MP_modeled_implies_same_bool_eval")
                          (("1" (assert)
                            (("1" (expand "related_states")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skosimp*)
        (("3" (expand "related_states")
          (("3" (flatten)
            (("3" (expand "deriv_expr" (-9 -10))
              (("3" (expand "deriv_expr" (-9 -10))
                (("3" (use "MP_modeled_implies_same_exception")
                  (("3" (assert)
                    (("3" (case "up?(ex(pstate(sMP1!1)))")
                      (("1" (ground) nil nil)
                       ("2" (assert)
                        (("2" (skosimp*)
                          (("2"
                            (inst -2 "v1!2" "v1!3" "sMP1!1" "tau!1"
                             "sAP1!1" "tau!2" "m1!1" "m1!2")
                            (("2" (expand "deriv_expr" -2)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "deriv_expr_yields_wf_state_MP")
                                    (("2"
                                      (inst
                                       -1
                                       "mp!1"
                                       "CondExpr1_var!1"
                                       "v1!2"
                                       "sMP1!1"
                                       "tau!1"
                                       "m1!1")
                                      (("2"
                                        (lemma
                                         "deriv_expr_yields_wf_state_AP")
                                        (("2"
                                          (inst
                                           -1
                                           "ap!1"
                                           "CondExpr1_var!1"
                                           "v1!3"
                                           "sAP1!1"
                                           "tau!2"
                                           "m1!2")
                                          (("2"
                                            (expand
                                             "deriv_expr"
                                             (-1 -2))
                                            (("2"
                                              (use
                                               "ann_program_yields_wf_program")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "ann_program_pre")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide
                                                         -4
                                                         -10
                                                         -12
                                                         -13
                                                         -14
                                                         -15
                                                         -16
                                                         -19
                                                         1)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -8
                                                                   "v1!1"
                                                                   "v2!1"
                                                                   "tau!1"
                                                                   "sMP2!1"
                                                                   "tau!2"
                                                                   "sAP2!1"
                                                                   "m2!1"
                                                                   "m2!2")
                                                                  (("1"
                                                                    (expand
                                                                     "deriv_expr"
                                                                     -8)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "v1!1"
                                                                   "v2!1"
                                                                   "tau!1"
                                                                   "sMP2!1"
                                                                   "tau!2"
                                                                   "sAP2!1"
                                                                   "m2!1"
                                                                   "m2!2")
                                                                  (("2"
                                                                    (expand
                                                                     "deriv_expr"
                                                                     -8)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skosimp*)
        (("4" (expand "related_states")
          (("4" (flatten)
            (("4" (expand "deriv_expr" (-8 -9))
              (("4" (expand "deriv_expr" (-8 -9))
                (("4" (use "MP_modeled_implies_same_exception")
                  (("4" (assert)
                    (("4" (case "up?(ex(pstate(sMP1!1)))")
                      (("1" (ground) nil nil)
                       ("2" (assert)
                        (("2" (skosimp*)
                          (("2"
                            (inst -2 "a!1" "a!2" "sMP1!1" "tau1!1"
                             "sAP1!1" "tau1!2" "m1!1" "m1!2")
                            (("2" (expand "deriv_expr" -2)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst
                                     -4
                                     "pv!1"
                                     "pv!2"
                                     "tau1!1"
                                     "tau2!1"
                                     "tau1!2"
                                     "tau2!2"
                                     "m2!1"
                                     "m2!2")
                                    (("2"
                                      (expand "deriv_expr" -4)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "deriv_expr_yields_wf_state_MP")
                                          (("2"
                                            (inst
                                             -1
                                             "mp!1"
                                             "MethodCall1_var!1"
                                             "a!1"
                                             "sMP1!1"
                                             "tau1!1"
                                             "m1!1")
                                            (("2"
                                              (lemma
                                               "deriv_expr_yields_wf_state_AP")
                                              (("2"
                                                (inst
                                                 -1
                                                 "ap!1"
                                                 "MethodCall1_var!1"
                                                 "a!2"
                                                 "sAP1!1"
                                                 "tau1!2"
                                                 "m1!2")
                                                (("2"
                                                  (lemma
                                                   "related_states_implies_wf_mp_and_ap")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "mp!1"
                                                     "ap!1"
                                                     "sMP1!1"
                                                     "sAP1!1")
                                                    (("2"
                                                      (expand
                                                       "related_states")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "deriv_expr"
                                                           (-3 -4))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -5
                                                                 -12
                                                                 -13
                                                                 -14
                                                                 -15
                                                                 -16
                                                                 -27
                                                                 -28)
                                                                (("2"
                                                                  (lemma
                                                                   "deriv_expr_yields_wf_state_MP")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "mp!1"
                                                                     "MethodCall3_var!1"
                                                                     "pv!1"
                                                                     "tau1!1"
                                                                     "tau2!1"
                                                                     "m2!1")
                                                                    (("2"
                                                                      (lemma
                                                                       "deriv_expr_yields_wf_state_AP")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "ap!1"
                                                                         "MethodCall3_var!1"
                                                                         "pv!2"
                                                                         "tau1!2"
                                                                         "tau2!2"
                                                                         "m2!2")
                                                                        (("2"
                                                                          (expand
                                                                           "deriv_expr"
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (hide
                                                                             -5
                                                                             -6
                                                                             -8
                                                                             -13
                                                                             -23
                                                                             1)
                                                                            (("2"
                                                                              (case
                                                                               "MP_modeled?(tau3!1, tau3!2)")
                                                                              (("1"
                                                                                (case
                                                                                 "wf_state(mp!1)(tau3!1) AND wf_state(ap!1)(tau3!2)")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -4
                                                                                     -5
                                                                                     -10
                                                                                     -13
                                                                                     -22)
                                                                                    (("1"
                                                                                      (case
                                                                                       "IF name(down(get_class(program(mp!1))(a!1, pstate(tau3!1)))) = class_name(mva(mp!1)) THEN md!2 = ann_method(mp!1)(md!1) ELSE md!2 = md!1 ENDIF")
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -12
                                                                                             -20)
                                                                                            (("1"
                                                                                              (case
                                                                                               "MP_modeled?(tau4!1, tau4!2)")
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "on_method_entry_for_ann_method_equivalence")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "mp!1"
                                                                                                   "ap!1"
                                                                                                   "tau3!1"
                                                                                                   "tau4!1"
                                                                                                   "tau3!2"
                                                                                                   "tau4!2"
                                                                                                   "md!1"
                                                                                                   "md!2"
                                                                                                   "a!1"
                                                                                                   "m3!1"
                                                                                                   "m3!2"
                                                                                                   "LAMBDA (p_1: MonitoredProgram[CP, string])
                                                (s: Stmt[string],
                                                 sigma1_1, sigma2_1: MPState[CP, string])
                                                (m_1: below(1 + m3!1)):
                                           deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (p: MonitoredProgram[CP, string])
                                                (c: Expr[string],
                                                 sigma1: MPState[CP, string], v: Val,
                                                 sigma2: MPState[CP, string])
                                                (m: below(1 + m3!1)):
                                           deriv_expr(p)
                                                     (c, sigma1, v, sigma2)
                                                     (m)
                                                     (LAMBDA
                                                      (p_1: MonitoredProgram[CP, string])
                                                      (s: Stmt[string],
                                                       sigma1_1,
                                                       sigma2_1: MPState[CP, string])
                                                      (m_1: below(m)):
                                                      deriv_stmt
                                                      (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                   "LAMBDA (p_1: Program[string])
                                                (s: Stmt[string],
                                                 sigma1_1, sigma2_1: APState[string])
                                                (m_1: below(1 + m3!2)):
                                           deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (p: Program[string])
                                                (c: Expr[string], sigma1: APState[string],
                                                 v: Val, sigma2: APState[string])
                                                (m: below(1 + m3!2)):
                                           deriv_expr(p)
                                                     (c, sigma1, v, sigma2)
                                                     (m)
                                                     (LAMBDA
                                                      (p_1: Program[string])
                                                      (s: Stmt[string],
                                                       sigma1_1, sigma2_1: APState[string])
                                                      (m_1: below(m)):
                                                      deriv_stmt
                                                      (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "related_states"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "lookup_mthd_ann_program")
                                                                                        (("2"
                                                                                          (split
                                                                                           -11)
                                                                                          (("1"
                                                                                            (split
                                                                                             -19)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "id")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (use
                                                                                         "get_class_definedness")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "wf_state"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    -3
                                                                                    -4
                                                                                    -5
                                                                                    -11
                                                                                    -20
                                                                                    1))
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_update_state_MP")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -4
                                                                                           -5
                                                                                           -7)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (split
                                                                                               -4)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -5)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (use
                                                                                               "wf_update_state_AP")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skolem!)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -6
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 -15
                                                                                 -16
                                                                                 -17
                                                                                 -18
                                                                                 -20
                                                                                 -21
                                                                                 -22
                                                                                 -23
                                                                                 -24
                                                                                 -25
                                                                                 -26
                                                                                 -27
                                                                                 2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "MP_modeled_implies_same_exception")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "tau2!1"
                                                                                     "tau2!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "bottom?(ex(pstate(tau2!1))) AND Null?(a!1)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (use
                                                                                               "MP_modeled_preserved_by_update2")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "related_states")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skosimp*)
        (("5" (expand* "related_states" "deriv_expr")
          (("5" (expand "deriv_expr")
            (("5" (flatten)
              (("5" (use "MP_modeled_implies_same_exception")
                (("5" (assert)
                  (("5" (case "up?(ex(pstate(sMP1!1)))")
                    (("1" (ground) nil nil)
                     ("2" (assert)
                      (("2" (prop)
                        (("1" (use "MP_modeled_implies_same_num_eval")
                          (("1" (assert)
                            (("1" (expand "related_states")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skosimp*)
        (("6" (expand* "related_states" "deriv_expr")
          (("6" (expand "deriv_expr")
            (("6" (flatten)
              (("6" (use "MP_modeled_implies_same_exception")
                (("6" (assert)
                  (("6" (case "up?(ex(pstate(sMP1!1)))")
                    (("1" (ground) nil nil)
                     ("2" (assert)
                      (("2" (prop)
                        (("1" (case "RExpr1_var!1 = Null")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried nil 1734686 210 t nil))
 (deriv_stmt_maintains_equivalence 0
  (deriv_stmt_maintains_equivalence-1 nil 3386674579 3386674587
   ("" (postpone) nil nil) unfinished nil 7597 10 t shostak))
 (correcteness_of_ann_program 0
  (correctness_of_ann_program-1 "" 3386566650 3391430632
   ("" (skosimp*)
    ((""
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram" "derives")
      (("" (skosimp*)
        (("" (use "initial_states_are_equivalent")
          (("" (copy -2)
            (("" (expand "specification_requirements" -1)
              (("" (ground)
                (("" (lemma "deriv_stmt_maintains_equivalence")
                  ((""
                    (inst -1 "mp!1" "ann_program(mp!1)" "n!1" "n!2"
                     "StmtExpr(MethodCall(RExpr(RefVarEval(This)), name(main!1), NExpr(Int(arg!1))))"
                     "initial_MP_state(mp!1)(root_object!1)" "sMP!1"
                     "initial_AP_state(ann_program(mp!1))(root_object!1)"
                     "sAP!1")
                    (("" (assert)
                      (("" (expand "related_states")
                        (("" (use "wf_initial_MP_state")
                          (("" (use "wf_initial_AP_state")
                            (("" (use "ann_program_yields_wf_program")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil)
    nil (run_FullProgram const-decl "boolean" Semantics nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (initial_states_are_equivalent formula-decl nil Equivalence nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (deriv_stmt_maintains_equivalence formula-decl nil Equivalence nil)
    (wf_initial_MP_state formula-decl nil MonitoredProgramSemantics
     nil)
    (ann_program_yields_wf_program formula-decl nil
     AnnotateProgramProperties nil)
    (wf_initial_AP_state formula-decl nil AnnotatedProgramSemantics
     nil)
    (related_states const-decl "boolean" Equivalence nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Int adt-constructor-decl "[int -> (Int?)]" NumExpr_adt nil)
    (Int? adt-recognizer-decl "[NumExpr -> boolean]" NumExpr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (This const-decl "Name" Program nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]"
     RefExpr_adt nil)
    (RefVarEval? adt-recognizer-decl "[RefExpr -> boolean]" RefExpr_adt
     nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (specification_requirements const-decl "boolean" Equivalence nil))
   793985 890 t shostak)
  (correcteness_of_ann_program-2 nil 3386566615 nil
   (";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
    (skosimp*)
    ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram")
      ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
        (use "initial_states_are_equivalent")
        ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
          (assert)
          ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
            (lemma "deriv_stmt_maintains_equivalence")
            ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
              (inst -1 "mp!1" "ann_program(mp!1)" "n!1" "m!1"
               "StmtExpr(MethodCall(RExpr(RefVarEval(This)), name(main!1), NExpr(Int(arg!1))))"
               "initial_MP_state(mp!1)" "sMP!1"
               "initial_AP_state(ann_program(mp!1))" "sAP!1")
              ((";;; Proof correcteness_of_ann_program-1 for formula Equivalence.correcteness_of_ann_program"
                (assert) nil))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((initial_states_are_equivalent formula-decl nil Equivalence nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (deriv_stmt_maintains_equivalence formula-decl nil Equivalence nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Int adt-constructor-decl "[int -> (Int?)]" NumExpr_adt nil)
    (Int? adt-recognizer-decl "[NumExpr -> boolean]" NumExpr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (This const-decl "Name" Program nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]"
     RefExpr_adt nil)
    (RefVarEval? adt-recognizer-decl "[RefExpr -> boolean]" RefExpr_adt
     nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (run_FullProgram const-decl "boolean" Semantics nil)
    (run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil))
   nil nil nil nil)
  (correcteness_of_ann_program-1 nil 3386483536 3386497564
   ("" (skosimp*)
    ((""
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram")
      (("" (use "initial_states_are_equivalent")
        (("" (assert)
          (("" (lemma "deriv_stmt_equivalence")
            ((""
              (inst -1 "mp!1" "ann_program(mp!1)"
               "StmtExpr(MethodCall(RExpr(RefVarEval(This)), name(main!1), NExpr(Int(arg!1))))"
               "initial_MP_state(mp!1)" "sMP!1"
               "initial_AP_state(ann_program(mp!1))" "n!1")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil)
    (run_FullProgram const-decl "boolean" Semantics nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil) (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (RefVarEval? adt-recognizer-decl "[RefExpr -> boolean]" RefExpr_adt
     nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]"
     RefExpr_adt nil)
    (This const-decl "Name" Program nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[NumExpr -> boolean]" NumExpr_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" NumExpr_adt nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (CP formal-nonempty-type-decl nil Equivalence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (initial_states_are_equivalent formula-decl nil Equivalence nil))
   218957 520 t shostak)))

