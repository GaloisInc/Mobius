(|set2list|
 (|set2list_TCC1| 0
  (|set2list_TCC1-1| NIL 3387877128 3390299916 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED-COMPLETE
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |set2list| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL))
   28 30 NIL NIL))
 (|set2list_TCC2| 0
  (|set2list_TCC2-1| NIL 3387877128 3390299916
   ("" (SKOSIMP*)
    (("" (REPLACE -2)
      (("" (REWRITE "card_def" :DIR RL)
        (("" (REWRITE "card_remove[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (T FORMAL-TYPE-DECL NIL |set2list| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|card_def| FORMULA-DECL NIL |finite_sets| NIL))
   168 150 T NIL))
 (|set2list_same_elements| 0
  (|set2list_same_elements-1| NIL 3388429899 3390299917
   (""
    (USE
     "wf_induction[finite_set[T], (LAMBDA(x, y : finite_set[T]) : card[T](x) < card[T](y))]")
    (("1"
      (INST -1
       "LAMBDA(s : finite_set[T]) : FORALL(x : T) : member(x, s) IFF member(x, set2list(s))")
      (("1" (SPLIT -1)
        (("1" (GRIND) NIL NIL)
         ("2" (HIDE 2)
          (("2" (SKOSIMP*)
            (("2" (EXPAND "member" 1)
              (("2" (EXPAND "set2list" 1)
                (("2" (LIFT-IF)
                  (("2" (ASSERT)
                    (("2" (SPLIT 1)
                      (("1" (SKOSIMP*) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (SKOSIMP*)
                        (("2" (SPLIT 2)
                          (("1" (SKOSIMP*)
                            (("1" (INST -2 "remove(choose(x!1), x!1)")
                              (("1" (REWRITE "card_remove[T]")
                                (("1" (ASSERT)
                                  (("1" (INST?)
                                    (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (SPLIT -1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (INST -2 "remove(choose(x!1), x!1)")
                                (("2" (REWRITE "card_remove[T]")
                                  (("2" (ASSERT)
                                    (("2" (INST?)
                                      (("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (USE "wf_card") NIL NIL))
    NIL)
   PROVED-COMPLETE
   ((|wf_card| FORMULA-DECL NIL |WF_Card| NIL)
    (|set2list| DEF-DECL "list[T]" |set2list| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |set2list| NIL)
    (|wf_induction| FORMULA-DECL NIL |wf_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   579 520 T SHOSTAK))
 (|set_list_set| 0
  (|set_list_set-1| NIL 3387877130 3390300099
   (""
    (USE
     "wf_induction[finite_set[T], (LAMBDA(x, y : finite_set[T]) : card[T](x) < card[T](y))]")
    (("1" (SPLIT -1)
      (("1" (PROPAX) NIL NIL)
       ("2" (HIDE 2)
        (("2" (SKOSIMP*)
          (("2" (EXPAND "set2list" 1)
            (("2" (EXPAND "list2set" 1)
              (("2" (ASSERT)
                (("2" (LIFT-IF)
                  (("2" (SPLIT 1)
                    (("1" (SKOSIMP*)
                      (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                        (("1" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("2" (SKOSIMP*)
                      (("2" (INST -1 "remove(choose(x!1), x!1)")
                        (("2" (REWRITE "card_remove[T]")
                          (("2" (ASSERT)
                            (("2" (REPLACE -1)
                              (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T)
                                (("2" (EXPAND "add")
                                  (("2" (EXPAND "member")
                                    (("2" (EXPAND "remove")
                                      (("2" (EXPAND "member")
                                        (("2" (IFF)
                                          (("2" (PROP) (("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (USE "wf_card") NIL NIL))
    NIL)
   PROVED-COMPLETE
   ((|wf_card| FORMULA-DECL NIL |WF_Card| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|set2list| DEF-DECL "list[T]" |set2list| NIL)
    (|list2set| DEF-DECL "set[T]" |list2set| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |set2list| NIL)
    (|wf_induction| FORMULA-DECL NIL |wf_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   150817 3620 T SHOSTAK)))
(|listfuncs|
 (|before_TCC1| 0
  (|before_TCC1-1| NIL 3388429891 3390292587 ("" (TERMINATION-TCC) NIL NIL)
   PROVED-COMPLETE ((|length| DEF-DECL "nat" |list_props| NIL)) 195 170 NIL
   NIL))
 (|before_distinct| 0
  (|before_distinct-1| NIL 3392381403 3392381563
   ("" (INDUCT "l")
    (("1" (SKOSIMP) (("1" (EXPAND "before") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "before" -2)
        (("2" (GROUND) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |listfuncs| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|before| DEF-DECL "boolean" |listfuncs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   159587 110 T SHOSTAK))
 (|every_is_forall| 0
  (|every_is_forall-1| NIL 3389528321 3391340512
   ("" (INDUCT "l")
    (("1" (EXPAND* "every" "member") NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND* "every" "member")
        (("2" (INST?)
          (("2" (IFF)
            (("2" (LIFT-IF)
              (("2" (ASSERT)
                (("2" (SPLIT 1)
                  (("1" (FLATTEN)
                    (("1" (SKOSIMP)
                      (("1" (ASSERT)
                        (("1" (SPLIT)
                          (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (FLATTEN)
                            (("2" (EXPAND "every" -4)
                              (("2" (GROUND)
                                (("2" (INST - "x!1")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "member" -4)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (INST-CP -1 "cons1_var!1")
                      (("2" (ASSERT)
                        (("2" (SPLIT)
                          (("1" (EXPAND* "every" "member")
                            (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (FLATTEN)
                            (("2" (EXPAND "every" 2)
                              (("2" (ASSERT)
                                (("2" (SPLIT -2)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (SKOSIMP)
                                    (("2" (INST? -3)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "member" 3)
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |listfuncs| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   1067272 970 T SHOSTAK))
 (|some_is_exists| 0
  (|some_is_exists-1| NIL 3389590159 3391340684
   ("" (INDUCT "l")
    (("1" (EXPAND* "some" "member") NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (INST?)
        (("2" (EXPAND "some" 1)
          (("2" (EXPAND "member" 1)
            (("2" (IFF)
              (("2" (FLATTEN)
                (("2" (SPLIT +)
                  (("1" (FLATTEN)
                    (("1" (SPLIT)
                      (("1" (INST?) NIL NIL)
                       ("2" (ASSERT)
                        (("2" (SKOLEM!)
                          (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (SKOLEM!)
                      (("2" (FLATTEN)
                        (("2" (SPLIT)
                          (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL)
                           ("2" (HIDE -3)
                            (("2" (ASSERT)
                              (("2" (INST?) (("2" (PROP) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |listfuncs| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   97852 180 T SHOSTAK))
 (|list_is_null_or_cons| 0
  (|list_is_null_or_cons-1| NIL 3389598819 3390292588
   ("" (SKOLEM-TYPEPRED)
    (("" (USE "list_inclusive[T]")
      (("" (GROUND)
        (("" (INST 2 "car(xs!1)" "cdr(xs!1)")
          (("" (APPLY-EXTENSIONALITY 2) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|list_inclusive| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |listfuncs| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   65 40 T SHOSTAK)))
(|listsum|
 (|sum_TCC1| 0
  (|sum_TCC1-1| NIL 3397556841 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL
   NIL NIL))
 (|sum_TCC2| 0
  (|sum_TCC2-1| NIL 3397556841 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL
   NIL NIL NIL))
 (|sum_geq_than_elements| 0
  (|sum_geq_than_elements-1| NIL 3397556841 3397556849
   ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) PROVED
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|sum| DEF-DECL "nat" |listsum| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   848 109 T SHOSTAK)))
(|list_map_funcs|
 (|list_map_member| 0
  (|list_map_member-1| NIL 3397382384 3397382391
   ("" (INDUCT-AND-SIMPLIFY "xs") NIL NIL) PROVED-COMPLETE
   ((T1 FORMAL-TYPE-DECL NIL |list_map_funcs| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL) NIL
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (T2 FORMAL-TYPE-DECL NIL |list_map_funcs| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   645 46 T SHOSTAK)))
(|list_of_set_funcs|
 (|list_to_union_TCC1| 0
  (|list_to_union_TCC1-1| NIL 3397382258 NIL ("" (SUBTYPE-TCC) NIL NIL)
   PROVED-COMPLETE NIL NIL NIL NIL NIL))
 (|list_to_union_TCC2| 0
  (|list_to_union_TCC2-1| NIL 3397382258 NIL ("" (TERMINATION-TCC) NIL NIL)
   PROVED-COMPLETE NIL NIL NIL NIL NIL))
 (|list_to_union_subset| 0
  (|list_to_union_subset-1| NIL 3397382261 3397382267
   ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) PROVED-COMPLETE
   ((|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |list_of_set_funcs| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|list_to_union| DEF-DECL "set[T]" |list_of_set_funcs| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   646 179 T SHOSTAK)))
(|FunProp|
 (|nat2string_TCC1| 0
  (|nat2string_TCC1-1| NIL 3390113818 3390292588 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED-COMPLETE
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   65 60 NIL NIL))
 (|nat2string_TCC2| 0
  (|nat2string_TCC2-1| NIL 3390113818 3390292588 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED-COMPLETE NIL 10 10 NIL NIL))
 (|nat2string_injective| 0
  (|nat2string_injective-1| NIL 3390113998 3390292588
   ("" (EXPAND "injective?")
    (("" (INDUCT "x1")
      (("1" (SKOSIMP*)
        (("1" (EXPAND "nat2string")
          (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "nat2string" -2)
          (("2" (LIFT-IF)
            (("2" (ASSERT)
              (("2" (SPLIT -2)
                (("1" (PROPAX) NIL NIL)
                 ("2" (FLATTEN)
                  (("2"
                    (CASE
                        "cdr(cons(char(0), nat2string(j!1))) = cdr(cons(char(0), nat2string(x2!1 - 1)))")
                    (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)
                     ("3" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat2string| DEF-DECL "list[char]" |FunProp| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|char| ADT-CONSTRUCTOR-DECL "[below[256] -> (char?)]" |character_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL))
   414 370 T SHOSTAK))
 (|list2finseq_injective| 0
  (|list2finseq_injective-1| NIL 3390119317 3390292589
   ("" (EXPAND "injective?")
    (("" (EXPAND "list2finseq")
      (("" (INDUCT "x1")
        (("1" (SKOSIMP*)
          (("1" (EXPAND "length")
            (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (EXPAND "length" -2)
            (("2" (LIFT-IF)
              (("2" (ASSERT)
                (("2" (SPLIT -2)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (INST -2 "cdr(x2!1)")
                      (("2" (ASSERT)
                        (("2" (SPLIT -2)
                          (("1"
                            (CASE
                                "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(0)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(0)")
                            (("1" (ASSERT)
                              (("1" (EXPAND "nth" -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -1)
                                    (("1" (REPLACE -2)
                                      (("1" (USE "list_cons_eta[char]") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL)
                             ("3" (ASSERT)
                              (("3" (EXPAND "length") (("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("4" (EXPAND "length") (("4" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                            (("1" (TYPEPRED "x!1")
                              (("1"
                                (CASE
                                    "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(x!1 + 1)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(x!1 + 1)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" -1)
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL))
                                  NIL)
                                 ("3" (EXPAND "length" 1)
                                  (("3" (ASSERT) NIL NIL)) NIL)
                                 ("4" (EXPAND "length" 1)
                                  (("4" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 2)
          (("3" (SKOSIMP*) (("3" (REPLACE -1) (("3" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL))
   1140 1060 T SHOSTAK))
 (|nat2string_injective_function_exists| 0
  (|nat2string_injective_function_exists-1| NIL 3390113893 3390292589
   ("" (INST 1 "list2finseq o nat2string")
    (("" (USE "composition_injective[nat,list[char],string]")
      (("1" (USE "list2finseq_injective") NIL NIL)
       ("2" (USE "nat2string_injective") NIL NIL))
      NIL))
    NIL)
   PROVED-COMPLETE
   ((|composition_injective| JUDGEMENT-TCC NIL |function_props| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|list2finseq_injective| FORMULA-DECL NIL |FunProp| NIL)
    (|nat2string_injective| FORMULA-DECL NIL |FunProp| NIL)
    (|nat2string| DEF-DECL "list[char]" |FunProp| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   33 30 T SHOSTAK)))

