(set2list
 (set2list_TCC1 0
  (set2list_TCC1-1 nil 3387877128 3390299916 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   28 30 nil nil))
 (set2list_TCC2 0
  (set2list_TCC2-1 nil 3387877128 3390299916
   ("" (skosimp*)
    (("" (replace -2)
      (("" (rewrite "card_def" :dir rl)
        (("" (rewrite "card_remove[T]") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((card_remove formula-decl nil finite_sets nil) nil
    (remove const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_def formula-decl nil finite_sets nil))
   168 150 t nil))
 (set2list_same_elements 0
  (set2list_same_elements-1 nil 3388429899 3390299917
   (""
    (use "wf_induction[finite_set[T], (LAMBDA(x, y : finite_set[T]) : card[T](x) < card[T](y))]")
    (("1"
      (inst -1
       "LAMBDA(s : finite_set[T]) : FORALL(x : T) : member(x, s) IFF member(x, set2list(s))")
      (("1" (split -1)
        (("1" (grind) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "member" 1)
              (("2" (expand "set2list" 1)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (split 1)
                      (("1" (skosimp*) (("1" (grind) nil nil)) nil)
                       ("2" (skosimp*)
                        (("2" (split 2)
                          (("1" (skosimp*)
                            (("1" (inst -2 "remove(choose(x!1), x!1)")
                              (("1"
                                (rewrite "card_remove[T]")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (inst -2 "remove(choose(x!1), x!1)")
                                (("2"
                                  (rewrite "card_remove[T]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_card") nil nil))
    nil)
   unfinished
   (nil (set2list def-decl "list[T]" set2list nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (member const-decl "bool" sets nil) nil
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (card_remove formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil) nil
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   579 520 t shostak))
 (set_list_set 0
  (set_list_set-1 nil 3387877130 3390300099
   (""
    (use "wf_induction[finite_set[T], (LAMBDA(x, y : finite_set[T]) : card[T](x) < card[T](y))]")
    (("1" (split -1)
      (("1" (propax) nil nil)
       ("2" (hide 2)
        (("2" (skosimp*)
          (("2" (expand "set2list" 1)
            (("2" (expand "list2set" 1)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (skosimp*)
                      (("1" (apply-extensionality :hide? t)
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst -1 "remove(choose(x!1), x!1)")
                        (("2" (rewrite "card_remove[T]")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (apply-extensionality 2 :hide? t)
                                (("2"
                                  (expand "add")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (expand "remove")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (prop)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_card") nil nil))
    nil)
   unfinished
   (nil (card_remove formula-decl nil finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (set2list def-decl "list[T]" set2list nil)
    (list2set def-decl "set[T]" list2set nil)
    (list type-decl nil list_adt nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   150817 3620 t shostak)))
(listfuncs
 (before_TCC1 0
  (before_TCC1-1 nil 3388429891 3390292587
   ("" (termination-tcc) nil nil) unchecked
   ((length def-decl "nat" list_props nil)) 195 170 nil nil))
 (before_distinct 0
  (before_distinct-1 nil 3392381403 3392381563
   ("" (induct "l")
    (("1" (skosimp)
      (("1" (expand "before") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "before" -2)
        (("2" (ground) (("2" (inst?) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_induction formula-decl nil list_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (before def-decl "boolean" listfuncs nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   159587 110 t shostak))
 (before_member 0
  (before_member-1 nil 3398071584 3398071589
   ("" (induct "l")
    (("1" (expand "before") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "member" 1)
        (("2" (expand "before" -2)
          (("2" (ground) (("2" (inst?) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (before def-decl "boolean" listfuncs nil)
    (member def-decl "bool" list_props nil)
    (T formal-type-decl nil listfuncs nil)
    (list_induction formula-decl nil list_adt nil))
   3054 110 nil nil))
 (every_is_forall 0
  (every_is_forall-1 nil 3389528321 3391340512
   ("" (induct "l")
    (("1" (expand* "every" "member") nil nil)
     ("2" (skosimp*)
      (("2" (expand* "every" "member")
        (("2" (inst?)
          (("2" (iff)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (skosimp)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (expand "every" -4)
                              (("2"
                                (ground)
                                (("2"
                                  (inst - "x!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "member" -4)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (inst-cp -1 "cons1_var!1")
                      (("2" (assert)
                        (("2" (split)
                          (("1" (expand* "every" "member")
                            (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (expand "every" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (split -2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (inst? -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "member" 3)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_induction formula-decl nil list_adt nil) nil
    (member def-decl "bool" list_props nil) nil
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   1067272 970 t shostak))
 (some_is_exists 0
  (some_is_exists-1 nil 3389590159 3391340684
   ("" (induct "l")
    (("1" (expand* "some" "member") nil nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "some" 1)
          (("2" (expand "member" 1)
            (("2" (iff)
              (("2" (flatten)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (inst?) nil nil)
                       ("2" (assert)
                        (("2" (skolem!)
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skolem!)
                      (("2" (flatten)
                        (("2" (split)
                          (("1" (replace -1 -2)
                            (("1" (propax) nil nil)) nil)
                           ("2" (hide -3)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_induction formula-decl nil list_adt nil) nil
    (member def-decl "bool" list_props nil) nil
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   97852 180 t shostak))
 (list_is_null_or_cons 0
  (list_is_null_or_cons-1 nil 3389598819 3390292588
   ("" (skolem-typepred)
    (("" (use "list_inclusive[T]")
      (("" (ground)
        (("" (inst 2 "car(xs!1)" "cdr(xs!1)")
          (("" (apply-extensionality 2) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_inclusive formula-decl nil list_adt nil) nil
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   65 40 t shostak)))
(listsum
 (sum_TCC1 0
  (sum_TCC1-1 nil 3397556841 nil ("" (subtype-tcc) nil nil) unchecked
   nil nil nil nil nil))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3397556841 nil ("" (termination-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (sum_geq_than_elements 0
  (sum_geq_than_elements-1 nil 3397556841 3397556849
   ("" (induct-and-simplify "l") nil nil) untried
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (sum def-decl "nat" listsum nil)
    (member def-decl "bool" list_props nil) nil nil nil
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   848 109 t shostak)))
(list_map_funcs
 (list_map_member 0
  (list_map_member-1 nil 3397382384 3397382391
   ("" (induct-and-simplify "xs") nil nil) unfinished
   (nil (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil) nil
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   645 46 t shostak)))
(list_of_set_funcs
 (list_to_union_TCC1 0
  (list_to_union_TCC1-1 nil 3397382258 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (list_to_union_TCC2 0
  (list_to_union_TCC2-1 nil 3397382258 nil
   ("" (termination-tcc) nil nil) unchecked nil nil nil nil nil))
 (list_to_union_subset 0
  (list_to_union_subset-1 nil 3397382261 3397382267
   ("" (induct-and-simplify "l") nil nil) unfinished
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (list_induction formula-decl nil list_adt nil)
    (list_to_union def-decl "set[T]" list_of_set_funcs nil)
    (subset? const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil) nil
    (list type-decl nil list_adt nil))
   646 179 t shostak)))
(FunProp
 (nat2string_TCC1 0
  (nat2string_TCC1-1 nil 3390113818 3390292588
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   65 60 nil nil))
 (nat2string_TCC2 0
  (nat2string_TCC2-1 nil 3390113818 3390292588
   ("" (subtype-tcc) nil nil) unchecked nil 10 10 nil nil))
 (nat2string_injective 0
  (nat2string_injective-1 nil 3390113998 3390292588
   ("" (expand "injective?")
    (("" (induct "x1")
      (("1" (skosimp*)
        (("1" (expand "nat2string")
          (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "nat2string" -2)
          (("2" (lift-if)
            (("2" (assert)
              (("2" (split -2)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2"
                    (case "cdr(cons(char(0), nat2string(j!1))) = cdr(cons(char(0), nat2string(x2!1 - 1)))")
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (replace -1) (("2" (propax) nil nil)) nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil) nil
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (nat_induction formula-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (injective? const-decl "bool" functions nil))
   414 370 t shostak))
 (list2finseq_injective 0
  (list2finseq_injective-1 nil 3390119317 3390292589
   ("" (expand "injective?")
    (("" (expand "list2finseq")
      (("" (induct "x1")
        (("1" (skosimp*)
          (("1" (expand "length")
            (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "length" -2)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (split -2)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (inst -2 "cdr(x2!1)")
                      (("2" (assert)
                        (("2" (split -2)
                          (("1"
                            (case "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(0)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(0)")
                            (("1" (assert)
                              (("1"
                                (expand "nth" -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (use "list_cons_eta[char]")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -3) (("2" (propax) nil nil))
                              nil)
                             ("3" (assert)
                              (("3"
                                (expand "length")
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (expand "length")
                              (("4" (assert) nil nil)) nil))
                            nil)
                           ("2" (apply-extensionality :hide? t)
                            (("1" (typepred "x!1")
                              (("1"
                                (case
                                 "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(x!1 + 1)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(x!1 + 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -3)
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (expand "length" 1)
                                  (("3" (assert) nil nil))
                                  nil)
                                 ("4"
                                  (expand "length" 1)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list_induction formula-decl nil list_adt nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil) nil
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) nil
    (< const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil))
   1140 1060 t shostak))
 (nat2string_injective_function_exists 0
  (nat2string_injective_function_exists-1 nil 3390113893 3390292589
   ("" (inst 1 "list2finseq o nat2string")
    (("" (use "composition_injective[nat,list[char],string]")
      (("1" (use "list2finseq_injective") nil nil)
       ("2" (use "nat2string_injective") nil nil))
      nil))
    nil)
   unfinished
   ((composition_injective judgement-tcc nil function_props nil)
    (injective? const-decl "bool" functions nil) nil nil nil
    (list2finseq const-decl "finseq[T]" list2finseq nil) nil
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   33 30 t shostak)))

