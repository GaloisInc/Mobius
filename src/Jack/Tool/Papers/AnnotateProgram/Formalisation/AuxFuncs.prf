(set2list
 (set2list_TCC1 0
  (set2list_TCC1-1 nil 3387877128 3390299916 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil set2list nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   28 30 nil nil))
 (set2list_TCC2 0
  (set2list_TCC2-1 nil 3387877128 3390299916
   ("" (skosimp*)
    (("" (replace -2)
      (("" (rewrite "card_def" :dir rl)
        (("" (rewrite "card_remove[T]") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((card_remove formula-decl nil finite_sets nil)
    (T formal-type-decl nil set2list nil)
    (remove const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_def formula-decl nil finite_sets nil))
   168 150 t nil))
 (excluded_middle 0
  (excluded_middle-1 nil 3388476043 3390299916
   ("" (assert) (("" (skosimp) nil nil)) nil) proved nil 7 10 t
   shostak))
 (incredibly_stupid_property 0
  (incredibly_stupid_property-1 nil 3388464953 3390299916
   ("" (skosimp)
    (("" (apply-extensionality) (("" (use "excluded_middle") nil nil))
      nil))
    nil)
   proved
   ((T formal-type-decl nil set2list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (excluded_middle formula-decl nil set2list nil))
   50 30 t shostak))
 (stupid_property_of_choose 0
  (stupid_property_of_choose-1 nil 3388464004 3390299916
   ("" (skolem-typepred)
    (("" (name "y" "choose(s!1)")
      (("" (replace -1)
        (("" (assert) (("" (use "incredibly_stupid_property") nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((choose const-decl "(p)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (incredibly_stupid_property formula-decl nil set2list nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil set2list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   27 20 t shostak))
 (epsilon_membership_TCC1 0
  (epsilon_membership_TCC1-1 nil 3388477959 3390299916
   ("" (existence-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil set2list nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   59 30 nil nil))
 (epsilon_membership 0
  (epsilon_membership-1 nil 3388477963 3390299916
   ("" (skolem-typepred)
    (("" (use "epsilon_ax[T]")
      (("" (prop)
        (("" (expand* "nonempty?" "empty?" "member")
          (("" (skolem!) (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((epsilon_ax formula-decl nil epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil set2list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   29 30 t shostak))
 (add_remove_choose_equivalence 0
  (add_remove_choose_equivalence-1 nil 3388463415 3390299916
   ("" (skolem-typepred)
    (("" (expand* "add" "remove")
      (("" (expand "member" 1 1)
        (("" (assert)
          (("" (apply-extensionality)
            (("" (case "choose(s!1) = x!1 OR choose(s!1) /= x!1")
              (("1" (grind)
                (("1" (use "epsilon_membership")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (lemma "excluded_middle")
                (("2" (inst -1 "choose(s!1) = x!1")
                  (("2" (expand "/=") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((remove const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (epsilon_membership formula-decl nil set2list nil)
    (empty? const-decl "bool" sets nil)
    (excluded_middle formula-decl nil set2list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil set2list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   172 130 t shostak))
 (add_remove_equivalence 0
  (add_remove_equivalence-1 nil 3388481102 3390299917
   ("" (skosimp)
    (("" (expand* "add" "remove")
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (case "x!1 = x!2")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (expand "member") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((remove const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set2list nil))
   47 40 t shostak))
 (set2list_same_elements 0
  (set2list_same_elements-1 nil 3388429899 3390299917
   (""
    (use "wf_induction[finite_set[T], (LAMBDA(x, y : finite_set[T]) : card[T](x) < card[T](y))]")
    (("1"
      (inst -1
       "LAMBDA(s : finite_set[T]) : FORALL(x : T) : member(x, s) IFF member(x, set2list(s))")
      (("1" (split -1)
        (("1" (grind) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "member" 1)
              (("2" (expand "set2list" 1)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (split 1)
                      (("1" (skosimp*) (("1" (grind) nil nil)) nil)
                       ("2" (skosimp*)
                        (("2" (split 2)
                          (("1" (skosimp*)
                            (("1" (inst -2 "remove(choose(x!1), x!1)")
                              (("1"
                                (rewrite "card_remove[T]")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (inst -2 "remove(choose(x!1), x!1)")
                                (("2"
                                  (rewrite "card_remove[T]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_card") nil nil))
    nil)
   proved
   ((wf_card formula-decl nil WF_Card nil)
    (set2list def-decl "list[T]" set2list nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (member const-decl "bool" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (card_remove formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set2list nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   579 520 t shostak))
 (not_in_s_implies_not_in_set2list 0
  (not_in_s_implies_not_in_set2list-1 nil 3388486051 3390299917
   ("" (skosimp*)
    (("" (use "set2list_same_elements")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   proved
   ((set2list_same_elements formula-decl nil set2list nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set2list nil)
    (member const-decl "bool" sets nil))
   48 30 t shostak))
 (not_removed_set2list 0
  (not_removed_set2list-1 nil 3388485440 3390299917
   ("" (skosimp*)
    (("" (use "set2list_same_elements")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   proved
   ((set2list_same_elements formula-decl nil set2list nil)
    (remove const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set2list nil)
    (member const-decl "bool" sets nil))
   44 50 t shostak))
 (set_list_set 0
  (set_list_set-1 nil 3387877130 3390300099
   (""
    (use "wf_induction[finite_set[T], (LAMBDA(x, y : finite_set[T]) : card[T](x) < card[T](y))]")
    (("1" (split -1)
      (("1" (propax) nil nil)
       ("2" (hide 2)
        (("2" (skosimp*)
          (("2" (expand "set2list" 1)
            (("2" (expand "list2set" 1)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (skosimp*)
                      (("1" (apply-extensionality :hide? t)
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst -1 "remove(choose(x!1), x!1)")
                        (("2" (rewrite "card_remove[T]")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (apply-extensionality 2 :hide? t)
                                (("2"
                                  (expand "add")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (expand "remove")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (prop)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_card") nil nil))
    nil)
   proved
   ((wf_card formula-decl nil WF_Card nil)
    (card_remove formula-decl nil finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (set2list def-decl "list[T]" set2list nil)
    (list2set def-decl "set[T]" list2set nil)
    (list type-decl nil list_adt nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil set2list nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   150817 3620 t shostak))
 (remove_list2set_set2list 0
  (remove_list2set_set2list-1 nil 3388473330 3390300127
   ("" (skosimp*)
    (("" (rewrite "set_list_set")
      (("" (rewrite "set_list_set") nil nil)) nil))
    nil)
   proved
   ((set_list_set formula-decl nil set2list nil)
    (T formal-type-decl nil set2list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (remove const-decl "set" sets nil))
   14711 230 t shostak)))
(listfuncs
 (before_TCC1 0
  (before_TCC1-1 nil 3388429891 3390292587
   ("" (termination-tcc) nil nil) proved
   ((length def-decl "nat" list_props nil)) 195 170 nil nil))
 (every_is_forall 0
  (every_is_forall-1 nil 3389528321 3390292587
   ("" (induct "l")
    (("1" (expand* "every" "member") nil nil)
     ("2" (skosimp*)
      (("2" (expand* "every" "member")
        (("2" (inst?)
          (("2" (lift-if)
            (("2" (assert)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (skosimp)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (expand "member")
                          (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (expand "every" -4)
                            (("2" (ground)
                              (("2"
                                (inst - "x!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "member" -4)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst-cp -1 "cons1_var!1")
                    (("2" (assert)
                      (("2" (split)
                        (("1" (expand* "every" "member")
                          (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (expand "every" 2)
                            (("2" (assert)
                              (("2"
                                (split -2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (inst? -3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "member" 3)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   204 190 t shostak))
 (some_is_exists 0
  (some_is_exists-1 nil 3389590159 3390292587
   ("" (induct "l")
    (("1" (expand* "some" "member") nil nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "some" 1)
          (("2" (expand "member" 1)
            (("2" (flatten)
              (("2" (split +)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (inst?) nil nil)
                     ("2" (assert)
                      (("2" (skolem!)
                        (("2" (inst?) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skolem!)
                    (("2" (flatten)
                      (("2" (split)
                        (("1" (replace -1 -2) (("1" (propax) nil nil))
                          nil)
                         ("2" (hide -3)
                          (("2" (assert)
                            (("2" (inst?) (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (some adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   113 90 t shostak))
 (list_is_null_or_cons 0
  (list_is_null_or_cons-1 nil 3389598819 3390292588
   ("" (skolem-typepred)
    (("" (use "list_inclusive[T]")
      (("" (ground)
        (("" (inst 2 "car(xs!1)" "cdr(xs!1)")
          (("" (apply-extensionality 2) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((list_inclusive formula-decl nil list_adt nil)
    (T formal-type-decl nil listfuncs nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   65 40 t shostak)))
(FunProp
 (nat2string_TCC1 0
  (nat2string_TCC1-1 nil 3390113818 3390292588
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   65 60 nil nil))
 (nat2string_TCC2 0
  (nat2string_TCC2-1 nil 3390113818 3390292588
   ("" (subtype-tcc) nil nil) proved nil 10 10 nil nil))
 (nat2string_injective 0
  (nat2string_injective-1 nil 3390113998 3390292588
   ("" (expand "injective?")
    (("" (induct "x1")
      (("1" (skosimp*)
        (("1" (expand "nat2string")
          (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "nat2string" -2)
          (("2" (lift-if)
            (("2" (assert)
              (("2" (split -2)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2"
                    (case "cdr(cons(char(0), nat2string(j!1))) = cdr(cons(char(0), nat2string(x2!1 - 1)))")
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (replace -1) (("2" (propax) nil nil)) nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat2string def-decl "list[char]" FunProp nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (injective? const-decl "bool" functions nil))
   414 370 t shostak))
 (list2finseq_injective 0
  (list2finseq_injective-1 nil 3390119317 3390292589
   ("" (expand "injective?")
    (("" (expand "list2finseq")
      (("" (induct "x1")
        (("1" (skosimp*)
          (("1" (expand "length")
            (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "length" -2)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (split -2)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (inst -2 "cdr(x2!1)")
                      (("2" (assert)
                        (("2" (split -2)
                          (("1"
                            (case "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(0)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(0)")
                            (("1" (assert)
                              (("1"
                                (expand "nth" -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (use "list_cons_eta[char]")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -3) (("2" (propax) nil nil))
                              nil)
                             ("3" (assert)
                              (("3"
                                (expand "length")
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (expand "length")
                              (("4" (assert) nil nil)) nil))
                            nil)
                           ("2" (apply-extensionality :hide? t)
                            (("1" (typepred "x!1")
                              (("1"
                                (case
                                 "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(x!1 + 1)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(x!1 + 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -3)
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (expand "length" 1)
                                  (("3" (assert) nil nil))
                                  nil)
                                 ("4"
                                  (expand "length" 1)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x2!1 skolem-const-decl "list[char]" FunProp nil)
    (cons2_var!1 skolem-const-decl "list[char]" FunProp nil)
    (list_induction formula-decl nil list_adt nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil))
   1140 1060 t shostak))
 (nat2string_injective_function_exists 0
  (nat2string_injective_function_exists-1 nil 3390113893 3390292589
   ("" (inst 1 "list2finseq o nat2string")
    (("" (use "composition_injective[nat,list[char],string]")
      (("1" (use "list2finseq_injective") nil nil)
       ("2" (use "nat2string_injective") nil nil))
      nil))
    nil)
   proved
   ((composition_injective judgement-tcc nil function_props nil)
    (injective? const-decl "bool" functions nil)
    (list2finseq_injective formula-decl nil FunProp nil)
    (nat2string_injective formula-decl nil FunProp nil)
    (nat2string def-decl "list[char]" FunProp nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (O const-decl "T3" function_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   33 30 t shostak)))

