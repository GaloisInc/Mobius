(MoreAnnotatedProgramProperties
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3410161121 nil
   ("" (assuming-tcc) nil nil) unchecked nil nil nil nil nil))
 (IMP_Equivalence_TCC1 0
  (IMP_Equivalence_TCC1-1 nil 3410161121 nil
   ("" (assuming-tcc) nil nil) unchecked nil nil nil nil nil))
 (IMP_Equivalence_TCC2 0
  (IMP_Equivalence_TCC2-1 nil 3410161121 nil
   ("" (assuming-tcc) nil nil) unchecked nil nil nil nil nil))
 (derive_equivalence_TCC1 0
  (derive_equivalence_TCC1-1 nil 3410161121 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (derive_equivalence 0
  (derive_equivalence-1 nil 3410170239 3410180832
   ("" (skolem 1 ("mp!1" _ _ _ _ _))
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (b : (wf_Body(program(mp!1))), sAP1, sAP2: APState, v: Val) :
                    contains_no_method_call(program(mp!1))(b) IMPLIES
         subset?(var_names(b), ext_declared_var_names(program(mp!1))) IMPLIES

                     derive(ann_program(mp!1))(b, sAP1, v, sAP2)(n) IMPLIES
                       derive(mp!1)(b, make_MPState(mp!1)(sAP1), v, make_MPState(mp!1)(sAP2))(n)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (auto-rewrite "make_MPState"
                              "check_for_exception_final"
                              "check_for_exception")
                (("2" (expand "derive" (-4 1))
                  (("2"
                    (apply (branch (split -4)
                            ((then (flatten) (assert) (flatten)
                              (assert)))))
                    (("2" (lift-if)
                      (("2"
                        (apply (branch
                                (split -1)
                                ((then
                                  (flatten)
                                  (assert)
                                  (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                          (("1" (skosimp*)
                            (("1" (inst-cp -6 "m2!1")
                              (("1"
                                (inst -6 "m1!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (apply
                                     (repeat (inst? -6 :where -3)))
                                    (("1"
                                      (apply
                                       (repeat (inst? -7 :where -4)))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -6)
                                          (("1"
                                            (split -7)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (then
                                                (use
                                                 "subterm_subset_of_var"
                                                 ("b2"
                                                  "b2(b!1)"
                                                  "b1"
                                                  "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil)
                                             ("3"
                                              (apply
                                               (then
                                                (use
                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                 ("b2"
                                                  "b2(b!1)"
                                                  "b1"
                                                  "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2"
                                                "b1(b!1)"
                                                "b1"
                                                "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2"
                                                "b1(b!1)"
                                                "b1"
                                                "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (then
                                          (use
                                           "wf_Body_preserved_by_proper_subterm"
                                           ("b2" "b2(b!1)" "b1" "b!1"))
                                          (assert)
                                          (expand "<<")
                                          (assert)))
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (then
                                        (use
                                         "wf_Body_preserved_by_proper_subterm"
                                         ("b2" "b1(b!1)" "b1" "b!1"))
                                        (assert)
                                        (expand "<<")
                                        (assert)))
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (apply (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                            (("1" (expand "lookup")
                              (("1" (propax) nil nil)) nil)
                             ("2"
                              (apply (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst? 7)
                                      (("1"
                                        (inst -5 "x!1 - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (apply
                                             (repeat
                                              (inst? -5 :where -3)))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -5)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "check_for_exception")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "subterm_subset_of_var"
                                                     ("b2"
                                                      "b(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (apply
                                                   (then
                                                    (use
                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (then
                                                (use
                                                 "wf_Body_preserved_by_proper_subterm"
                                                 ("b2"
                                                  "b(b!1)"
                                                  "b1"
                                                  "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst-cp -6 "m1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (apply
                                             (repeat
                                              (inst? -7 :where -3)))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -7)
                                                (("1"
                                                  (inst? 8)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -5)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst? 8)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -10
                                                             "m2!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -10
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -10)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "subterm_subset_of_var"
                                                                         ("b2"
                                                                          "b2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "b2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                     ("b2"
                                                                      "b2(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst? 10)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?
                                                                 10)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       10)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "subterm_subset_of_var"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (apply
                                                   (then
                                                    (use
                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (then
                                                (use
                                                 "wf_Body_preserved_by_proper_subterm"
                                                 ("b2"
                                                  "b1(b!1)"
                                                  "b1"
                                                  "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst-cp -6 "m2!1")
                                          (("1"
                                            (inst -6 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -6
                                                   :where
                                                   -3)))
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -7
                                                     :where
                                                     -4)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -6)
                                                      (("1"
                                                        (split -7)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "check_for_exception")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (then
                                                            (use
                                                             "subterm_subset_of_var"
                                                             ("b2"
                                                              "b2(b!1)"
                                                              "b1"
                                                              "b!1"))
                                                            (assert)
                                                            (expand
                                                             "<<")
                                                            (assert)))
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (apply
                                                           (then
                                                            (use
                                                             "contains_no_method_call_preserved_by_proper_subterm"
                                                             ("b2"
                                                              "b2(b!1)"
                                                              "b1"
                                                              "b!1"))
                                                            (assert)
                                                            (expand
                                                             "<<")
                                                            (assert)))
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (use
                                                           "subterm_subset_of_var"
                                                           ("b2"
                                                            "b1(b!1)"
                                                            "b1"
                                                            "b!1"))
                                                          (assert)
                                                          (expand "<<")
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (apply
                                                         (then
                                                          (use
                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                           ("b2"
                                                            "b1(b!1)"
                                                            "b1"
                                                            "b!1"))
                                                          (assert)
                                                          (expand "<<")
                                                          (assert)))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "wf_Body_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "b2(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "wf_Body_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (expand "lookup")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (expand "get_address")
                                              (("1"
                                                (expand
                                                 "get_dynamic_type_name")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst -5 "x!1 - 1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -5
                                                         :where
                                                         -3)))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -5)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       13)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "update_PState")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "subterm_subset_of_var"
                                                               ("b2"
                                                                "source(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand
                                                               "<<")
                                                              (assert)))
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (apply
                                                             (then
                                                              (use
                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                               ("b2"
                                                                "source(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand
                                                               "<<")
                                                              (assert)))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (use
                                                           "wf_Body_preserved_by_proper_subterm"
                                                           ("b2"
                                                            "source(b!1)"
                                                            "b1"
                                                            "b!1"))
                                                          (assert)
                                                          (expand "<<")
                                                          (assert)))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (inst -4 "x!1 - 1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -4
                                                         :where
                                                         -3)))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -4)
                                                          (("1"
                                                            (apply
                                                             (then
                                                              (use
                                                               "subterm_subset_of_var"
                                                               ("b2"
                                                                "b(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand
                                                               "<<")
                                                              (assert)))
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                               ("b2"
                                                                "b(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand
                                                               "<<")
                                                              (assert)))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst-cp
                                                       -6
                                                       "m1!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -7
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -7)
                                                              (("1"
                                                                (inst?
                                                                 15)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -5)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (inst?
                                                                           15)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -8
                                                                           "m2!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -2)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -8)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lift-if)
                                                                                        (("3"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             1)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("1"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "subterm_subset_of_var"
                                                                                               ("b2"
                                                                                                "then_expr(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "subterm_subset_of_var"
                                                                                               ("b2"
                                                                                                "else_expr(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                                                           ("b2"
                                                                                            "then_expr(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil)
                                                                                       ("5"
                                                                                        (skosimp*)
                                                                                        (("5"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "contains_no_method_call_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "else_expr(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "else_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "wf_Body_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "then_expr(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "subterm_subset_of_var"
                                                                   ("b2"
                                                                    "test(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                   ("b2"
                                                                    "test(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "wf_Body_preserved_by_proper_subterm"
                                                               ("b2"
                                                                "test(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand
                                                               "<<")
                                                              (assert)))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (expand
                                                       "contains_no_method_call")
                                                      (("1"
                                                        (inst -4 "b!1")
                                                        (("1"
                                                          (expand
                                                           "subterm")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (inst
                                                         -4
                                                         "x!1 - 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -4
                                                               :where
                                                               -3)))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -4)
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "n(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                     ("b2"
                                                                      "n(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "x!1 - 1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -4
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "r(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  (("1"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "r(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (expand
                                                             "execute_CaseJML")
                                                            (("1"
                                                              (expand
                                                               "extend")
                                                              (("1"
                                                                (expand
                                                                 "id")
                                                                (("1"
                                                                  (expand
                                                                   "return_of_stmt")
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       19)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (inst
                                                                             -8
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -8
                                                                                   :where
                                                                                   -3)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -8)
                                                                                    (("1"
                                                                                      (auto-rewrite
                                                                                       "subset?"
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -10
                                                                                                 "x!2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     22)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "contains_no_method_call")
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subterm"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -10
                                                                                               "b1!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subterm"
                                                                                                   21)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "some_is_exists")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       21)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "subterm"
                                                                                                           -1)
                                                                                                          (("3"
                                                                                                            (rewrite
                                                                                                             "some_is_exists")
                                                                                                            (("3"
                                                                                                              (skosimp*)
                                                                                                              (("3"
                                                                                                                (inst?)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "wf_Branches"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "every_is_forall")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("2"
                                                                              (auto-rewrite
                                                                               "subset?"
                                                                               "member"
                                                                               "union")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -8)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "FORALL(b : list[[BoolExpr, Stmt]], x : [BoolExpr, Stmt], v : Name) : member(x, b) IMPLIES var_names(proj_1(x))(v) IMPLIES var_names(CaseJML(b))(v)")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "branches(b!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   (-1
                                                                                                    20))
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (induct
                                                                                             "b")
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -6)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "wf_Branches")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "every_is_forall")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "wf_Body")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "b1!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "ann_program_add_ghost_var_decls")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "var_names_union")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -13
                                                                                                                   "target(b1!1)")
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -13)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "wf_new_vars")
                                                                                                                      (("1"
                                                                                                                        (auto-rewrite
                                                                                                                         "disjoint?"
                                                                                                                         "intersection"
                                                                                                                         "empty?")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst?
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand*
                                                                                                                                     "ext_declared_var_names"
                                                                                                                                     "declared_var_names"
                                                                                                                                     "reserved_words")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "subterm(b1!1, b!1)")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "subterm_subset_varnames2")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst?
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "var_names")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "add")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "subterm_transitive"
                                                                                                                         ("b1"
                                                                                                                          "b1!1"
                                                                                                                          "b2"
                                                                                                                          "PROJ_1(x!2)"
                                                                                                                          "b3"
                                                                                                                          "b!1"))
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "subterm"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "some_is_exists")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "subterm")
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp*)
                                                                                    (("3"
                                                                                      (inst?
                                                                                       -8)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (case
                                                                                           "FORALL(b : list[[BoolExpr, Stmt]], x : [BoolExpr, Stmt], v : Name) : member(x, b) IMPLIES var_names(proj_2(x))(v) IMPLIES var_names(CaseJML(b))(v)")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   (-1
                                                                                                    20))
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (induct
                                                                                               "b")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -6)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("4"
                                                                                        (expand
                                                                                         "wf_Branches")
                                                                                        (("4"
                                                                                          (rewrite
                                                                                           "every_is_forall")
                                                                                          (("4"
                                                                                            (inst?)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              (("4"
                                                                                                (flatten)
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "wf_Body")
                                                                                                  (("4"
                                                                                                    (flatten)
                                                                                                    (("4"
                                                                                                      (inst?
                                                                                                       -4)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          (("4"
                                                                                                            (rewrite
                                                                                                             "ann_program_add_ghost_var_decls"
                                                                                                             -4)
                                                                                                            (("4"
                                                                                                              (rewrite
                                                                                                               "var_names_union")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                (("4"
                                                                                                                  (inst
                                                                                                                   -13
                                                                                                                   "target(b1!1)")
                                                                                                                  (("4"
                                                                                                                    (split
                                                                                                                     -13)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "wf_new_vars")
                                                                                                                      (("1"
                                                                                                                        (auto-rewrite
                                                                                                                         "disjoint?"
                                                                                                                         "intersection"
                                                                                                                         "empty?")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand*
                                                                                                                             "declared_var_names"
                                                                                                                             "ext_declared_var_names"
                                                                                                                             "reserved_words")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -4)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (inst?
                                                                                                                                         -4)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "subterm(b1!1, b!1)")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "subterm_subset_varnames2")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "var_names")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "add")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "subterm_transitive"
                                                                                                                         ("b1"
                                                                                                                          "b1!1"
                                                                                                                          "b2"
                                                                                                                          "proj_2(x!2)"
                                                                                                                          "b3"
                                                                                                                          "b!1"))
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "subterm"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "some_is_exists")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subterm")
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand
                                                                 "return_of_stmt")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -7
                                                                     "m1!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -8
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -8)
                                                                            (("1"
                                                                              (split
                                                                               20)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "check_for_exception")
                                                                                        (("2"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -6)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("2"
                                                                                            (inst
                                                                                             -9
                                                                                             "m2!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -9
                                                                                                   :where
                                                                                                   -2)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (lift-if)
                                                                                                      (("3"
                                                                                                        (apply
                                                                                                         (branch
                                                                                                          (split
                                                                                                           1)
                                                                                                          ((then
                                                                                                            (flatten)
                                                                                                            (assert)
                                                                                                            (flatten)
                                                                                                            (assert)))))
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "subterm_subset_of_var"
                                                                                                             ("b2"
                                                                                                              "then_stmt(b!1)"
                                                                                                              "b1"
                                                                                                              "b!1"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")
                                                                                                            (assert)))
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "subterm_subset_of_var"
                                                                                                             ("b2"
                                                                                                              "else_stmt(b!1)"
                                                                                                              "b1"
                                                                                                              "b!1"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")
                                                                                                            (assert)))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (skosimp*)
                                                                                                      (("4"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                           ("b2"
                                                                                                            "then_stmt(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("5"
                                                                                                      (skosimp*)
                                                                                                      (("5"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                           ("b2"
                                                                                                            "else_stmt(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (use
                                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                                       ("b2"
                                                                                                        "else_stmt(b!1)"
                                                                                                        "b1"
                                                                                                        "b!1"))
                                                                                                      (assert)
                                                                                                      (expand
                                                                                                       "<<")
                                                                                                      (assert)))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (use
                                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                                       ("b2"
                                                                                                        "then_stmt(b!1)"
                                                                                                        "b1"
                                                                                                        "b!1"))
                                                                                                      (assert)
                                                                                                      (expand
                                                                                                       "<<")
                                                                                                      (assert)))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "subterm_subset_of_var"
                                                                                 ("b2"
                                                                                  "test(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "test(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                             ("b2"
                                                                              "test(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m2!1")
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "m1!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -7
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -8
                                                                             :where
                                                                             -6)))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -7)
                                                                              (("1"
                                                                                (split
                                                                                 -8)
                                                                                (("1"
                                                                                  (expand
                                                                                   "return_of_stmt")
                                                                                  (("1"
                                                                                    (split
                                                                                     21)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "s2(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "s2(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "subterm_subset_of_var"
                                                                                   ("b2"
                                                                                    "s1(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "s1(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                               ("b2"
                                                                                "s2(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                             ("b2"
                                                                              "s1(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (expand
                                                                   "return_of_stmt")
                                                                  (("1"
                                                                    (expand
                                                                     "execute_set")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         22)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (inst
                                                                             -7
                                                                             "x!1 - 1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -7
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "update_GhostVars")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_store")
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     1)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "subterm_subset_of_var"
                                                                                         ("b2"
                                                                                          "source(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "source(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "source(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (expand
                                                                     "return_of_stmt")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "return_of_stmt")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             24)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -5
                                                                               "x!1 - 1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -5
                                                                                     :where
                                                                                     -4)))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -5)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b2"
                                                                                            "expr(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                                                           ("b2"
                                                                                            "expr(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                       ("b2"
                                                                                        "expr(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")
                                                                                      (assert)))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (expand
                                                                         "return_of_stmt")
                                                                        (("1"
                                                                          (expand
                                                                           "update_PState")
                                                                          (("1"
                                                                            (expand
                                                                             "raise")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (expand
                                                                           "return_of_stmt")
                                                                          (("1"
                                                                            (split
                                                                             26)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -10
                                                                                 "m1!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -11
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -11)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -7)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -14
                                                                                                   "m2!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -15
                                                                                                         :where
                                                                                                         -3)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -15)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -15
                                                                                                             "m3!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -15
                                                                                                                   :where
                                                                                                                   -12)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -15)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "make_MPState(mp!1)(tau2!1)"
                                                                                                                       "make_MPState(mp!1)(tau3!1)"
                                                                                                                       "v1!1"
                                                                                                                       "v2!1"
                                                                                                                       "v3!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lift-if
                                                                                                                               -6)
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (branch
                                                                                                                                  (split
                                                                                                                                   -6)
                                                                                                                                  ((then
                                                                                                                                    (flatten)
                                                                                                                                    (assert)
                                                                                                                                    (flatten)
                                                                                                                                    (assert)))))
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (apply
                                                                                                                                       (branch
                                                                                                                                        (split
                                                                                                                                         1)
                                                                                                                                        ((then
                                                                                                                                          (flatten)
                                                                                                                                          (assert)
                                                                                                                                          (flatten)
                                                                                                                                          (assert)))))
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (apply
                                                                                                                                       (branch
                                                                                                                                        (split
                                                                                                                                         2)
                                                                                                                                        ((then
                                                                                                                                          (flatten)
                                                                                                                                          (assert)
                                                                                                                                          (flatten)
                                                                                                                                          (assert)))))
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply
                                                                                                                       (then
                                                                                                                        (use
                                                                                                                         "subterm_subset_of_var"
                                                                                                                         ("b2"
                                                                                                                          "finally(b!1)"
                                                                                                                          "b1"
                                                                                                                          "b!1"))
                                                                                                                        (assert)
                                                                                                                        (expand
                                                                                                                         "<<")
                                                                                                                        (assert)))
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (apply
                                                                                                                       (then
                                                                                                                        (use
                                                                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                                         ("b2"
                                                                                                                          "finally(b!1)"
                                                                                                                          "b1"
                                                                                                                          "b!1"))
                                                                                                                        (assert)
                                                                                                                        (expand
                                                                                                                         "<<")
                                                                                                                        (assert)))
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (use
                                                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                                                     ("b2"
                                                                                                                      "finally(b!1)"
                                                                                                                      "b1"
                                                                                                                      "b!1"))
                                                                                                                    (assert)
                                                                                                                    (expand
                                                                                                                     "<<")
                                                                                                                    (assert)))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "subterm_subset_of_var"
                                                                                                               ("b2"
                                                                                                                "catch(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                               ("b2"
                                                                                                                "catch(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                                           ("b2"
                                                                                                            "catch(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -12
                                                                                                   "m3!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -12
                                                                                                         :where
                                                                                                         -9)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -12)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             2
                                                                                                             "make_MPState(mp!1)(tau2!1)"
                                                                                                             "make_MPState(mp!1)(tau3!1)"
                                                                                                             "v1!1"
                                                                                                             "v2!1"
                                                                                                             "v3!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "up?(ex(pstate(tau1!1)))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (branch
                                                                                                                                (split
                                                                                                                                 2)
                                                                                                                                ((then
                                                                                                                                  (flatten)
                                                                                                                                  (assert)
                                                                                                                                  (flatten)
                                                                                                                                  (assert)))))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (branch
                                                                                                                                (split
                                                                                                                                 3)
                                                                                                                                ((then
                                                                                                                                  (flatten)
                                                                                                                                  (assert)
                                                                                                                                  (flatten)
                                                                                                                                  (assert)))))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "subterm_subset_of_var"
                                                                                                               ("b2"
                                                                                                                "finally(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                               ("b2"
                                                                                                                "finally(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                                           ("b2"
                                                                                                            "finally(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "subterm_subset_of_var"
                                                                                             ("b2"
                                                                                              "try(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "contains_no_method_call_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "try(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "try(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -5
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -5)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "return_of_stmt")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (auto-rewrite
                                                                                       "subset?"
                                                                                       "union"
                                                                                       "member")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (case-replace
                                                                                                     "While(test(b!1), body(b!1)) = b!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         -2
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "emptyset")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "var_names"
                                                                                                             28)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand
                                                                                       "contains_no_method_call")
                                                                                      (("3"
                                                                                        (skosimp*)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -7
                                                                                           "b1!1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "subterm"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (case-replace
                                                                                                 "While(test(b!1), body(b!1)) = b!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "subterm"
                                                                                                     -2
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subterm"
                                                                                                       27)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "wf_Body")
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "var_names"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (auto-rewrite
                                                                                             "subset?"
                                                                                             "union"
                                                                                             "member")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "While(test(b!1), body(b!1)) = b!1")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         -2
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "emptyset")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "var_names"
                                                                                                             28)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "subterm"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "While(test(b!1), body(b!1)) = b!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "b!1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "wf_Body")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "subterm"
                                                                                                           -4
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subterm"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply-extensionality
                                                                                               :hide?
                                                                                               t)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "execute_assert")
                                                                            (("2"
                                                                              (expand
                                                                               "check_assertion")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (expand
                                                                                   "return_of_stmt")
                                                                                  (("2"
                                                                                    (split
                                                                                     28)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -6
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -6
                                                                                             :where
                                                                                             -3)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -6)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             1)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (branch
                                                                                                              (split
                                                                                                               -5)
                                                                                                              ((then
                                                                                                                (flatten)
                                                                                                                (assert)
                                                                                                                (flatten)
                                                                                                                (assert)))))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "subterm_subset_of_var"
                                                                                                   ("b2"
                                                                                                    "expr(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                   ("b2"
                                                                                                    "expr(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "expr(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "id")
          (("2" (skosimp*)
            (("2" (use "ann_program_preserves_wf_body") nil nil)) nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unfinished
   ((wf_nat formula-decl nil naturalnumbers nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MoreAnnotatedProgramProperties
     nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil MoreAnnotatedProgramProperties
     nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (derive def-decl "bool" Semantics nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (make_MPState const-decl "MPState" MoreAnnotatedProgramProperties
     nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_dynamic_type_name const-decl "Name" Semantics nil)
    (get_address const-decl "int" Semantics nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (update_store const-decl "Store" State nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (raise const-decl "PState" State nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (subterm_transitive formula-decl nil ProgramFunctions nil)
    (subterm_subset_varnames2 formula-decl nil ProgramFunctions nil)
    (add const-decl "(nonempty?)" sets nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (list_induction formula-decl nil list_adt nil)
    (return_of_stmt const-decl "Val" Semantics nil)
    (extend const-decl "R" extend nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (initial_MVA_state const-decl "AState" MVASemantics nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (contains_no_method_call_preserved_by_proper_subterm formula-decl
     nil ContainsNoMethodCall nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   310757 69290 t shostak))
 (ann_actions_contains_no_method_calls 0
  (ann_actions_contains_no_method_calls-1 nil 3410526069 3410526808
   ("" (induct "l")
    (("1" (expand "ann_action")
      (("1" (expand "contains_no_method_call")
        (("1" (skosimp*)
          (("1" (expand "subterm") (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "contains_no_method_call")
        (("2" (skosimp*)
          (("2" (expand "ann_action" -3)
            (("2" (rewrite "subterm" -3)
              (("2" (assert)
                (("2" (split -3)
                  (("1" (rewrite "subterm" -1)
                    (("1" (inst? -3)
                      (("1" (assert)
                        (("1" (expand "member")
                          (("1" (inst? -3) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "member" -5)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Action type-eq-decl nil MVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (Body type-decl nil Body_adt nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (OneAction type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil MoreAnnotatedProgramProperties
     nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil MoreAnnotatedProgramProperties
     nil)
    (list_induction formula-decl nil list_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil))
   128339 3850 t shostak))
 (contains_no_method_call_preserved_by_ann_program 0
  (contains_no_method_call_preserved_by_ann_program-1 nil 3410181070
   3410527200
   ("" (skosimp*)
    (("" (expand "contains_no_method_call_in_sets_in_program")
      (("" (expand "program_method_pred")
        (("" (skosimp*)
          (("" (expand "ann_program" -2)
            (("" (skosimp*)
              (("" (inst?)
                (("" (assert)
                  (("" (replace -3 :hide? t)
                    (("" (expand "ann_class" -3)
                      (("" (split -3)
                        (("1" (flatten)
                          (("1" (expand "ann_methods")
                            (("1" (skosimp*)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     "contains_no_method_call_in_sets")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand
                                           "contains_no_method_call")
                                          (("1"
                                            (expand "ann_method" 1)
                                            (("1"
                                              (case
                                               "wf_MVA(mva(mp!1))")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "subterm"
                                                       -1)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "subterm"
                                                           -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "ann_event")
                                                              (("1"
                                                                (expand
                                                                 "subterm"
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "some_is_exists")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (use
                                                                       "set2list_same_elements")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (hide
                                                                               -8
                                                                               -9
                                                                               -10)
                                                                              (("1"
                                                                                (expand
                                                                                 "ann_event_set")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "ann_trans_cp")
                                                                                      (("1"
                                                                                        (split
                                                                                         -3)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "subterm"
                                                                                             -1)))
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "is_finite[Transition[CP, Name]]
          ({t: Transition[CP, Name] |
              filter_event[CP, Name](mva(mp!1))(Entry)(name(n!1))(t) AND
               scp(t) = q!1})")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "subterm"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "some_is_exists")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "ann_guard_actions")
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "set2list_same_elements")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ann_guard_actions_set")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "guard_to_expression_contains_no_method_calls")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "contains_no_method_call")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "filter_event")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "update_vars")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "subterm"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (rewrite
                                                                                                                               "subterm"
                                                                                                                               -1)))
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "ann_actions_contains_no_method_calls")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "contains_no_method_call")
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "action_sources_contains_no_method_calls")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "filter_event")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 386693 3840 t shostak)))

