(MethodCallsPreserveInlineRelatedState
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3409049598 3410869091
   ("" (assuming-tcc) nil nil) unfinished nil 246 240 nil nil)))
(CorrectnessInlineProgram
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3409049681 3409287233
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil CorrectnessInlineProgram nil))
   6039 30 t nil))
 (IMP_InlineRelatedStatesProperties_TCC1 0
  (IMP_InlineRelatedStatesProperties_TCC1-1 nil 3409049681 3409287243
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil CorrectnessInlineProgram nil))
   4663 40 t nil))
 (derive_maintains_inline_related_states_for_method_call_TCC1 0
  (derive_maintains_inline_related_states_for_method_call_TCC1-1 nil
   3410869839 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
   nil))
 (derive_maintains_inline_related_states_for_method_call_TCC2 0
  (derive_maintains_inline_related_states_for_method_call_TCC2-1 nil
   3410869839 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
   nil))
 (derive_maintains_inline_related_states_for_method_call_TCC3 0
  (derive_maintains_inline_related_states_for_method_call_TCC3-1 nil
   3410869839 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
   nil))
 (derive_maintains_inline_related_states_for_method_call_TCC4 0
  (derive_maintains_inline_related_states_for_method_call_TCC4-1 nil
   3410869839 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
   nil))
 (initial_states_are_equivalent 0
  (initial_states_are_equivalent-1 nil 3409049916 3409057873
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (use "wf_initial_AP_state")
        (("" (assert)
          (("" (use "wf_initial_AP_state" ("p" "inline_program(p!1)"))
            (("" (assert)
              (("" (hide -1 -2)
                (("" (expand "Program_modeled?")
                  (("" (expand "Program_lvs_modeled?")
                    (("" (expand "initial_AP_state")
                      (("" (expand "initial_Program_state")
                        (("" (assert)
                          (("" (expand "get_LocalDecl")
                            (("" (expand "get_GhostDecl")
                              ((""
                                (expand "get_FieldDecl")
                                ((""
                                  (rewrite
                                   "inline_program_preserves_Field_decls")
                                  ((""
                                    (rewrite
                                     "inline_program_preserves_Ghost_decls")
                                    ((""
                                      (rewrite
                                       "inline_program_add_LocalVar_decls")
                                      ((""
                                        (assert)
                                        ((""
                                          (skosimp*)
                                          ((""
                                            (lift-if)
                                            ((""
                                              (assert)
                                              ((""
                                                (apply
                                                 (branch
                                                  (split 1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                ((""
                                                  (lift-if)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (apply
                                                       (branch
                                                        (split 2)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (expand
                                                         "defined?")
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -2)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (case-replace
                                                             "{l: LocalVarDecl[Name] |
                              getLocalDecls(p!1)(l) AND
                               name(l) = n!1} = {l: LocalVarDecl[Name] |
                               union(getLocalDecls(p!1), new_lvars(p!1))(l)
                                AND name(l) = n!1}")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (auto-rewrite
                                                                   "union"
                                                                   "member")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (iff)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "nonempty_exists"
                                                                               -3)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (use
                                                                                     "new_lvars_not_old_local_decls")
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "disjoint?"
                                                                                       "intersection"
                                                                                       "empty?")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "var_names")
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split 2)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("2"
                                                          (rewrite
                                                           "nonempty_exists")
                                                          (("2"
                                                            (rewrite
                                                             "nonempty_exists")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (typepred
                                                                 "x!1")
                                                                (("2"
                                                                  (inst?
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (auto-rewrite
                                                                       "union"
                                                                       "member")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (inline_program_preserves_Field_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (inline_program_add_LocalVar_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (new_lvars_not_old_local_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (inline_program_preserves_Ghost_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (get_FieldDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (get_LocalDecl const-decl "lift[LocalVarDecl]" ProgramFunctions
     nil)
    (initial_Program_state const-decl "PState" State nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil CorrectnessInlineProgram nil)
    (wf_initial_AP_state formula-decl nil AnnotatedProgramSemantics
     nil))
   1661 1580 t shostak))
 (derive_maintains_inline_related_states_for_unchanged_program_TCC1 0
  (derive_maintains_inline_related_states_for_unchanged_program_TCC1-1
   nil 3409049681 3409057874 ("" (subtype-tcc) nil nil) unchecked
   ((defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil CorrectnessInlineProgram nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (inline_related_states const-decl "boolean" InlineEquivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil))
   1172 1130 nil nil))
 (derive_maintains_inline_related_states_for_unchanged_program_TCC2 0
  (derive_maintains_inline_related_states_for_unchanged_program_TCC2-1
   nil 3409049681 3409287262
   ("" (expand "id")
    (("" (skosimp*)
      (("" (use "inline_program_preserves_wf_body") nil nil)) nil))
    nil)
   unchecked
   ((Name formal-nonempty-type-decl nil CorrectnessInlineProgram nil)
    (inline_program_preserves_wf_body formula-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   13865 210 t nil))
 (derive_maintains_inline_related_states_for_unchanged_program 0
  (derive_maintains_inline_related_states_for_unchanged_program-2 nil
   3410871728 3410872515
   (""
    (lemma
     "wf_induction[[nat, nat], LAMBDA(i, j : [nat, nat]) : proj_1(i) < proj_1(j) AND proj_2(i) < proj_2(j)]")
    (("1" (auto-rewrite "id")
      (("1"
        (inst -1
         "LAMBDA(x : [nat, nat]) : FORALL (p: (wf_set_stmts), b: (wf_Body(p)), v1, v2: Val)
                 (sAP1a, sAP1b, sAP2a, sAP2b: APState) :
            subset?(var_names(b), ext_declared_var_names(p)) IMPLIES
             inline_related_states(p)(sAP1a, sAP2a) IMPLIES
              derive(p)(b, sAP1a, v1, sAP1b)(proj_1(x)) IMPLIES
               derive(inline_program(p))(b, sAP2a, v2, sAP2b)(proj_2(x)) IMPLIES
                inline_related_states(p)(sAP1b, sAP2b) AND v1 = v2")
        (("1" (split -1)
          (("1" (skosimp*)
            (("1" (inst -1 "(n1!1, n2!1)")
              (("1" (apply (repeat (inst? -1)))
                (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "derive" -4)
                (("2" (expand "derive" -5)
                  (("2" (assert)
                    (("2"
                      (use "inline_related_states_implies_same_exception")
                      (("2" (assert)
                        (("2"
                          (apply (branch
                                  (split -5)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                          (("2" (lift-if)
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (copy -7)
                                    (("1"
                                      (inst -1 "(m1!1, m1!2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -8 "(m2!1, m2!2)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst?
                                                 -1
                                                 :where
                                                 (-4 -12))))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -9
                                                         :where
                                                         (-6 -14))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -9)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception_final")
                                                                (("1"
                                                                  (expand
                                                                   "check_for_exception")
                                                                  (("1"
                                                                    (use
                                                                     "inline_related_states_implies_same_exception")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -10)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "subterm_subset_of_var"
                                                             ("b2"
                                                              "b2(b!1)"
                                                              "b1"
                                                              "b!1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "<<")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "wf_Body_preserved_by_proper_subterm"
                                                         ("b1"
                                                          "b!1"
                                                          "b2"
                                                          "b2(b!1)"))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "<<")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b2"
                                                        "b1(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (use
                                                   "wf_Body_preserved_by_proper_subterm"
                                                   ("b1"
                                                    "b!1"
                                                    "b2"
                                                    "b1(b!1)"))
                                                  (assert)
                                                  (expand "<<")))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (use
                                         "inline_program_preserves_wf_body")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                                  (("1"
                                    (use
                                     "inline_related_states_implies_same_lookup")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (auto-rewrite
                                         "subset?"
                                         "union"
                                         "member")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -7 "varname(b!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "var_names" 5)
                                                (("1"
                                                  (expand "singleton")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst
                                             -6
                                             "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -6
                                                   :where
                                                   (-3 -10))))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -6)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand*
                                                         "check_for_exception_final"
                                                         "check_for_exception")
                                                        (("1"
                                                          (use
                                                           "inline_related_states_implies_same_exception")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -7)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "b(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "wf_Body_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")))
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (copy -7)
                                              (("1"
                                                (inst
                                                 -1
                                                 "(m1!1, m1!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -1
                                                       :where
                                                       (-4 -12))))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (use
                                                             "inline_related_states_implies_same_exception")
                                                            (("1"
                                                              (expand*
                                                               "check_for_exception_final"
                                                               "check_for_exception")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -7)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (inst
                                                                       -13
                                                                       "(m2!1, m2!2)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -13
                                                                             :where
                                                                             (-3
                                                                              -18))))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -13)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "inline_related_states_implies_same_exception")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -7)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "subterm_subset_of_var"
                                                                                   ("b2"
                                                                                    "b2(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                               ("b2"
                                                                                "b2(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -17)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (then
                                                            (use
                                                             "subterm_subset_of_var"
                                                             ("b2"
                                                              "b1(b!1)"
                                                              "b1"
                                                              "b!1"))
                                                            (assert)
                                                            (expand
                                                             "<<")))
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "wf_Body_preserved_by_proper_subterm"
                                                         ("b2"
                                                          "b1(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (use
                                                   "inline_program_preserves_wf_body")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (copy -7)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(m1!1, m1!2)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -1
                                                         :where
                                                         (-4 -12))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "(m2!1, m2!2)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -9
                                                                     :where
                                                                     (-6
                                                                      -14))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -9)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (use
                                                                           "inline_related_states_implies_same_exception")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand*
                                                                               "check_for_exception_final"
                                                                               "check_for_exception")
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -10)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b2"
                                                                            "b2(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "b2(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "subterm_subset_of_var"
                                                               ("b2"
                                                                "b1(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (use
                                                           "wf_Body_preserved_by_proper_subterm"
                                                           ("b2"
                                                            "b1(b!1)"
                                                            "b1"
                                                            "b!1"))
                                                          (assert)
                                                          (expand
                                                           "<<")))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "inline_program_preserves_wf_body")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (use
                                                 "inline_related_states_implies_same_lookup")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (auto-rewrite
                                                     "subset?"
                                                     "member"
                                                     "union")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -7
                                                         "varname(b!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "var_names")
                                                            (("1"
                                                              (expand
                                                               "singleton")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (use
                                                     "get_dynamic_type_name_same_in_inline_related_states")
                                                    (("1"
                                                      (use
                                                       "get_address_same_in_inline_related_states")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "ext_declared_var_names(p!1)(varname(b!1))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (auto-rewrite
                                                             "subset?"
                                                             "member"
                                                             "union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "varname(b!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "var_names")
                                                                    (("2"
                                                                      (expand
                                                                       "singleton")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst
                                                         -6
                                                         "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -6
                                                               :where
                                                               (-3
                                                                -10))))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -6)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (use
                                                                     "inline_related_states_implies_same_exception")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -7)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -13)
                                                                                (("1"
                                                                                  (replace
                                                                                   -4)
                                                                                  (("1"
                                                                                    (use
                                                                                     "inline_related_states_preserved_by_update")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (auto-rewrite
                                                                                         "subset?"
                                                                                         "member"
                                                                                         "union"
                                                                                         "singleton")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "add")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "derive_bottom_iff_exception_step_AP")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "defined?")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                           ("b2"
                                                                                            "source(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "source(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "source(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand
                                                                 "<<")))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -5
                                                               :where
                                                               (-3
                                                                -9))))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -5)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "b(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "b(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand
                                                                 "<<")))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (copy -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(m1!1, m1!2)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -1
                                                                     :where
                                                                     (-4
                                                                      -12))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand*
                                                                           "check_for_exception")
                                                                          (("1"
                                                                            (use
                                                                             "inline_related_states_implies_same_exception")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -7)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (inst
                                                                                   -11
                                                                                   "(m2!1, m2!2)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -10
                                                                                           :where
                                                                                           (-2
                                                                                            -15))))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -10)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("4"
                                                                                              (lift-if)
                                                                                              (("4"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   1)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "subterm_subset_of_var"
                                                                                                     ("b2"
                                                                                                      "then_expr(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "subterm_subset_of_var"
                                                                                                     ("b2"
                                                                                                      "else_expr(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "else_expr(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "then_expr(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b2"
                                                                            "test(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "test(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (use
                                                                 "inline_program_preserves_wf_body")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (lemma
                                                               "derive_maintains_inline_related_states_for_method_call")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p!1"
                                                                 "b!1"
                                                                 "v1!1"
                                                                 "v2!1"
                                                                 "sAP1a!1"
                                                                 "sAP1b!1"
                                                                 "sAP2a!1"
                                                                 "sAP2b!1"
                                                                 "PROJ_1(x!1)"
                                                                 "proj_2(x!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "derive"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (inst
                                                                         -11
                                                                         "(m1!3, m2!3)")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               (-3
                                                                                -4))))
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (expand
                                                                       "derive"
                                                                       1)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     (-3
                                                                      -9))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b2"
                                                                            "n(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "n(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       (-3
                                                                        -9))))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "subterm_subset_of_var"
                                                                               ("b2"
                                                                                "r(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "r(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (expand
                                                                   "execute_CaseJML")
                                                                  (("1"
                                                                    (expand
                                                                     "extend")
                                                                    (("1"
                                                                      (expand
                                                                       "id")
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -3)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -2)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -13)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -12)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("2"
                                                                                (inst
                                                                                 -12
                                                                                 "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -12
                                                                                       :where
                                                                                       (-3
                                                                                        -6))))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -12)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (auto-rewrite
                                                                                           "subset?"
                                                                                           "member"
                                                                                           "union")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "var_names"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         21)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "b!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "wf_Body")
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (auto-rewrite
                                                                                                     "subset?"
                                                                                                     "member"
                                                                                                     "union")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "subterm"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subterm"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "some_is_exists")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (inst?
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (expand
                                                                                                                 "subterm"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (rewrite
                                                                                                                   "some_is_exists")
                                                                                                                  (("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst?
                                                                                                                       3)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (copy
                                                                       -8)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "(m1!1, m1!2)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -1
                                                                               :where
                                                                               (-5
                                                                                -14))))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand*
                                                                                     "check_for_exception")
                                                                                    (("1"
                                                                                      (use
                                                                                       "inline_related_states_implies_same_exception")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -8)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("1"
                                                                                            (inst
                                                                                             -12
                                                                                             "(m2!1, m2!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -11
                                                                                                     :where
                                                                                                     (-2
                                                                                                      -17))))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -11)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (lift-if)
                                                                                                        (("4"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             1)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "subterm_subset_of_var"
                                                                                                               ("b2"
                                                                                                                "then_stmt(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")))
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "subterm_subset_of_var"
                                                                                                               ("b2"
                                                                                                                "else_stmt(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                                                         ("b2"
                                                                                                          "else_stmt(b!1)"
                                                                                                          "b1"
                                                                                                          "b!1"))
                                                                                                        (assert)
                                                                                                        (expand
                                                                                                         "<<")))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                                                         ("b2"
                                                                                                          "then_stmt(b!1)"
                                                                                                          "b1"
                                                                                                          "b!1"))
                                                                                                        (assert)
                                                                                                        (expand
                                                                                                         "<<")))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "test(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "test(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (use
                                                                           "inline_program_preserves_wf_body")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (copy
                                                                         -8)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(m1!1, m1!2)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 (-5
                                                                                  -14))))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -10
                                                                                       "(m2!1, m2!2)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -10
                                                                                             :where
                                                                                             (-8
                                                                                              -17))))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -10)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "subterm_subset_of_var"
                                                                                                   ("b2"
                                                                                                    "s2(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "s2(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "subterm_subset_of_var"
                                                                                       ("b2"
                                                                                        "s1(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "wf_Body_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "s1(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (use
                                                                             "inline_program_preserves_wf_body")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (expand
                                                                         "execute_set")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -8
                                                                             "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -8
                                                                                   :where
                                                                                   (-4
                                                                                    -13))))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -8)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (use
                                                                                         "inline_related_states_implies_same_exception")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -8)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -16)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "inline_related_states")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "derive_bottom_iff_exception_step_AP")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "b!1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wf_Body")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst?
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subterm")
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       24)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_update_GhostVars")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_ghoststate")
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "is_ghost")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "update_GhostVars")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "defined?")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "update_store")
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "wf_update_GhostVars")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "wf_ghoststate")
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "is_ghost")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "update_GhostVars")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "defined?")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "update_store")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "inline_program_preserves_Ghost_decls")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (prop)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (expand
                                                                                                                         "Program_modeled?")
                                                                                                                        (("3"
                                                                                                                          (flatten)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "update_GhostVars")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Program_lvs_modeled?")
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (expand
                                                                                                                         "return_of_stmt")
                                                                                                                        (("4"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                                             ("b2"
                                                                                                              "source(b!1)"
                                                                                                              "b1"
                                                                                                              "b!1"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "subterm_subset_of_var"
                                                                                         ("b2"
                                                                                          "source(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "source(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (expand
                                                                           "return_of_stmt")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -6
                                                                                     :where
                                                                                     (-4
                                                                                      -11))))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (use
                                                                                             "inline_related_states_implies_same_exception")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "return_of_stmt")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     -6)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b2"
                                                                                            "expr(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                       ("b2"
                                                                                        "expr(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (replace
                                                                                 -11)
                                                                                (("1"
                                                                                  (use
                                                                                   "inline_related_states_preserved_by_raise")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "return_of_stmt")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "raise")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (copy
                                                                                   -11)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "(m1!1, m1!2)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           (-5
                                                                                            -17))))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "inline_related_states_implies_same_exception")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (branch
                                                                                                      (split
                                                                                                       -9)
                                                                                                      ((then
                                                                                                        (flatten)
                                                                                                        (assert)
                                                                                                        (flatten)
                                                                                                        (assert)))))
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -17)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "(m2!1, m2!2)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               (-4
                                                                                                                -25))))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -19
                                                                                                                     "(m3!1, m3!2)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -19
                                                                                                                           :where
                                                                                                                           (-15
                                                                                                                            -28))))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -19)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -19)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -31)
                                                                                                                                    (("1"
                                                                                                                                      (use
                                                                                                                                       "inline_related_states_implies_same_exception")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (branch
                                                                                                                                                  (split
                                                                                                                                                   -14)
                                                                                                                                                  ((then
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)))))
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   27)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "inline_related_states")
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (use
                                                                                                                                                         "wf_update_PState")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "wf_state")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "is_field")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_local")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("3"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("4"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (use
                                                                                                                                                         "wf_update_PState")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "wf_state")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "is_field")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "is_local")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (expand
                                                                                                                                                         "Program_modeled?")
                                                                                                                                                        (("3"
                                                                                                                                                          (expand
                                                                                                                                                           "Program_lvs_modeled?")
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "update_PState")
                                                                                                                                                            (("3"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "return_of_stmt")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "update_PState")
                                                                                                                                                      (("2"
                                                                                                                                                        (use
                                                                                                                                                         "inline_related_states_implies_same_exception"
                                                                                                                                                         ("sAP1"
                                                                                                                                                          "tau2!1"
                                                                                                                                                          "sAP2"
                                                                                                                                                          "tau2!2"))
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (branch
                                                                                                                                                                (split
                                                                                                                                                                 -11)
                                                                                                                                                                ((then
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)))))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (use
                                                                                                                               "inline_related_states_preserved_by_catch")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (use
                                                                                                                                 "subterm_subset_of_var"
                                                                                                                                 ("b2"
                                                                                                                                  "finally(b!1)"
                                                                                                                                  "b1"
                                                                                                                                  "b!1"))
                                                                                                                                (assert)
                                                                                                                                (expand
                                                                                                                                 "<<")))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (use
                                                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                                                             ("b2"
                                                                                                                              "finally(b!1)"
                                                                                                                              "b1"
                                                                                                                              "b!1"))
                                                                                                                            (assert)
                                                                                                                            (expand
                                                                                                                             "<<")))
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "inline_related_states_preserved_by_catch")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (use
                                                                                                                     "subterm_subset_of_var"
                                                                                                                     ("b2"
                                                                                                                      "catch(b!1)"
                                                                                                                      "b1"
                                                                                                                      "b!1"))
                                                                                                                    (assert)
                                                                                                                    (expand
                                                                                                                     "<<")))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (then
                                                                                                                (use
                                                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                                                 ("b2"
                                                                                                                  "catch(b!1)"
                                                                                                                  "b1"
                                                                                                                  "b!1"))
                                                                                                                (assert)
                                                                                                                (expand
                                                                                                                 "<<")))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "inline_program_preserves_wf_body")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply
                                                                                                       (branch
                                                                                                        (split
                                                                                                         -22)
                                                                                                        ((then
                                                                                                          (flatten)
                                                                                                          (assert)
                                                                                                          (flatten)
                                                                                                          (assert)))))
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -17
                                                                                                         "(m3!1, m3!2)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -17
                                                                                                               :where
                                                                                                               (-13
                                                                                                                -24))))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -17)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "inline_related_states_implies_same_exception")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (branch
                                                                                                                            (split
                                                                                                                             -18)
                                                                                                                            ((then
                                                                                                                              (flatten)
                                                                                                                              (assert)
                                                                                                                              (flatten)
                                                                                                                              (assert)))))
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -28)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 29)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "inline_related_states")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "wf_update_PState")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "is_field")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "is_local")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "wf_update_PState")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "is_field")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "is_local")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (expand
                                                                                                                                         "Program_modeled?")
                                                                                                                                        (("3"
                                                                                                                                          (expand
                                                                                                                                           "Program_lvs_modeled?")
                                                                                                                                          (("3"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("3"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "return_of_stmt")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "update_PState")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (apply
                                                                                                                                         (branch
                                                                                                                                          (split
                                                                                                                                           -16)
                                                                                                                                          ((then
                                                                                                                                            (flatten)
                                                                                                                                            (assert)
                                                                                                                                            (flatten)
                                                                                                                                            (assert)))))
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "inline_related_states_preserved_by_catch")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (use
                                                                                                                     "subterm_subset_of_var"
                                                                                                                     ("b2"
                                                                                                                      "finally(b!1)"
                                                                                                                      "b1"
                                                                                                                      "b!1"))
                                                                                                                    (assert)
                                                                                                                    (expand
                                                                                                                     "<<")))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (then
                                                                                                                (use
                                                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                                                 ("b2"
                                                                                                                  "finally(b!1)"
                                                                                                                  "b1"
                                                                                                                  "b!1"))
                                                                                                                (assert)
                                                                                                                (expand
                                                                                                                 "<<")))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "try(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "try(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (use
                                                                                       "inline_program_preserves_wf_body")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -1)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -6
                                                                                         :where
                                                                                         (-4
                                                                                          -11))))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -6)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (auto-rewrite
                                                                                             "subset?"
                                                                                             "union"
                                                                                             "member")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "var_names"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "While(test(b!1), body(b!1))= b!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "var_names"
                                                                                                               -2
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "emptyset")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names"
                                                                                                                   28)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply-extensionality
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "b!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_Body")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (auto-rewrite
                                                                                                       "subset?"
                                                                                                       "union"
                                                                                                       "member"
                                                                                                       "emptyset")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "var_names"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "While(test(b!1), body(b!1))= b!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "var_names"
                                                                                                                 -2
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "var_names"
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply-extensionality
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subterm"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case-replace
                                                                                                       "While(test(b!1), body(b!1))= b!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "subterm"
                                                                                                                 -3
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "subterm"
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (apply-extensionality
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "execute_assert")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "check_assertion")
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -8
                                                                                           "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -8
                                                                                                 :where
                                                                                                 (-4
                                                                                                  -13))))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -7)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -15)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (lift-if
                                                                                                             28)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "inline_related_states_preserved_by_raise")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -14)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "return_of_stmt")
                                                                                                                          (("1"
                                                                                                                            (use
                                                                                                                             "inline_related_states_implies_same_exception")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (use
                                                                                                                                     "inline_related_states_implies_same_exception")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "subterm_subset_of_var"
                                                                                                     ("b2"
                                                                                                      "expr(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "<<")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                                 ("b2"
                                                                                                  "expr(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "<<")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (use "inline_program_preserves_wf_body") nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "well_founded?_product")
      (("2"
        (inst -1 "LAMBDA(i, j : nat) : i < j"
         "LAMBDA(i, j : nat) : i < j")
        (("2" (assert)
          (("2" (split -1)
            (("1" (use "wf_nat") nil nil) ("2" (use "wf_nat") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (inline_related_states const-decl "boolean" InlineEquivalence nil)
    (derive def-decl "bool" Semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil CorrectnessInlineProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                       OR Const?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (p!1 skolem-const-decl "(wf_set_stmts)" CorrectnessInlineProgram
     nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                       OR Const?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (b!1 skolem-const-decl "(wf_Body(p!1))" CorrectnessInlineProgram
     nil)
    (inline_program_preserves_wf_body formula-decl nil
     InlineProgramAnnotationProperties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (inline_related_states_preserved_by_update formula-decl nil
     InlineRelatedStatesProperties nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (v2!1 skolem-const-decl "Val[Name]" CorrectnessInlineProgram nil)
    (add const-decl "(nonempty?)" sets nil)
    (derive_bottom_iff_exception_step_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (v1!3 skolem-const-decl "Val[Name]" CorrectnessInlineProgram nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (extend const-decl "R" extend nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (union const-decl "set" sets nil)
    (member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (inline_related_states_preserved_by_raise formula-decl nil
     InlineRelatedStatesProperties nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch const-decl "PState" State nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (inline_related_states_preserved_by_catch formula-decl nil
     InlineRelatedStatesProperties nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                    OR Const?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (return_of_stmt const-decl "Val" Semantics nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (inline_program_preserves_Ghost_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (id_preserves application-judgement "S" identity_props nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (v1!3 skolem-const-decl "Val[Name]" CorrectnessInlineProgram nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (derive_maintains_inline_related_states_for_method_call
     formula-decl nil CorrectnessInlineProgram nil)
    (get_dynamic_type_name_same_in_inline_related_states formula-decl
     nil InlineRelatedStatesProperties nil)
    (get_address_same_in_inline_related_states formula-decl nil
     InlineRelatedStatesProperties nil)
    (inline_related_states_implies_same_lookup formula-decl nil
     InlineRelatedStatesProperties nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (varname shared-adt-accessor-decl
     "[{x: Body | RefVarEval?(x) OR BoolVarEval?(x) OR NumVarEval?(x)} -> Name]"
     Body_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (inline_related_states_implies_same_exception formula-decl nil
     InlineRelatedStatesProperties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (well_founded?_product formula-decl nil WF nil))
   780753 66930 t nil)
  (derive_maintains_inline_related_states_for_unchanged_program-1 nil
   3409050897 3410871708
   (""
    (lemma
     "wf_induction[[nat, nat], LAMBDA(i, j : [nat, nat]) : proj_1(i) < proj_1(j) AND proj_2(i) < proj_2(j)]")
    (("1" (auto-rewrite "id")
      (("1"
        (inst -1
         "LAMBDA(x : [nat, nat]) : FORALL (p: Program[Name], b: (wf_Body(p)), v1, v2: Val)
             (sAP1a, sAP1b, sAP2a, sAP2b: APState) :
        subset?(var_names(b), ext_declared_var_names(p)) IMPLIES
         inline_related_states(p)(sAP1a, sAP2a) IMPLIES
          derive(p)(b, sAP1a, v1, sAP1b)(proj_1(x)) IMPLIES
           derive(inline_program(p))(b, sAP2a, v2, sAP2b)(proj_2(x)) IMPLIES
            inline_related_states(p)(sAP1b, sAP2b) AND v1 = v2")
        (("1" (split -1)
          (("1" (skosimp*)
            (("1" (inst -1 "(n1!1, n2!1)")
              (("1" (apply (repeat (inst? -1)))
                (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "derive" -4)
                (("2" (expand "derive" -5)
                  (("2" (assert)
                    (("2"
                      (use "inline_related_states_implies_same_exception")
                      (("2" (assert)
                        (("2"
                          (apply (branch
                                  (split -5)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                          (("2" (lift-if)
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (copy -7)
                                    (("1"
                                      (inst -1 "(m1!1, m1!2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -8 "(m2!1, m2!2)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst?
                                                 -1
                                                 :where
                                                 (-4 -12))))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -9
                                                         :where
                                                         (-6 -14))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -9)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception_final")
                                                                (("1"
                                                                  (expand
                                                                   "check_for_exception")
                                                                  (("1"
                                                                    (use
                                                                     "inline_related_states_implies_same_exception")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -10)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "subterm_subset_of_var"
                                                             ("b2"
                                                              "b2(b!1)"
                                                              "b1"
                                                              "b!1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "<<")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "wf_Body_preserved_by_proper_subterm"
                                                         ("b1"
                                                          "b!1"
                                                          "b2"
                                                          "b2(b!1)"))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "<<")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b2"
                                                        "b1(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (use
                                                   "wf_Body_preserved_by_proper_subterm"
                                                   ("b1"
                                                    "b!1"
                                                    "b2"
                                                    "b1(b!1)"))
                                                  (assert)
                                                  (expand "<<")))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (use
                                         "inline_program_preserves_wf_body")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                                  (("1"
                                    (use
                                     "inline_related_states_implies_same_lookup")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (auto-rewrite
                                         "subset?"
                                         "union"
                                         "member")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -7 "varname(b!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "var_names" 5)
                                                (("1"
                                                  (expand "singleton")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst
                                             -6
                                             "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -6
                                                   :where
                                                   (-3 -10))))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -6)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand*
                                                         "check_for_exception_final"
                                                         "check_for_exception")
                                                        (("1"
                                                          (use
                                                           "inline_related_states_implies_same_exception")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -7)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "b(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "wf_Body_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")))
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (copy -7)
                                              (("1"
                                                (inst
                                                 -1
                                                 "(m1!1, m1!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -1
                                                       :where
                                                       (-4 -12))))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (use
                                                             "inline_related_states_implies_same_exception")
                                                            (("1"
                                                              (expand*
                                                               "check_for_exception_final"
                                                               "check_for_exception")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -7)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (inst
                                                                       -13
                                                                       "(m2!1, m2!2)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -13
                                                                             :where
                                                                             (-3
                                                                              -18))))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -13)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "inline_related_states_implies_same_exception")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -7)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "subterm_subset_of_var"
                                                                                   ("b2"
                                                                                    "b2(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                               ("b2"
                                                                                "b2(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -17)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (then
                                                            (use
                                                             "subterm_subset_of_var"
                                                             ("b2"
                                                              "b1(b!1)"
                                                              "b1"
                                                              "b!1"))
                                                            (assert)
                                                            (expand
                                                             "<<")))
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "wf_Body_preserved_by_proper_subterm"
                                                         ("b2"
                                                          "b1(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (use
                                                   "inline_program_preserves_wf_body")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (copy -7)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(m1!1, m1!2)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -1
                                                         :where
                                                         (-4 -12))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "(m2!1, m2!2)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -9
                                                                     :where
                                                                     (-6
                                                                      -14))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -9)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (use
                                                                           "inline_related_states_implies_same_exception")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand*
                                                                               "check_for_exception_final"
                                                                               "check_for_exception")
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -10)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b2"
                                                                            "b2(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "b2(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "subterm_subset_of_var"
                                                               ("b2"
                                                                "b1(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (use
                                                           "wf_Body_preserved_by_proper_subterm"
                                                           ("b2"
                                                            "b1(b!1)"
                                                            "b1"
                                                            "b!1"))
                                                          (assert)
                                                          (expand
                                                           "<<")))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "inline_program_preserves_wf_body")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (use
                                                 "inline_related_states_implies_same_lookup")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (auto-rewrite
                                                     "subset?"
                                                     "member"
                                                     "union")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -7
                                                         "varname(b!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "var_names")
                                                            (("1"
                                                              (expand
                                                               "singleton")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (use
                                                     "get_dynamic_type_name_same_in_inline_related_states")
                                                    (("1"
                                                      (use
                                                       "get_address_same_in_inline_related_states")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "ext_declared_var_names(p!1)(varname(b!1))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (auto-rewrite
                                                             "subset?"
                                                             "member"
                                                             "union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "varname(b!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "var_names")
                                                                    (("2"
                                                                      (expand
                                                                       "singleton")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst
                                                         -6
                                                         "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -6
                                                               :where
                                                               (-3
                                                                -10))))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -6)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (use
                                                                     "inline_related_states_implies_same_exception")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -7)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -13)
                                                                                (("1"
                                                                                  (replace
                                                                                   -4)
                                                                                  (("1"
                                                                                    (use
                                                                                     "inline_related_states_preserved_by_update")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (auto-rewrite
                                                                                         "subset?"
                                                                                         "member"
                                                                                         "union"
                                                                                         "singleton")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "add")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "derive_bottom_iff_exception_step_AP")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "defined?")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                           ("b2"
                                                                                            "source(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "source(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "source(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand
                                                                 "<<")))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -5
                                                               :where
                                                               (-3
                                                                -9))))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -5)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "b(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "b(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand
                                                                 "<<")))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (copy -7)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(m1!1, m1!2)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -1
                                                                     :where
                                                                     (-4
                                                                      -12))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand*
                                                                           "check_for_exception")
                                                                          (("1"
                                                                            (use
                                                                             "inline_related_states_implies_same_exception")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -7)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (inst
                                                                                   -11
                                                                                   "(m2!1, m2!2)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -10
                                                                                           :where
                                                                                           (-2
                                                                                            -15))))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -10)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("4"
                                                                                              (lift-if)
                                                                                              (("4"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   1)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "subterm_subset_of_var"
                                                                                                     ("b2"
                                                                                                      "then_expr(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "subterm_subset_of_var"
                                                                                                     ("b2"
                                                                                                      "else_expr(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "else_expr(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "then_expr(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b2"
                                                                            "test(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "test(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (use
                                                                 "inline_program_preserves_wf_body")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (lemma
                                                               "derive_maintains_inline_related_states_for_method_call")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p!1"
                                                                 "b!1"
                                                                 "v1!1"
                                                                 "v2!1"
                                                                 "sAP1a!1"
                                                                 "sAP1b!1"
                                                                 "sAP2a!1"
                                                                 "sAP2b!1"
                                                                 "PROJ_1(x!1)"
                                                                 "proj_2(x!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "derive"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (inst
                                                                         -11
                                                                         "(m1!3, m2!3)")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               (-3
                                                                                -4))))
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (expand
                                                                       "derive"
                                                                       1)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "p!1")
                                                                  (("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     (-3
                                                                      -9))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b2"
                                                                            "n(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "n(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       (-3
                                                                        -9))))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "subterm_subset_of_var"
                                                                               ("b2"
                                                                                "r(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "r(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (expand
                                                                   "execute_CaseJML")
                                                                  (("1"
                                                                    (expand
                                                                     "extend")
                                                                    (("1"
                                                                      (expand
                                                                       "id")
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -3)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -2)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -13)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -12)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("2"
                                                                                (inst
                                                                                 -12
                                                                                 "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -12
                                                                                       :where
                                                                                       (-3
                                                                                        -6))))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -12)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (auto-rewrite
                                                                                           "subset?"
                                                                                           "member"
                                                                                           "union")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "var_names"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         21)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "b!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "wf_Body")
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (auto-rewrite
                                                                                                     "subset?"
                                                                                                     "member"
                                                                                                     "union")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "subterm"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subterm"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "some_is_exists")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (inst?
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (expand
                                                                                                                 "subterm"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (rewrite
                                                                                                                   "some_is_exists")
                                                                                                                  (("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst?
                                                                                                                       3)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (copy
                                                                       -8)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "(m1!1, m1!2)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -1
                                                                               :where
                                                                               (-5
                                                                                -14))))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand*
                                                                                     "check_for_exception")
                                                                                    (("1"
                                                                                      (use
                                                                                       "inline_related_states_implies_same_exception")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -8)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("1"
                                                                                            (inst
                                                                                             -12
                                                                                             "(m2!1, m2!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -11
                                                                                                     :where
                                                                                                     (-2
                                                                                                      -17))))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -11)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (lift-if)
                                                                                                        (("4"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             1)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "subterm_subset_of_var"
                                                                                                               ("b2"
                                                                                                                "then_stmt(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")))
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "subterm_subset_of_var"
                                                                                                               ("b2"
                                                                                                                "else_stmt(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                                                         ("b2"
                                                                                                          "else_stmt(b!1)"
                                                                                                          "b1"
                                                                                                          "b!1"))
                                                                                                        (assert)
                                                                                                        (expand
                                                                                                         "<<")))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                                                         ("b2"
                                                                                                          "then_stmt(b!1)"
                                                                                                          "b1"
                                                                                                          "b!1"))
                                                                                                        (assert)
                                                                                                        (expand
                                                                                                         "<<")))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "test(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "test(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (use
                                                                           "inline_program_preserves_wf_body")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (copy
                                                                         -8)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(m1!1, m1!2)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 (-5
                                                                                  -14))))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -10
                                                                                       "(m2!1, m2!2)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -10
                                                                                             :where
                                                                                             (-8
                                                                                              -17))))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -10)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "subterm_subset_of_var"
                                                                                                   ("b2"
                                                                                                    "s2(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "s2(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "subterm_subset_of_var"
                                                                                       ("b2"
                                                                                        "s1(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "wf_Body_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "s1(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (use
                                                                             "inline_program_preserves_wf_body")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (expand
                                                                         "execute_set")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -8
                                                                             "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -8
                                                                                   :where
                                                                                   (-4
                                                                                    -13))))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -8)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (use
                                                                                         "inline_related_states_implies_same_exception")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -8)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -16)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "inline_related_states")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "derive_bottom_iff_exception_step_AP")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "b!1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wf_Body")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst?
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subterm")
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       24)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_update_GhostVars")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_ghoststate")
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "is_ghost")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "update_GhostVars")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "defined?")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "update_store")
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "wf_update_GhostVars")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "wf_ghoststate")
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "is_ghost")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "update_GhostVars")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "defined?")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "update_store")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "inline_program_preserves_Ghost_decls")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (prop)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (expand
                                                                                                                         "Program_modeled?")
                                                                                                                        (("3"
                                                                                                                          (flatten)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "update_GhostVars")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Program_lvs_modeled?")
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (expand
                                                                                                                         "return_of_stmt")
                                                                                                                        (("4"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                                             ("b2"
                                                                                                              "source(b!1)"
                                                                                                              "b1"
                                                                                                              "b!1"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "subterm_subset_of_var"
                                                                                         ("b2"
                                                                                          "source(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "source(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (expand
                                                                           "return_of_stmt")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -6
                                                                                     :where
                                                                                     (-4
                                                                                      -11))))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (use
                                                                                             "inline_related_states_implies_same_exception")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "return_of_stmt")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     -6)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b2"
                                                                                            "expr(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                       ("b2"
                                                                                        "expr(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (replace
                                                                                 -11)
                                                                                (("1"
                                                                                  (use
                                                                                   "inline_related_states_preserved_by_raise")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "return_of_stmt")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "raise")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (copy
                                                                                   -11)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "(m1!1, m1!2)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           (-5
                                                                                            -17))))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "inline_related_states_implies_same_exception")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (branch
                                                                                                      (split
                                                                                                       -9)
                                                                                                      ((then
                                                                                                        (flatten)
                                                                                                        (assert)
                                                                                                        (flatten)
                                                                                                        (assert)))))
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -17)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "(m2!1, m2!2)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               (-4
                                                                                                                -25))))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -19
                                                                                                                     "(m3!1, m3!2)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -19
                                                                                                                           :where
                                                                                                                           (-15
                                                                                                                            -28))))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -19)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -19)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -31)
                                                                                                                                    (("1"
                                                                                                                                      (use
                                                                                                                                       "inline_related_states_implies_same_exception")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (branch
                                                                                                                                                  (split
                                                                                                                                                   -14)
                                                                                                                                                  ((then
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)))))
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   27)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "inline_related_states")
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (use
                                                                                                                                                         "wf_update_PState")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "wf_state")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "is_field")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_local")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("3"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("4"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (use
                                                                                                                                                         "wf_update_PState")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "wf_state")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "is_field")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "is_local")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (expand
                                                                                                                                                         "Program_modeled?")
                                                                                                                                                        (("3"
                                                                                                                                                          (expand
                                                                                                                                                           "Program_lvs_modeled?")
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "update_PState")
                                                                                                                                                            (("3"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "return_of_stmt")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "update_PState")
                                                                                                                                                      (("2"
                                                                                                                                                        (use
                                                                                                                                                         "inline_related_states_implies_same_exception"
                                                                                                                                                         ("sAP1"
                                                                                                                                                          "tau2!1"
                                                                                                                                                          "sAP2"
                                                                                                                                                          "tau2!2"))
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (branch
                                                                                                                                                                (split
                                                                                                                                                                 -11)
                                                                                                                                                                ((then
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)))))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (use
                                                                                                                               "inline_related_states_preserved_by_catch")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (use
                                                                                                                                 "subterm_subset_of_var"
                                                                                                                                 ("b2"
                                                                                                                                  "finally(b!1)"
                                                                                                                                  "b1"
                                                                                                                                  "b!1"))
                                                                                                                                (assert)
                                                                                                                                (expand
                                                                                                                                 "<<")))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (use
                                                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                                                             ("b2"
                                                                                                                              "finally(b!1)"
                                                                                                                              "b1"
                                                                                                                              "b!1"))
                                                                                                                            (assert)
                                                                                                                            (expand
                                                                                                                             "<<")))
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "inline_related_states_preserved_by_catch")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (use
                                                                                                                     "subterm_subset_of_var"
                                                                                                                     ("b2"
                                                                                                                      "catch(b!1)"
                                                                                                                      "b1"
                                                                                                                      "b!1"))
                                                                                                                    (assert)
                                                                                                                    (expand
                                                                                                                     "<<")))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (then
                                                                                                                (use
                                                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                                                 ("b2"
                                                                                                                  "catch(b!1)"
                                                                                                                  "b1"
                                                                                                                  "b!1"))
                                                                                                                (assert)
                                                                                                                (expand
                                                                                                                 "<<")))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "inline_program_preserves_wf_body")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply
                                                                                                       (branch
                                                                                                        (split
                                                                                                         -22)
                                                                                                        ((then
                                                                                                          (flatten)
                                                                                                          (assert)
                                                                                                          (flatten)
                                                                                                          (assert)))))
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -17
                                                                                                         "(m3!1, m3!2)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -17
                                                                                                               :where
                                                                                                               (-13
                                                                                                                -24))))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -17)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "inline_related_states_implies_same_exception")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (branch
                                                                                                                            (split
                                                                                                                             -18)
                                                                                                                            ((then
                                                                                                                              (flatten)
                                                                                                                              (assert)
                                                                                                                              (flatten)
                                                                                                                              (assert)))))
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -28)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 29)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "inline_related_states")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "wf_update_PState")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "is_field")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "is_local")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "wf_update_PState")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "is_field")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "is_local")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (expand
                                                                                                                                         "Program_modeled?")
                                                                                                                                        (("3"
                                                                                                                                          (expand
                                                                                                                                           "Program_lvs_modeled?")
                                                                                                                                          (("3"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("3"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "return_of_stmt")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "update_PState")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (apply
                                                                                                                                         (branch
                                                                                                                                          (split
                                                                                                                                           -16)
                                                                                                                                          ((then
                                                                                                                                            (flatten)
                                                                                                                                            (assert)
                                                                                                                                            (flatten)
                                                                                                                                            (assert)))))
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "inline_related_states_preserved_by_catch")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (use
                                                                                                                     "subterm_subset_of_var"
                                                                                                                     ("b2"
                                                                                                                      "finally(b!1)"
                                                                                                                      "b1"
                                                                                                                      "b!1"))
                                                                                                                    (assert)
                                                                                                                    (expand
                                                                                                                     "<<")))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (then
                                                                                                                (use
                                                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                                                 ("b2"
                                                                                                                  "finally(b!1)"
                                                                                                                  "b1"
                                                                                                                  "b!1"))
                                                                                                                (assert)
                                                                                                                (expand
                                                                                                                 "<<")))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "try(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "try(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (use
                                                                                       "inline_program_preserves_wf_body")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -1)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -6
                                                                                         :where
                                                                                         (-4
                                                                                          -11))))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -6)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (auto-rewrite
                                                                                             "subset?"
                                                                                             "union"
                                                                                             "member")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "var_names"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "While(test(b!1), body(b!1))= b!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "var_names"
                                                                                                               -2
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "emptyset")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names"
                                                                                                                   28)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply-extensionality
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "b!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_Body")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (auto-rewrite
                                                                                                       "subset?"
                                                                                                       "union"
                                                                                                       "member"
                                                                                                       "emptyset")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "var_names"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "While(test(b!1), body(b!1))= b!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "var_names"
                                                                                                                 -2
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "var_names"
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply-extensionality
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subterm"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case-replace
                                                                                                       "While(test(b!1), body(b!1))= b!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "subterm"
                                                                                                                 -3
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "subterm"
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (apply-extensionality
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "execute_assert")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "check_assertion")
                                                                                    (("2"
                                                                                      (case
                                                                                       " inline_related_states(p!1)(sAP1b!1, sAP2b!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "inline_related_states_implies_same_exception")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "return_of_stmt")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (use "inline_program_preserves_wf_body") nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "well_founded?_product")
      (("2"
        (inst -1 "LAMBDA(i, j : nat) : i < j"
         "LAMBDA(i, j : nat) : i < j")
        (("2" (assert)
          (("2" (split -1)
            (("1" (use "wf_nat") nil nil) ("2" (use "wf_nat") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 354027 62780 t shostak))
 (correctness_of_inline_program 0
  (correctness_of_inline_program-1 nil 3409049685 3409058038
   ("" (skosimp*)
    (("" (expand "run_annotated_program")
      (("" (expand "run_FullProgram")
        (("" (expand "derives")
          (("" (skosimp*)
            ((""
              (auto-rewrite "subset?" "member" "union" "var_names"
                            "singleton" "emptyset" "subterm"
                            "ext_declared_var_names")
              ((""
                (use "derive_maintains_inline_related_states_for_unchanged_program")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (use "initial_states_are_equivalent") nil
                      nil)
                     ("2" (skosimp*) nil nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "wf_Body")
                    (("2" (split 1)
                      (("1" (skosimp*) (("1" (assert) nil nil)) nil)
                       ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil)
    (derives const-decl "bool" Semantics nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (initial_states_are_equivalent formula-decl nil
     CorrectnessInlineProgram nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Body_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (This const-decl "Name" Program nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Body_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Body_adt
     nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil CorrectnessInlineProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_maintains_inline_related_states_for_unchanged_program
     formula-decl nil CorrectnessInlineProgram nil)
    (run_FullProgram const-decl "boolean" Semantics nil))
   5332 2490 t shostak)))

