WellBehavedMVA [CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING AnnotatedProgramSemantics[Name],
            MVAMonitoring[CP, Name],
            MVACommonSemantics[CP, Name]

  mva : VAR (wf_MVA)

  % Every guard of the MVA is translated into an expression that
  % evaluates to the same result. Evaluation of the expression can not
  % result in an exception (v would be Bottom).
  % Furthermore, the evaluation must have no side-effects.
  guard_to_expression_behavior(mva)(stA : [APState -> Store]) : boolean =
    FORALL (t : Transition, p : Program, s : APState, arg : ValOrExcpt,
            v : (Bool?), n : nat) :
      LET e = guard_to_expression(mva)(guard(t)) IN
        ts(mva)(t) IMPLIES % t transition in MVA
        wf_Expr(p)(e(arg)) IMPLIES % e wellformed wrt p
        wf_state(p)(s) IMPLIES % s good
        NOT up?(ex(pstate(s))) IMPLIES % and non-exceptional state
          derive(p)(e(arg), s, v, s)(n) AND % evaluation of e does not 
                                            % have side effects
          v = Bool(guard(t)(stA(s), fvs(st(pstate(s))), arg))
              % evaluation of expression returns value of guard


  % Evaluation of expressions appearing in actions terminate
  % and is side-effect-free (and thus does not throw an exception)
  eval_action_behavior(mva) (stA : [APState -> Store]) : boolean =
    FORALL(t : Transition, oa : OneAction, v : Val, p : Program, 
           s : APState) :
      ts(mva)(t) IMPLIES % t transition in MVA
      member(oa, action(t)) IMPLIES % oa single action in t        
      wf_state(p)(s) IMPLIES % s good and
      NOT up?(ex(pstate(s))) IMPLIES % non-exceptional state
      wf_Expr(p)(source(oa)) IMPLIES % all variables used in source(oa) 
                                     % declared in p
        EXISTS (n : nat) : 
          derive(p)(source(oa), s, 
                    eval(source(oa))(stA(s), fvs(st(pstate(s)))), s)(n)
          % derivation without side effect
          % returns value that is the same as evaluation of source(oa) in 
          % the automaton

  well_behaved_MVA(mva)(stA : [APState -> Store]) : boolean =
    guard_to_expression_behavior(mva)(stA) AND
    eval_action_behavior(mva)(stA) 

  IMPORTING MVACompletion[CP, Name]

  well_behaved_MVA_preserved_by_complete : LEMMA
    FORALL(mva : (partial), stA : [APState -> Store]) :
    well_behaved_MVA(mva)(stA) IMPLIES
        well_behaved_MVA(complete_MVA(mva))(stA)

END WellBehavedMVA

%   % Every guard of the MVA is translated into an expression that
%   % evaluates to the same result. Evaluation of the expression can not
%   % result in an exception (v would be Bottom).
%   % Furthermore, the evaluation must have no side-effects.
%   guard_to_expression_behavior(mp) : boolean =
%     FORALL (t : Transition, sMP : MPState) :
%       wf_state(mp)(sMP) IMPLIES % sMP good 
%       NOT up?(ex(pstate(sMP))) IMPLIES % and non-exceptional state
%       ts(mva(mp))(t) IMPLIES % t transition in MVA
%       scp(t) = cp(astate(sMP)) IMPLIES % transition applies to this state
%         EXISTS (e : [ValOrExcpt -> Expr], v : (Bool?), n : nat) : 
%           guard_to_expression(mva(mp))(guard(t)) = e AND 
%                                       % guard translates to expression e
%           FORALL(arg : ValOrExcpt) :
%           wf_Expr(program(mp))(e(arg)) AND  % e wellformed
%           derive(mp)(e(arg), sMP, v, sMP)(n) AND % evaluation of e does not 
%                                                  % have side effects
%           v = Bool(guard(t)(stA(astate(sMP)), fvs(st(pstate(sMP))), arg))
%           % evaluation of expression returns value of guard


%   % Evaluation of expressions appearing in actions terminate
%   % and is side-effect-free (and thus does not throw an exception)
%   eval_action_behavior(mp) : boolean =
%     FORALL (e : Expr, v : Val, sMP : MPState) :
%       wf_state(mp)(sMP) IMPLIES % sMP good and
%       NOT up?(ex(pstate(sMP))) IMPLIES % non-exceptional state
%         EXISTS (n : nat) : 
%           derive(mp)(e, sMP, 
%                      eval(e)(stA(astate(sMP)), fvs(st(pstate(sMP)))),
%                      sMP)(n)
%           % derivation without side effect
%           % returns value that is the same as evaluation of e in 
%           % the automaton
