(InlineVariableNames)
(InlineNewVariableDeclarations
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157570 3412931804
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineNewVariableDeclarations
     nil))
   751 740 t nil))
 (res_TCC1 0
  (res_TCC1-1 nil 3412931789 3412934545
   ("" (use "name_of_exists")
    (("" (skosimp*) (("" (inst?) nil nil)) nil)) nil)
   proved
   ((Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl
     "[p: Program -> [Method[Name] -> (legal_names(p))]]"
     InlineNewVariableDeclarations nil)
    (name_of_exists formula-decl nil InlineNewVariableDeclarations
     nil))
   24897 1240 t nil))
 (new_lvars_TCC1 0
  (new_lvars_TCC1-1 nil 3412931789 3412934602
   ("" (skosimp*)
    (("" (typepred "methods(p!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(lv : ({lv: LocalVarDecl[Name] |
                       EXISTS (m: Method[Name]):
                         methods[Name](p!1)(m) AND
                          lv = new_res_lvar(p!1, m)})) : f!1(choose({m: Method[Name] |
                         methods[Name](p!1)(m) AND
                          lv = new_res_lvar(p!1, m)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "lv!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (lv!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_res_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_res_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (x2!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_res_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "Program[Name]"
     InlineNewVariableDeclarations nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (nonempty? const-decl "bool" sets nil))
   50003 1420 t nil))
 (new_res_lvar_new_lvar 0
  (new_res_lvar_new_lvar-1 nil 3407161315 3412931807
   ("" (skosimp*)
    (("" (expand "new_lvars")
      (("" (expand "union")
        (("" (flatten)
          (("" (expand "member")
            (("" (expand "new_res_lvars") (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil))
   781 740 t shostak))
 (new_lvars_not_field_decls 0
  (new_lvars_not_field_decls-1 nil 3407217366 3412934677
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "intersection" "member" "union"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (assert)
              (("" (expand "var_names" -1)
                (("" (skosimp*)
                  (("" (expand "new_res_lvar")
                    (("" (replace -2 :hide? t)
                      (("" (assert)
                        (("" (typepred "res(p!1)(m!1)")
                          (("" (expand "legal_names")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (expand "declared_var_names")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   56483 850 t shostak))
 (new_lvars_not_ghost_decls 0
  (new_lvars_not_ghost_decls-1 nil 3407217797 3412934698
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "intersection" "member" "union"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (assert)
              (("" (expand "var_names" -1)
                (("" (skosimp*)
                  (("" (expand "new_res_lvar")
                    (("" (replace -2 :hide? t)
                      (("" (assert)
                        (("" (typepred "res(p!1)(m!1)")
                          (("" (expand "legal_names")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (expand "declared_var_names")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   17906 850 t shostak))
 (new_lvars_not_old_local_decls 0
  (new_lvars_not_old_local_decls-1 nil 3407217824 3412934718
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "intersection" "member" "union"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (assert)
              (("" (expand "var_names" -1)
                (("" (skosimp*)
                  (("" (expand "new_res_lvar")
                    (("" (replace -2 :hide? t)
                      (("" (assert)
                        (("" (typepred "res(p!1)(m!1)")
                          (("" (expand "legal_names")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (expand "declared_var_names")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   17330 850 t nil))
 (new_lvars_not_reserved_words 0
  (new_lvars_not_reserved_words-1 nil 3407218472 3412934736
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "union" "member" "intersection"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (assert)
              (("" (expand "var_names")
                (("" (skosimp*)
                  (("" (replace -2)
                    (("" (expand "new_res_lvar")
                      (("" (assert)
                        (("" (typepred "res(p!1)(m!1)")
                          (("" (expand "legal_names")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   13615 850 t shostak))
 (new_vars_not_ext_declared_var_names 0
  (new_vars_not_ext_declared_var_names-1 nil 3407217832 3412934786
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (use "new_lvars_not_old_local_decls")
        (("" (use "new_lvars_not_field_decls")
          (("" (use "new_lvars_not_ghost_decls")
            ((""
              (auto-rewrite "disjoint?" "union" "member" "intersection"
                            "empty?")
              (("" (assert)
                (("" (skosimp*)
                  (("" (apply (repeat (inst?)))
                    (("" (assert)
                      (("" (expand "new_lvars")
                        (("" (assert)
                          (("" (hide-all-but (-1 -2))
                            (("" (expand "var_names")
                              ((""
                                (skosimp*)
                                ((""
                                  (replace -2)
                                  ((""
                                    (expand "new_res_lvar")
                                    ((""
                                      (assert)
                                      ((""
                                        (typepred "res(p!1)(m!1)")
                                        ((""
                                          (expand "legal_names")
                                          ((""
                                            (assert)
                                            ((""
                                              (expand "reserved_words")
                                              (("" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (new_lvars_not_field_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (new_lvars_not_ghost_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_lvars_not_old_local_decls formula-decl nil
     InlineNewVariableDeclarations nil))
   46323 1250 t shostak))
 (new_lvars_not_ext_declared_var_names 0
  (new_lvars_not_ext_declared_var_names-1 nil 3407218547 3412931813
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (use "new_lvars_not_old_local_decls")
        (("" (use "new_lvars_not_field_decls")
          (("" (use "new_lvars_not_ghost_decls")
            (("" (use "new_lvars_not_reserved_words")
              ((""
                (auto-rewrite "disjoint?" "union" "member"
                              "intersection" "empty?")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (apply (repeat (inst?)))
                      (("" (assert)
                        (("" (expand "reserved_words")
                          (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (new_lvars_not_field_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_lvars_not_reserved_words formula-decl nil
     InlineNewVariableDeclarations nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (new_lvars_not_ghost_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_lvars_not_old_local_decls formula-decl nil
     InlineNewVariableDeclarations nil))
   1302 1250 t shostak)))
(InlineMethodAnnotation
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157671 3412931814
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineMethodAnnotation nil))
   786 740 t nil))
 (IMP_InlineNewVariableDeclarations_TCC1 0
  (IMP_InlineNewVariableDeclarations_TCC1-1 nil 3407157671 3412931814
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineMethodAnnotation nil)) 755
   750 t nil))
 (inline_method_TCC1 0
  (inline_method_TCC1-1 nil 3407157671 3412931815
   ("" (skosimp*)
    (("" (expand "inline_method_body") (("" (propax) nil nil)) nil))
    nil)
   proved
   ((inline_method_body const-decl "Body" InlineMethodAnnotation nil))
   796 760 t nil))
 (inline_methods_TCC1 0
  (inline_methods_TCC1-1 nil 3407157671 3412931816
   ("" (skosimp*)
    (("" (typepred "ms!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                     EXISTS (n: Method[Name]):
                       ms!1(n) AND m = inline_method(p!1)(n)})) : f!1(choose({n: Method[Name] |
                       ms!1(n) AND m = inline_method(p!1)(n)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1 :where -2)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (assert) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (rewrite "nonempty_exists")
                      (("3" (typepred "x1!1")
                        (("3" (skosimp*)
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skosimp*)
                (("2" (rewrite "nonempty_exists")
                  (("2" (typepred "m!1")
                    (("2" (skosimp*)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = inline_method(p!1)(n)})"
     InlineMethodAnnotation nil)
    (n!1 skolem-const-decl "Method[Name]" InlineMethodAnnotation nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = inline_method(p!1)(n)})"
     InlineMethodAnnotation nil)
    (x2!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = inline_method(p!1)(n)})"
     InlineMethodAnnotation nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (n!1 skolem-const-decl "Method[Name]" InlineMethodAnnotation nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ms!1 skolem-const-decl "finite_set[Method[Name]]"
     InlineMethodAnnotation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (p!1 skolem-const-decl "Program[Name]" InlineMethodAnnotation nil)
    (nonempty? const-decl "bool" sets nil))
   1316 1240 t nil))
 (inline_method_name 0
  (inline_method_name-1 nil 3407157713 3412931817
   ("" (skosimp*)
    (("" (expand "inline_method") (("" (propax) nil nil)) nil)) nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 795
   730 t shostak))
 (inline_method_arg 0
  (inline_method_arg-1 nil 3407157722 3412931818
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 794
   740 nil nil))
 (inline_method_pre 0
  (inline_method_pre-1 nil 3407157724 3412931819
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 750
   740 nil nil))
 (inline_method_post 0
  (inline_method_post-1 nil 3407157727 3412931820
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 785
   750 nil nil))
 (inline_method_lvars 0
  (inline_method_lvars-1 nil 3407157730 3412931820
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 792
   750 nil nil))
 (inline_method_body 0
  (inline_method_body-1 nil 3407158189 3412931821
   ("" (skosimp*)
    (("" (expand "inline_method") (("" (propax) nil nil)) nil)) nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 791
   730 t shostak))
 (inline_method_pre_set 0
  (inline_method_pre_set-1 nil 3407157734 3412931822
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 746
   740 nil nil))
 (inline_method_post_set 0
  (inline_method_post_set-1 nil 3407157736 3412931823
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 772
   740 nil nil))
 (inline_method_exc_set 0
  (inline_method_exc_set-1 nil 3407157739 3412931824
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 778
   740 nil nil))
 (inline_method_res 0
  (inline_method_res-1 nil 3407158199 3412931824
   ("" (skosimp*)
    (("" (expand "inline_method") (("" (propax) nil nil)) nil)) nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 778
   750 t nil))
 (inline_method_res_type 0
  (inline_method_res_type-1 nil 3407157742 3412931825
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 739
   740 nil nil))
 (inline_method_wf_Body1 0
  (inline_method_wf_Body1-1 nil 3407157747 3412939640
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite-theory "InlineMethodAnnotation")
        (("" (assert)
          ((""
            (auto-rewrite "emptyset" "var_names" "union" "member" "add"
                          "singleton")
            (("" (expand* "wf_Method" "method_pred" "wf_Body")
              (("" (flatten)
                (("" (assert)
                  (("" (split 1)
                    (("1" (skosimp*)
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (inst? -7)
                            (("1" (flatten)
                              (("1"
                                (inst? -7)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst? -5) (("2" (assert) nil nil))
                            nil)
                           ("3" (inst 2 "new_res_lvar(p!1, m!1)")
                            (("3" (use "new_res_lvar_new_lvar")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "new_res_lvar")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (inst? -10) (("4" (assert) nil nil))
                            nil)
                           ("5" (inst? -8)
                            (("5" (flatten)
                              (("5"
                                (inst? -8)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("6" (inst? -9)
                            (("6" (flatten)
                              (("6"
                                (inst? -9)
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("7" (inst? -9)
                            (("7" (flatten)
                              (("7"
                                (inst? -9)
                                (("7" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst? -3)
                        (("2" (flatten)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (inst? -4)
                        (("3" (flatten)
                          (("3" (inst? -4) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skosimp*)
                      (("4" (expand "var_names" -1)
                        (("4" (expand "var_lookup")
                          (("4" (lift-if)
                            (("4" (assert)
                              (("4"
                                (inst 1 "new_res_lvar(p!1,m!1)")
                                (("4"
                                  (use "new_res_lvar_new_lvar")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (expand "new_res_lvar")
                                      (("4"
                                        (apply
                                         (branch
                                          (split -2)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (singleton const-decl "(singleton?)" sets nil)
    (Method type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (var_lookup const-decl "Expr" ProgramFunctions nil)
    (JType type-decl nil JType_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil))
   176939 3520 t shostak))
 (inline_method_wf_Body2_TCC1 0
  (inline_method_wf_Body2_TCC1-1 nil 3407157671 3412931829
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil))
   1845 1750 nil nil))
 (inline_method_wf_Body2_TCC2 0
  (inline_method_wf_Body2_TCC2-1 nil 3407157671 3412931831
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil))
   1906 1760 nil nil))
 (inline_method_wf_Body2_TCC3 0
  (inline_method_wf_Body2_TCC3-1 nil 3407157671 3412931833
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil))
   1915 1750 nil nil))
 (inline_method_wf_Body2 0
  (inline_method_wf_Body2-1 nil 3407161656 3412939454
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite-theory "InlineMethodAnnotation")
        (("" (expand* "wf_Method" "method_pred" "wf_Body")
          (("" (assert)
            ((""
              (auto-rewrite "union" "member" "add" "singleton"
                            "emptyset")
              (("" (flatten)
                (("" (assert)
                  (("" (split 1)
                    (("1" (expand "subterm" 1)
                      (("1" (flatten)
                        (("1" (case "subterm(b!1, Skip)")
                          (("1" (expand "subterm" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (assert)
                            (("2" (rewrite "subterm" -1)
                              (("2"
                                (rewrite "subterm" -1)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (inst? -6)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst? -7)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "subterm" -1)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (inst? -5)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite "subterm" -1)
                                        (("2"
                                          (rewrite "subterm" -1)
                                          (("2"
                                            (rewrite "subterm" -1)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (inst? -10)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -7)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst? -8)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite "subterm" -1)
                                    (("3"
                                      (split -1)
                                      (("1"
                                        (inst? -8)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst? -9)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (repeat
                                          (rewrite "subterm" -1)))
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (rewrite "subterm" -1)
                                    (("4"
                                      (split -1)
                                      (("1"
                                        (inst? -8)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst? -9)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (repeat
                                          (rewrite "subterm" -1)))
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst? -2)
                        (("2" (flatten)
                          (("2" (inst? -3) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (inst? -3)
                        (("3" (flatten)
                          (("3" (inst? -4) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "var_lookup")
                      (("4" (lift-if)
                        (("4" (assert)
                          (("4" (apply (repeat (rewrite "subterm" -1)))
                            (("1"
                              (apply (repeat
                                      (branch
                                       (split -1)
                                       ((then
                                         (flatten)
                                         (assert)
                                         (flatten)
                                         (assert))))))
                              nil nil)
                             ("2"
                              (apply (repeat
                                      (branch
                                       (split -1)
                                       ((then
                                         (flatten)
                                         (assert)
                                         (flatten)
                                         (assert))))))
                              (("2" (rewrite "subterm" -1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (skosimp*)
                      (("5" (rewrite "subterm" -1) nil nil)) nil)
                     ("6" (skosimp*)
                      (("6" (rewrite "subterm" -1) nil nil)) nil)
                     ("7" (skosimp*)
                      (("7" (rewrite "subterm" -1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt
     nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (BoolVarEval adt-constructor-decl "[Name -> (BoolVarEval?)]"
     Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (TryCatch adt-constructor-decl
     "[[Stmt, Excpt, Stmt, Stmt] -> (TryCatch?)]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (var_lookup const-decl "Expr" ProgramFunctions nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Body_adt
     nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Body_adt
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (injective? const-decl "bool" functions nil)
    (res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throw adt-constructor-decl "[Excpt -> (Throw?)]" Body_adt nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil))
   231787 3350 t shostak)))
(InlineClassAnnotation
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157695 3412934802
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineClassAnnotation nil))
   736 730 t nil))
 (IMP_InlineMethodAnnotation_TCC1 0
  (IMP_InlineMethodAnnotation_TCC1-1 nil 3407157695 3412934803
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineClassAnnotation nil)) 766
   740 t nil))
 (inv_inline_class 0
  (inv_inline_class-1 nil 3407162024 3412934804
   ("" (skosimp*)
    (("" (expand "inline_class") (("" (propax) nil nil)) nil)) nil)
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   768 730 t shostak))
 (FieldDecls_inline_class 0
  (FieldDecls_inline_class-1 nil 3407162032 3412934804
   (";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
    (skosimp*)
    ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
      (expand "inline_class")
      ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   732 730 nil nil))
 (GhostDecls_inline_class 0
  (GhostDecls_inline_class-1 nil 3407162037 3412934805
   (";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
    (skosimp*)
    ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
      (expand "inline_class")
      ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   761 730 nil nil))
 (name_inline_class 0
  (name_inline_class-1 nil 3407162039 3412934806
   (";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
    (skosimp*)
    ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
      (expand "inline_class")
      ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   768 730 nil nil))
 (inline_class_almost_wf_Class 0
  (inline_class_almost_wf_Class-1 nil 3407163151 3412934807
   ("" (skosimp*)
    (("" (assert)
      (("" (skosimp*)
        (("" (expand "wf_Class")
          (("" (flatten)
            (("" (expand "inline_class")
              (("" (expand "inline_methods")
                (("" (skosimp*)
                  (("" (replace -6)
                    (("" (replace -4)
                      (("" (inst -1 "n!1" "n!2")
                        (("" (assert)
                          (("" (expand "inline_method")
                            (("" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Class const-decl "boolean" WellFormedProgram nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil))
   1002 950 t shostak))
 (inline_class_inv_wf_Body1 0
  (inline_class_inv_wf_Body1-1 nil 3407162046 3412934808
   ("" (skosimp*)
    (("" (rewrite "inv_inline_class")
      (("" (assert)
        (("" (expand "wf_Body")
          (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   859 830 t shostak))
 (inline_class_inv_wf_Body2_TCC1 0
  (inline_class_inv_wf_Body2_TCC1-1 nil 3407157695 3412934809
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil))
   1505 1420 nil nil))
 (inline_class_inv_wf_Body2 0
  (inline_class_inv_wf_Body2-1 nil 3407163383 3412934810
   ("" (skosimp*)
    (("" (rewrite "inv_inline_class")
      (("" (expand "wf_Body")
        (("" (flatten) (("" (inst? -2) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   861 810 t shostak)))
(InlineProgramAnnotation
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157696 3412934819
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineProgramAnnotation nil))
   762 730 t nil))
 (IMP_InlineClassAnnotation_TCC1 0
  (IMP_InlineClassAnnotation_TCC1-1 nil 3407157696 3412934820
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineProgramAnnotation nil)) 737
   740 t nil))
 (inline_program_TCC1 0
  (inline_program_TCC1-1 nil 3407157696 3412934821
   ("" (skosimp*)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                     EXISTS (c1: Class[Name]):
                       classes(p!1)(c1) AND
                        c = inline_class[Name](p!1)(c1)})) : f!1(choose({c1: Class[Name] |
                       classes(p!1)(c1) AND
                        c = inline_class[Name](p!1)(c1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1 :where -2)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "c!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineProgramAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (c1!1 skolem-const-decl "Class[Name]" InlineProgramAnnotation nil)
    (c!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(p!1)(c1) AND c = inline_class[Name](p!1)(c1)})"
     InlineProgramAnnotation nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(p!1)(c1) AND c = inline_class[Name](p!1)(c1)})"
     InlineProgramAnnotation nil)
    (x2!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(p!1)(c1) AND c = inline_class[Name](p!1)(c1)})"
     InlineProgramAnnotation nil)
    (c1!1 skolem-const-decl "Class[Name]" InlineProgramAnnotation nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (c1!1 skolem-const-decl "Class[Name]" InlineProgramAnnotation nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "Program[Name]" InlineProgramAnnotation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (nonempty? const-decl "bool" sets nil))
   1627 1560 t nil))
 (inline_program_TCC2 0
  (inline_program_TCC2-1 nil 3407157696 3412934828
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        ((""
          (case "getFieldDecls((# classes
                                             := {c: Class[Name]
                                                 |
                                                 EXISTS
                                                 (c1: Class[Name]):
                                                 classes(p!1)(c1)
                                                 AND
                                                 c
                                                 =
                                                 inline_class[Name]
                                                 (p!1)(c1)} #)) = getFieldDecls(p!1)")
          (("1"
            (case "getGhostDecls((# classes
                                             := {c: Class[Name]
                                                 |
                                                 EXISTS
                                                 (c1: Class[Name]):
                                                 classes(p!1)(c1)
                                                 AND
                                                 c
                                                 =
                                                 inline_class[Name]
                                                 (p!1)(c1)} #)) = getGhostDecls(p!1)")
            (("1"
              (case "getLocalDecls((# classes
                                             := {c: Class[Name]
                                                 |
                                                 EXISTS
                                                 (c1: Class[Name]):
                                                 classes(p!1)(c1)
                                                 AND
                                                 c
                                                 =
                                                 inline_class[Name]
                                                 (p!1)(c1)} #)) = union(getLocalDecls(p!1), new_lvars(p!1))")
              (("1" (auto-rewrite (-1 -2 -3))
                (("1" (prop)
                  (("1" (hide-all-but (-4 1))
                    (("1" (expand "wf_program_variables_disjoint_def")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (case-replace
                               "var_names(union(getLocalDecls(p!1), new_lvars(p!1))) = union(var_names(getLocalDecls(p!1)), var_names(new_lvars(p!1)))"
                               :hide? t)
                              (("1"
                                (rewrite "disjoint?_union")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (use "new_lvars_not_field_decls")
                                    (("1"
                                      (rewrite "disjoint?_commutative")
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "disjoint?_commutative")
                                    (("2"
                                      (rewrite "disjoint?_union")
                                      (("2"
                                        (rewrite
                                         "disjoint?_commutative")
                                        (("2"
                                          (use
                                           "new_lvars_not_ghost_decls")
                                          (("2"
                                            (rewrite
                                             "disjoint?_commutative")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "var_names_union2")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-5 1))
                    (("2"
                      (expand "wf_program_variables_not_reserved_words_def")
                      (("2" (expand "declared_var_names")
                        (("2" (assert)
                          (("2"
                            (auto-rewrite "disjoint?" "union" "member"
                                          "empty?" "intersection")
                            (("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (rewrite "var_names_union2")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "new_lvars_not_reserved_words")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (-6 1))
                    (("3"
                      (expand "wf_program_has_unique_class_names_def")
                      (("3" (skosimp*)
                        (("3" (replace -2 :hide? t)
                          (("3" (replace -3 :hide? t)
                            (("3" (rewrite "name_inline_class")
                              (("3"
                                (rewrite "name_inline_class")
                                (("3"
                                  (inst -4 "c1!2" "c1!3")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but (-7 1))
                    (("4" (expand "wf_Classes")
                      (("4" (skosimp*)
                        (("4" (replace -2 :hide? t)
                          (("4" (expand "wf_Class")
                            (("4" (inst -2 "c1!1")
                              (("4"
                                (assert)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (split 1)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (expand "inline_class")
                                        (("1"
                                          (expand "inline_methods")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (replace -3 :hide? t)
                                                (("1"
                                                  (inst -5 "n!1" "n!2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "inline_method"
                                                       -3)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (rewrite "name_inline_class")
                                        (("2"
                                          (expand "inline_class")
                                          (("2"
                                            (expand "inline_methods")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (replace -2 :hide? t)
                                                (("2"
                                                  (inst -4 "n!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "inline_method")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide-all-but (-8 1))
                    (("5" (expand "program_pred")
                      (("5" (skosimp*)
                        (("5" (replace -2 :hide? t)
                          (("5" (rewrite "inv_inline_class")
                            (("5" (inst -2 "c1!1")
                              (("5"
                                (assert)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (split 1)
                                    (("1"
                                      (expand "wf_Body" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use
                                           "inline_class_inv_wf_Body1")
                                          (("1"
                                            (use
                                             "inline_class_inv_wf_Body2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "inv_inline_class")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst? -3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ext_declared_var_names")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (auto-rewrite
                                                                 "union"
                                                                 "member")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "var_names_union2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "inline_class" -1)
                                          (("2"
                                            (expand "inline_methods")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (replace -2 :hide? t)
                                                (("2"
                                                  (inst -4 "n!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "method_pred"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "wf_Body"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "ext_declared_var_names")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "var_names_union2")
                                                              (("2"
                                                                (use
                                                                 "inline_method_wf_Body1")
                                                                (("2"
                                                                  (lemma
                                                                   "inline_method_wf_Body2")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "p!1"
                                                                     "n!1"
                                                                     _)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Method")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (auto-rewrite
                                                                                 "union"
                                                                                 "member")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ext_declared_var_names")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "inline_method")
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (then
                                                                                              (skosimp*)
                                                                                              (branch
                                                                                               (split
                                                                                                1)
                                                                                               ((skosimp*)))))
                                                                                            (("1"
                                                                                              (inst?
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst?
                                                                                               -10)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -10)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (skosimp*)
                                                                                              (branch
                                                                                               (split
                                                                                                1)
                                                                                               ((skosimp*)))))
                                                                                            (("1"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst?
                                                                                               -10)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -11)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (apply
                                                                                             (then
                                                                                              (skosimp*)
                                                                                              (branch
                                                                                               (split
                                                                                                1)
                                                                                               ((skosimp*)))))
                                                                                            (("3"
                                                                                              (inst?
                                                                                               -2)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    6))
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "inline_method_body")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (inst?
                                                                                               -10)
                                                                                              (("4"
                                                                                                (assert)
                                                                                                (("4"
                                                                                                  (flatten)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "inline_method_body")
                                                                                                    (("4"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (apply
                                                                                             (then
                                                                                              (skosimp*)
                                                                                              (branch
                                                                                               (split
                                                                                                1)
                                                                                               ((skosimp*)))))
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "var_names"
                                                                                               "emptyset")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "subterm")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("6"
                                                                                            (apply
                                                                                             (then
                                                                                              (skosimp*)
                                                                                              (branch
                                                                                               (split
                                                                                                1)
                                                                                               ((skosimp*)))))
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "var_names"
                                                                                               "emptyset")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "subterm")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("7"
                                                                                            (apply
                                                                                             (then
                                                                                              (skosimp*)
                                                                                              (branch
                                                                                               (split
                                                                                                1)
                                                                                               ((skosimp*)))))
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "var_names"
                                                                                               "emptyset")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "subterm")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("8"
                                                                                            (skosimp*)
                                                                                            (("8"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("8"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("9"
                                                                                            (skosimp*)
                                                                                            (("9"
                                                                                              (inst?
                                                                                               -10)
                                                                                              (("9"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "methods")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (auto-rewrite "union" "member")
                  (("2" (apply-extensionality :hide? t)
                    (("1" (expand "getLocalDecls")
                      (("1" (iff)
                        (("1" (split 1)
                          (("1" (skosimp*)
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (inst 1 "c1!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "inline_class")
                                    (("1"
                                      (expand "getLocalDecls")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "inline_methods")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (replace -3 :hide? t)
                                              (("1"
                                                (inst 1 "n!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "inline_method")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "add")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (use
                                                               "new_res_lvar_new_lvar")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "methods")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "new_ex_lvar_new_lvar")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "methods")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (split -1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst 1 "inline_class(p!1)(c!1)")
                                  (("1"
                                    (split 1)
                                    (("1" (inst 1 "c!1") nil nil)
                                     ("2"
                                      (expand "inline_class")
                                      (("2"
                                        (expand "getLocalDecls")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             1
                                             "inline_method(p!1)(m!1)")
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (expand
                                                 "inline_methods")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "inline_method")
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "inline_method_body")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "inline_method_body")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "inline_method_body")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "inline_method")
                                                (("2"
                                                  (expand "add")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "new_lvars")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (expand "new_res_lvars")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "methods")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst
                                               1
                                               "inline_class(p!1)(c!1)")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (inst 1 "c!1")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "getLocalDecls")
                                                  (("2"
                                                    (inst
                                                     1
                                                     "inline_method(p!1)(m!1)")
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (expand
                                                         "inline_class")
                                                        (("1"
                                                          (expand
                                                           "inline_methods")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "inline_method")
                                                                (("1"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand
                                                                     "inline_method_body")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "inline_method_body")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "inline_method_body")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "inline_method")
                                                        (("2"
                                                          (expand
                                                           "add")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "new_ex_lvars")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "methods")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               1
                                               "inline_class(p!1)(c!1)")
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (inst 1 "c!1")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "getLocalDecls")
                                                  (("2"
                                                    (inst
                                                     1
                                                     "inline_method(p!1)(m!1)")
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (expand
                                                         "inline_class")
                                                        (("1"
                                                          (expand
                                                           "inline_methods")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "inline_method")
                                                                (("1"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand
                                                                     "inline_method_body")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "inline_method_body")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "inline_method_body")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "inline_method")
                                                        (("2"
                                                          (expand
                                                           "add")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "inline_program_TCC1") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (apply-extensionality :hide? t)
                (("1" (auto-rewrite "GhostDecls_inline_class")
                  (("1" (expand "getGhostDecls")
                    (("1" (assert)
                      (("1" (iff)
                        (("1" (split 1)
                          (("1" (skosimp*)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (inst? 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst 1 "inline_class(p!1)(c!1)")
                              (("2"
                                (assert)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "inline_program_TCC1") nil nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (auto-rewrite "FieldDecls_inline_class")
              (("2" (expand "getFieldDecls")
                (("2" (apply-extensionality :hide? t)
                  (("2" (iff)
                    (("2" (split 1)
                      (("1" (skosimp*)
                        (("1" (replace -2)
                          (("1" (assert)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst 1 "inline_class(p!1)(c!1)")
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (use "inline_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineProgramAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (GhostDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (disjoint?_commutative formula-decl nil SetProp nil)
    (new_lvars_not_field_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_lvars_not_ghost_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (disjoint?_union formula-decl nil SetProp nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names_union2 formula-decl nil ProgramFunctions nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (new_lvars_not_reserved_words formula-decl nil
     InlineNewVariableDeclarations nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (name_inline_class formula-decl nil InlineClassAnnotation nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (inline_method_wf_Body2 formula-decl nil InlineMethodAnnotation
     nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (emptyset const-decl "set" sets nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (inline_method_wf_Body1 formula-decl nil InlineMethodAnnotation
     nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (inline_class_inv_wf_Body1 formula-decl nil InlineClassAnnotation
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (inline_class_inv_wf_Body2 formula-decl nil InlineClassAnnotation
     nil)
    (inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (inline_program_TCC1 subtype-tcc nil InlineProgramAnnotation nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (p!1 skolem-const-decl "Program[Name]" InlineProgramAnnotation nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (FieldDecls_inline_class formula-decl nil InlineClassAnnotation
     nil))
   6976 6280 t nil))
 (LocalDecls_inline_program 0
  (LocalDecls_inline_program-1 nil 3407163445 3412934830
   ("" (skosimp*)
    (("" (auto-rewrite "union" "add" "member")
      (("" (apply-extensionality :hide? t)
        (("" (expand "getLocalDecls")
          (("" (expand "getLocalDecls")
            (("" (expand "inline_program")
              (("" (iff)
                (("" (split 1)
                  (("1" (skosimp*)
                    (("1" (inst 1 "c1!1")
                      (("1" (assert)
                        (("1" (replace -2 :hide? t)
                          (("1" (expand "inline_class")
                            (("1" (expand "inline_methods")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 :hide? t)
                                      (("1"
                                        (expand "inline_method")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use
                                               "new_res_lvar_new_lvar")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "methods")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "new_ex_lvar_new_lvar")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "methods")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (split -1)
                      (("1" (skosimp*)
                        (("1" (inst 1 "inline_class(p!1)(c!1)")
                          (("1" (split 1)
                            (("1" (inst 1 "c!1") nil nil)
                             ("2" (inst 1 "inline_method(p!1)(m!1)")
                              (("2"
                                (split 1)
                                (("1"
                                  (expand "inline_class")
                                  (("1"
                                    (expand "inline_methods")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "inline_method")
                                          (("1"
                                            (expand
                                             "inline_method_body")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "inline_method")
                                  (("2"
                                    (assert)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "new_lvars")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (expand "new_res_lvars")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (expand "methods")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst 1 "inline_class(p!1)(c!1)")
                                      (("1"
                                        (split 1)
                                        (("1" (inst?) nil nil)
                                         ("2"
                                          (inst
                                           1
                                           "inline_method(p!1)(m!1)")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "inline_class")
                                              (("1"
                                                (expand
                                                 "inline_methods")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "inline_method")
                                                      (("1"
                                                        (expand
                                                         "inline_method_body")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "inline_method")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "new_ex_lvars")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "methods")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst 1 "inline_class(p!1)(c!1)")
                                      (("2"
                                        (split 1)
                                        (("1" (inst 1 "c!1") nil nil)
                                         ("2"
                                          (inst
                                           1
                                           "inline_method(p!1)(m!1)")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "inline_class")
                                              (("1"
                                                (expand
                                                 "inline_methods")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand
                                                     "inline_method")
                                                    (("1"
                                                      (expand
                                                       "inline_method_body")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "inline_method")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineProgramAnnotation nil)
    (JType type-decl nil JType_adt nil))
   1823 1600 t shostak)))
(InlineProgramAnnotationProperties
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407221848 3412939664
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil
     InlineProgramAnnotationProperties nil))
   759 710 t nil))
 (IMP_InlineProgramAnnotation_TCC1 0
  (IMP_InlineProgramAnnotation_TCC1-1 nil 3407221848 3412939664
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineProgramAnnotationProperties
     nil))
   725 720 t nil))
 (inline_program_class_correspondence 0
  (inline_program_class_correspondence-1 nil 3407222159 3412939665
   ("" (skosimp*)
    (("" (expand "inline_program") (("" (propax) nil nil)) nil)) nil)
   proved
   ((inline_program const-decl "Program" InlineProgramAnnotation nil))
   888 850 t shostak))
 (inline_program_method_correspondence 0
  (inline_program_method_correspondence-1 nil 3407222167 3412939666
   ("" (skosimp*)
    (("" (expand "inline_program")
      (("" (skosimp*)
        (("" (replace -2 :hide? t)
          (("" (expand "inline_class")
            (("" (expand "inline_methods")
              (("" (skosimp*)
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_program const-decl "Program" InlineProgramAnnotation nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil))
   1016 980 t shostak))
 (inline_program_preserves_Field_decls 0
  (inline_program_preserves_Field_decls-1 nil 3407222226 3412939667
   ("" (skosimp*)
    (("" (auto-rewrite "FieldDecls_inline_class")
      (("" (expand "getFieldDecls")
        (("" (apply-extensionality :hide? t)
          (("" (iff)
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (expand "inline_program")
                  (("1" (skosimp*)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst 1 "inline_class(p!1)(c!1)")
                  (("2" (assert)
                    (("2" (expand "inline_program")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil))
   1043 980 t shostak))
 (inline_program_preserves_Ghost_decls 0
  (inline_program_preserves_Ghost_decls-1 nil 3407222302 3412939668
   ("" (skosimp*)
    (("" (auto-rewrite "GhostDecls_inline_class")
      (("" (expand "getGhostDecls")
        (("" (apply-extensionality :hide? t)
          (("" (iff)
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (expand "inline_program")
                  (("1" (skosimp*)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst 1 "inline_class(p!1)(c!1)")
                  (("2" (assert)
                    (("2" (expand "inline_program")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (GhostDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil))
   1053 980 t shostak))
 (inline_program_add_LocalVar_decls 0
  (inline_program_add_LocalVar_decls-1 nil 3407222328 3412939669
   ("" (skosimp*) (("" (use "LocalDecls_inline_program") nil nil)) nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (LocalDecls_inline_program formula-decl nil InlineProgramAnnotation
     nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil))
   1064 1010 t shostak))
 (inline_program_ext_declared_var_names 0
  (inline_program_ext_declared_var_names-1 nil 3407222356 3412939670
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      ((""
        (auto-rewrite "union" "member"
                      "inline_program_preserves_Field_decls"
                      "inline_program_preserves_Ghost_decls"
                      "inline_program_add_LocalVar_decls")
        (("" (apply-extensionality :hide? t)
          (("" (rewrite "var_names_union2")
            (("" (assert) (("" (iff) (("" (prop) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (This const-decl "Name" Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (inline_program_preserves_Ghost_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (inline_program_add_LocalVar_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (inline_program_preserves_Field_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names_union2 formula-decl nil ProgramFunctions nil))
   868 830 t shostak))
 (var_names_inline_program 0
  (var_names_inline_program-1 nil 3407227542 3412940180
   ("" (skosimp*)
    (("" (auto-rewrite "subset?" "union" "member")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "var_names" (-1 1))
            (("" (expand "Union")
              (("" (skosimp*)
                (("" (typepred "a!1")
                  (("" (skosimp*)
                    (("" (replace -2 :hide? t)
                      (("" (expand "inline_program")
                        (("" (skosimp*)
                          (("" (replace -2 :hide? t)
                            (("" (inst 1 "var_names(c1!1)")
                              (("1"
                                (expand "var_names" (-2 1))
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite
                                       "FieldDecls_inline_class")
                                      (("1"
                                        (rewrite
                                         "GhostDecls_inline_class")
                                        (("1"
                                          (rewrite "inv_inline_class")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "Union")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (typepred "a!2")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand
                                                         "inline_class")
                                                        (("1"
                                                          (expand
                                                           "inline_methods")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "var_names(n!1)")
                                                                (("1"
                                                                  (expand
                                                                   "var_names"
                                                                   (-3
                                                                    1))
                                                                  (("1"
                                                                    (expand
                                                                     "Union")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (typepred
                                                                         "a!3")
                                                                        (("1"
                                                                          (auto-rewrite-theory
                                                                           "InlineMethodAnnotation")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "a!3")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 1
                                                                                 "a!3")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   -3)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (auto-rewrite
                                                                                       "emptyset"
                                                                                       "add")
                                                                                      (("3"
                                                                                        (case
                                                                                         "var_names(Skip)(x!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "var_names"
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (rewrite
                                                                                                       "var_names"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (rewrite
                                                                                                             "var_names"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "var_names"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "var_names"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "new_res_lvar_new_lvar")
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "var_names"
                                                                                                                             6)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               6
                                                                                                                               "new_res_lvar(p!1, n!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "new_res_lvar")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "methods")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (inst?)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (postpone)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (rewrite
                                                                                                       "var_names"
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "var_names"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (rewrite
                                                                                                       "var_names"
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (rewrite
                                                                                                             "var_names"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (replace
                                                                                 -1)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   -4)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (replace
                                                                                 -1)
                                                                                (("5"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   -4)
                                                                                  (("5"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("5"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (replace
                                                                                 -1)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   -4)
                                                                                  (("6"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("6"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (replace
                                                                                 -1
                                                                                 -4)
                                                                                (("7"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   -4)
                                                                                  (("7"
                                                                                    (skosimp*)
                                                                                    (("7"
                                                                                      (expand
                                                                                       "add"
                                                                                       -4)
                                                                                      (("7"
                                                                                        (assert)
                                                                                        (("7"
                                                                                          (split
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (use
                                                                                               "new_res_lvar_new_lvar")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "var_names"
                                                                                                     5)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       5
                                                                                                       "new_res_lvar(p!1, n!1)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "methods")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             1
                                                                                             "var_names(lvars(n!1))")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "var_names"
                                                                                               1)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("8"
                                                                                (expand
                                                                                 "var_lookup")
                                                                                (("8"
                                                                                  (lift-if)
                                                                                  (("8"
                                                                                    (assert)
                                                                                    (("8"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       -1)
                                                                                      (("8"
                                                                                        (rewrite
                                                                                         "var_names"
                                                                                         -1)
                                                                                        (("8"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           -1)
                                                                                          (("8"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "emptyset")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "a!3 = ({y: Name | y = res(p!1)(n!1)})")
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "new_res_lvar_new_lvar")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         5)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           5
                                                                                                           "new_res_lvar(p!1, n!1)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "new_res_lvar")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "new_lvars")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "methods")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "defined?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("9"
                                                                                (inst
                                                                                 1
                                                                                 "a!3")
                                                                                (("9"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (GhostDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    nil nil nil
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil) nil nil
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    nil nil
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil) nil
    nil
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    nil nil
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt
     nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil) nil nil
    (methods const-decl "finite_set[Method]" ProgramFunctions nil) nil
    (add const-decl "(nonempty?)" sets nil) nil
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch adt-constructor-decl
     "[[Stmt, Excpt, Stmt, Stmt] -> (TryCatch?)]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    nil nil
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (var_lookup const-decl "Expr" ProgramFunctions nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Body_adt
     nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Body_adt
     nil)
    nil (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (BoolVarEval adt-constructor-decl "[Name -> (BoolVarEval?)]"
     Body_adt nil)
    (res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (FieldDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Union const-decl "set" sets nil))
   341220 6620 t shostak))
 (inline_program_preserves_wf_method 0
  (inline_program_preserves_wf_method-1 nil 3407228855 3410867522
   ("" (skosimp*)
    (("" (typepred "inline_program(p!1)")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "program_pred")
            (("" (expand "methods")
              (("" (skosimp*)
                (("" (inst -5 "inline_class(p!1)(c!1)")
                  (("" (assert)
                    (("" (split -5)
                      (("1" (flatten)
                        (("1" (inst -2 "inline_method(p!1)(m!1)")
                          (("1" (assert)
                            (("1" (expand "wf_Method")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "inline_class")
                                  (("1"
                                    (expand "inline_methods")
                                    (("1" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "inline_program")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((program_pred const-decl "bool" ProgramRestriction nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil))
   240018 860 t shostak))
 (inline_program_preserves_wf_body 0
  (inline_program_preserves_wf_body-1 nil 3407229006 3410860176
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (rewrite "inline_program_ext_declared_var_names")
          (("" (rewrite "inline_program_preserves_Ghost_decls")
            (("" (flatten)
              (("" (assert)
                (("" (split 1)
                  (("1" (skosimp*)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (assert) (("1" (flatten) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inline_program_ext_declared_var_names formula-decl nil
     InlineProgramAnnotationProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (inline_program_preserves_Ghost_decls formula-decl nil
     InlineProgramAnnotationProperties nil))
   309 270 t shostak))
 (get_class_inline_program 0
  (get_class_inline_program-1 nil 3407229100 3410860177
   ("" (skosimp*)
    (("" (expand "inline_program")
      (("" (assert)
        (("" (expand "get_class")
          (("" (lift-if)
            (("" (assert)
              ((""
                (apply (branch (split -1)
                        ((then (flatten) (assert) (flatten)
                          (assert)))))
                ((""
                  (apply (branch (split -3)
                          ((then (flatten) (assert) (flatten)
                            (assert)))))
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((inline_program const-decl "Program" InlineProgramAnnotation nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil))
   663 610 t shostak))
 (same_class_name_inline_class_implies_same_class 0
  (same_class_name_inline_class_implies_same_class-1 nil 3407229161
   3410860177
   ("" (skosimp*)
    (("" (expand "inline_program")
      (("" (skosimp*)
        (("" (replace -3 :hide? t)
          (("" (rewrite "name_inline_class")
            (("" (typepred "p!1")
              (("" (expand "wf_Program")
                (("" (flatten)
                  (("" (expand "wf_program_has_unique_class_names_def")
                    (("" (inst -3 "c1!1" "c1!2")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((inline_program const-decl "Program" InlineProgramAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (name_inline_class formula-decl nil InlineClassAnnotation nil))
   606 570 t shostak))
 (same_method_name_inline_class_implies_same_method 0
  (same_method_name_inline_class_implies_same_method-1 nil 3407229246
   3410860178
   ("" (skosimp*)
    (("" (replace -2 :hide? t)
      (("" (expand "inline_class")
        (("" (expand "inline_methods")
          (("" (skosimp*)
            (("" (replace -4 :hide? t)
              (("" (expand "inline_method" -4)
                ((""
                  (use "wf_class_has_unique_method_names"
                       ("m1" "m1!1" "m2" "n!1"))
                  (("" (assert)
                    (("" (typepred "p!1")
                      (("" (expand "wf_Program")
                        (("" (flatten)
                          (("" (expand "wf_Classes")
                            (("" (inst?) (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (wf_class_has_unique_method_names formula-decl nil
     WellFormedProgram nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) nil
    (Method type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil))
   1126 1090 t shostak))
 (lookup_mthd_inline_program 0
  (lookup_mthd_inline_program-1 nil 3407229358 3410860182
   ("" (skosimp*)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (assert)
          ((""
            (apply (branch (split -1)
                    ((then (flatten) (assert) (flatten) (assert)))))
            ((""
              (apply (branch (split -3)
                      ((then (flatten) (assert) (flatten) (assert)))))
              (("" (expand "method_names")
                (("" (skosimp*)
                  ((""
                    (case-replace "{m: Method[Name] |
                 methods(down(get_class(p!1)(tgt!1)))(m) AND
                  name(m) = mn!1} = singleton(m!2)" :hide? t)
                    (("1"
                      (case-replace "{m_1: Method[Name] |
                 methods(down(get_class(inline_program(p!1))(tgt!1)))(m_1)
                  AND name(m_1) = mn!1} = singleton(m!1)" :hide? t)
                      (("1" (rewrite "choose_singleton")
                        (("1" (rewrite "choose_singleton")
                          (("1" (replace -7 :hide? t)
                            (("1" (replace -7 :hide? t)
                              (("1"
                                (case-replace
                                 "down(get_class(inline_program(p!1))(tgt!1)) = inline_class(p!1)(down(get_class(p!1)(tgt!1)))"
                                 :hide?
                                 t)
                                (("1"
                                  (expand "inline_class")
                                  (("1"
                                    (expand "inline_methods")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (replace -3 :hide? t)
                                        (("1"
                                          (rewrite
                                           "inline_method_name")
                                          (("1"
                                            (use
                                             "wf_class_has_unique_method_names"
                                             ("c"
                                              "down(get_class(p!1)(tgt!1))"
                                              "p"
                                              "p!1"
                                              "m1"
                                              "n!1"
                                              "m2"
                                              "m!2"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "wf_program_has_wf_classes")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2)
                                  (("2"
                                    (expand "inline_program")
                                    (("2"
                                      (expand "get_class")
                                      (("2"
                                        (case "Reference?(tgt!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case-replace
                                             "class_names((# classes
                          := {c: Class[Name] |
                                EXISTS (c1: Class[Name]):
                                  classes(p!1)(c1) AND
                                   c = inline_class(p!1)(c1)} #)) = class_names(p!1)"
                                             :hide?
                                             t)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split 1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (hide -3 -5 -6)
                                                    (("1"
                                                      (expand
                                                       "class_names")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (case-replace
                                                           "{c_1: Class[Name] |
                              classes(p!1)(c_1) AND
                               name(c_1) = class_name(tgt!1)} = singleton(c!1)"
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "choose_singleton")
                                                            (("1"
                                                              (case-replace
                                                               "{c_2: Class[Name] |
                (EXISTS (c1_1: Class[Name]):
                   classes(p!1)(c1_1) AND c_2 = inline_class(p!1)(c1_1))
                 AND name(c_2) = class_name(tgt!1)} = singleton(inline_class(p!1)(c!1))"
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (rewrite
                                                                 "choose_singleton")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (expand
                                                                     "singleton")
                                                                    (("2"
                                                                      (iff)
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (rewrite
                                                                               "name_inline_class")
                                                                              (("1"
                                                                                (use
                                                                                 "wf_program_has_unique_class_names"
                                                                                 ("c1"
                                                                                  "c1!1"
                                                                                  "c2"
                                                                                  "c!1"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "name_inline_class")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "singleton")
                                                              (("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (iff)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (use
                                                                         "wf_program_has_unique_class_names")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 -2 -4 -5)
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (expand
                                                   "class_names")
                                                  (("1"
                                                    (iff)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (rewrite
                                                             "name_inline_class")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "inline_class(p!1)(c!1)")
                                                          (("2"
                                                            (rewrite
                                                             "name_inline_class")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "inline_program_TCC1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (use
                                               "inline_program_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality :hide? t)
                        (("2" (expand "singleton")
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "inline_program(p!1)")
                                  (("1"
                                    (expand "wf_Program")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "wf_Classes")
                                        (("1"
                                          (inst
                                           -4
                                           "down(get_class(inline_program(p!1))(tgt!1))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "wf_Class")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -4
                                                     "x!1"
                                                     "m!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality :hide? t)
                      (("2" (expand "singleton")
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (typepred "p!1")
                                (("1"
                                  (expand "wf_Program")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "wf_Classes")
                                      (("1"
                                        (inst
                                         -4
                                         "down(get_class(p!1)(tgt!1))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "wf_Class")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -4 "x!1" "m!2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (inline_program_TCC1 subtype-tcc nil InlineProgramAnnotation nil)
    (class_name adt-accessor-decl "[(Reference?) -> Name]" Val_adt nil)
    (name_inline_class formula-decl nil InlineClassAnnotation nil)
    (wf_program_has_unique_class_names formula-decl nil
     WellFormedProgram nil)
    (is_finite const-decl "bool" finite_sets nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Reference? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (inline_method_name formula-decl nil InlineMethodAnnotation nil)
    (wf_program_has_wf_classes formula-decl nil WellFormedProgram nil)
    (wf_class_has_unique_method_names formula-decl nil
     WellFormedProgram nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil))
   3552 3310 t shostak))
 (inline_program_preserves_class_names 0
  (inline_program_preserves_class_names-1 nil 3408973789 3410860183
   ("" (skosimp*)
    (("" (expand "inline_program")
      (("" (expand "class_names")
        (("" (apply-extensionality :hide? t)
          (("" (iff)
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (inst 1 "inline_class(p!1)(c!1)")
                  (("1" (rewrite "name_inline_class")
                    (("1" (assert) (("1" (inst?) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (replace -2)
                  (("2" (rewrite "name_inline_class")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (name_inline_class formula-decl nil InlineClassAnnotation nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil))
   557 530 t shostak))
 (up_get_class_equivalence 0
  (up_get_class_equivalence-1 nil 3408973857 3410860183
   ("" (skosimp*)
    (("" (use "inline_program_preserves_class_names")
      (("" (expand "get_class")
        (("" (lift-if)
          (("" (assert)
            (("" (case "Reference?(a!1)")
              (("1" (assert)
                (("1" (replace -2) (("1" (propax) nil nil)) nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((inline_program_preserves_class_names formula-decl nil
     InlineProgramAnnotationProperties nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Reference? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil))
   552 510 t shostak))
 (get_class_equivalence 0
  (get_class_equivalence-1 nil 3408973917 3410860186
   ("" (skosimp*)
    (("" (expand "get_class")
      (("" (rewrite "inline_program_preserves_class_names")
        (("" (lift-if)
          (("" (assert)
            ((""
              (apply (branch (split -1)
                      ((then (flatten) (assert) (flatten) (assert)))))
              ((""
                (case-replace "choose({c: Class[Name] |
                   classes(inline_program(p!1))(c) AND
                    name(c) = class_name(a!1)}) = inline_class(p!1)
                      (choose({c: Class[Name] |
                                 classes(p!1)(c) AND
                                  name(c) = class_name(a!1)}))
")
                (("1" (hide 2)
                  (("1" (expand "class_names")
                    (("1" (skosimp*)
                      (("1"
                        (case-replace "{c: Class[Name] |
                    classes(inline_program(p!1))(c) AND
                     name(c) = class_name(a!1)} = singleton(c!1)"
                         :hide? t)
                        (("1" (rewrite "choose_singleton")
                          (("1" (expand "inline_program")
                            (("1" (skosimp*)
                              (("1"
                                (replace -3)
                                (("1"
                                  (case-replace
                                   "{c_1: Class[Name] |
                                    classes(p!1)(c_1) AND
                                     name(c_1) = class_name(a!1)} = singleton(c1!1)"
                                   :hide?
                                   t)
                                  (("1"
                                    (rewrite "choose_singleton")
                                    nil
                                    nil)
                                   ("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (iff)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (rewrite
                                               "name_inline_class")
                                              (("1"
                                                (use
                                                 "wf_program_has_unique_class_names")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "name_inline_class")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (apply-extensionality :hide? t)
                          (("2" (expand "singleton")
                            (("2" (iff)
                              (("2"
                                (split 1)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (use
                                     "wf_program_has_unique_class_names")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "class_names")
                  (("2" (skosimp*)
                    (("2" (expand "inline_program")
                      (("2" (skosimp*)
                        (("2" (replace -3 :hide? t)
                          (("2" (rewrite "name_inline_class")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "class_names")
                  (("3" (skosimp*)
                    (("3" (rewrite "nonempty_exists")
                      (("3" (inst?) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((get_class const-decl "lift[Class]" ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (name_inline_class formula-decl nil InlineClassAnnotation nil)
    (wf_program_has_unique_class_names formula-decl nil
     WellFormedProgram nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[Class[Name]]"
     InlineProgramAnnotationProperties nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (class_name adt-accessor-decl "[(Reference?) -> Name]" Val_adt nil)
    (Reference? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (inline_program_preserves_class_names formula-decl nil
     InlineProgramAnnotationProperties nil))
   2438 2250 t shostak)))

