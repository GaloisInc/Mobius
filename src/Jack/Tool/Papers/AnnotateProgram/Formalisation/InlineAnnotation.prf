(NewVar)
(InlineVariableNames)
(InlineNewVariableDeclarations
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157570 3407220244
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineNewVariableDeclarations
     nil))
   28 30 t nil))
 (res_ex_TCC1 0
  (res_ex_TCC1-1 nil 3407157570 3407220244
   ("" (use "name_of_exists")
    (("" (skosimp*) (("" (inst?) nil nil)) nil)) nil)
   proved
   ((Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (NewVar type-decl nil NewVar_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl
     "[p: Program -> [NewVar[Name] -> (legal_names(p))]]"
     InlineNewVariableDeclarations nil)
    (name_of_exists formula-decl nil InlineNewVariableDeclarations
     nil))
   94 90 t nil))
 (res_ex_disjoint 0
  (res_ex_disjoint-1 nil 3407159805 3407220244
   ("" (skosimp*)
    (("" (expand "res")
      (("" (expand "ex")
        (("" (typepred "res_ex(p!1)")
          (("" (expand "injective?")
            (("" (copy -1)
              (("" (copy -1)
                (("" (inst -1 "res(m1!1)" "res(m2!1)")
                  (("" (inst -2 "res(m1!1)" "ex(m2!1)")
                    (("" (inst -3 "ex(m1!1)" "ex(m2!1)")
                      (("" (assert)
                        (("" (skosimp*)
                          (("" (assert)
                            (("" (split 3)
                              (("1"
                                (assert)
                                (("1"
                                  (case "m(res(m1!1)) = m(res(m2!1))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "m(ex(m1!1)) = m(ex(m2!1))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -3)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((res const-decl "Name" InlineNewVariableDeclarations nil)
    (res_ex const-decl "(injective?[NewVar[Name], (legal_names(p))])"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (NewVar type-decl nil NewVar_adt nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (res adt-constructor-decl "[Method -> (res?)]" NewVar_adt nil)
    (res? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (m shared-adt-accessor-decl "[NewVar -> Method[Name]]" NewVar_adt
     nil)
    (ex? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (ex adt-constructor-decl "[Method -> (ex?)]" NewVar_adt nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil))
   252 220 t shostak))
 (new_res_lvars_TCC1 0
  (new_res_lvars_TCC1-1 nil 3407159572 3407220245
   ("" (skosimp*)
    (("" (typepred "methods(p!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(lv : ({lv: LocalVarDecl[Name] |
                     EXISTS (m: Method[Name]):
                       methods[Name](p!1)(m) AND
                        lv = new_res_lvar(p!1, m)})) : f!1(choose({m: Method[Name] |
                       methods[Name](p!1)(m) AND
                        lv = new_res_lvar(p!1, m)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "lv!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (lv!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_res_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_res_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (x2!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_res_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "Program[Name]"
     InlineNewVariableDeclarations nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (nonempty? const-decl "bool" sets nil))
   493 440 t nil))
 (new_ex_lvars_TCC1 0
  (new_ex_lvars_TCC1-1 nil 3407159572 3407220245
   ("" (skosimp*)
    (("" (typepred "methods(p!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(lv : ({lv: LocalVarDecl[Name] |
                       EXISTS (m: Method[Name]):
                         methods[Name](p!1)(m) AND
                          lv = new_ex_lvar(p!1, m)})) : f!1(choose({m: Method[Name] |
                         methods[Name](p!1)(m) AND
                          lv = new_ex_lvar(p!1, m)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "lv!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (lv!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_ex_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_ex_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (x2!1 skolem-const-decl "({lv: LocalVarDecl[Name] |
    EXISTS (m: Method[Name]):
      methods[Name](p!1)(m) AND lv = new_ex_lvar(p!1, m)})"
     InlineNewVariableDeclarations nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (m!1 skolem-const-decl "Method[Name]" InlineNewVariableDeclarations
     nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "Program[Name]"
     InlineNewVariableDeclarations nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (nonempty? const-decl "bool" sets nil))
   495 460 t nil))
 (new_res_lvar_new_lvar 0
  (new_res_lvar_new_lvar-1 nil 3407161315 3407220245
   ("" (skosimp*)
    (("" (expand "new_lvars")
      (("" (expand "union")
        (("" (flatten)
          (("" (expand "member")
            (("" (expand "new_res_lvars") (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil))
   35 30 t shostak))
 (new_ex_lvar_new_lvar 0
  (new_ex_lvar_new_lvar-1 nil 3407161340 3407220245
   ("" (skosimp*)
    (("" (expand "new_lvars")
      (("" (expand "union")
        (("" (flatten)
          (("" (expand "member")
            (("" (expand "new_ex_lvars") (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil))
   35 40 t shostak))
 (new_lvars_not_field_decls 0
  (new_lvars_not_field_decls-1 nil 3407217366 3407220246
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "intersection" "member" "union"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (rewrite "var_names_union2")
              (("" (assert)
                (("" (split -1)
                  (("1" (expand "var_names" -1)
                    (("1" (skosimp*)
                      (("1" (expand "new_res_lvars")
                        (("1" (skosimp*)
                          (("1" (expand "new_res_lvar")
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "res")
                                  (("1"
                                    (typepred "res_ex(p!1)(res(m!1))")
                                    (("1"
                                      (expand "legal_names")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "declared_var_names")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "var_names" -1)
                    (("2" (skosimp*)
                      (("2" (expand "new_ex_lvars")
                        (("2" (skosimp*)
                          (("2" (replace -2 :hide? t)
                            (("2" (expand "new_ex_lvar")
                              (("2"
                                (expand "ex")
                                (("2"
                                  (typepred "res_ex(p!1)(ex(m!1))")
                                  (("2"
                                    (expand "legal_names")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "declared_var_names")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((var_names_union2 formula-decl nil ProgramFunctions nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (res adt-constructor-decl "[Method -> (res?)]" NewVar_adt nil)
    (res? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (res_ex const-decl "(injective?[NewVar[Name], (legal_names(p))])"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (NewVar type-decl nil NewVar_adt nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (ex? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (ex adt-constructor-decl "[Method -> (ex?)]" NewVar_adt nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   343 280 t shostak))
 (new_lvars_not_ghost_decls 0
  (new_lvars_not_ghost_decls-1 nil 3407217797 3407220246
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "intersection" "member" "union"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (rewrite "var_names_union2")
              (("" (assert)
                (("" (split -1)
                  (("1" (expand "var_names" -1)
                    (("1" (skosimp*)
                      (("1" (expand "new_res_lvars")
                        (("1" (skosimp*)
                          (("1" (expand "new_res_lvar")
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "res")
                                  (("1"
                                    (typepred "res_ex(p!1)(res(m!1))")
                                    (("1"
                                      (expand "legal_names")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "declared_var_names")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "var_names" -1)
                    (("2" (skosimp*)
                      (("2" (expand "new_ex_lvars")
                        (("2" (skosimp*)
                          (("2" (replace -2 :hide? t)
                            (("2" (expand "new_ex_lvar")
                              (("2"
                                (expand "ex")
                                (("2"
                                  (typepred "res_ex(p!1)(ex(m!1))")
                                  (("2"
                                    (expand "legal_names")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "declared_var_names")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((var_names_union2 formula-decl nil ProgramFunctions nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (res adt-constructor-decl "[Method -> (res?)]" NewVar_adt nil)
    (res? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (res_ex const-decl "(injective?[NewVar[Name], (legal_names(p))])"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (NewVar type-decl nil NewVar_adt nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (ex? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (ex adt-constructor-decl "[Method -> (ex?)]" NewVar_adt nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   358 300 t shostak))
 (new_lvars_not_old_local_decls 0
  (new_lvars_not_old_local_decls-1 nil 3407217824 3407220246
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "intersection" "member" "union"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (rewrite "var_names_union2")
              (("" (assert)
                (("" (split -1)
                  (("1" (expand "var_names" -1)
                    (("1" (skosimp*)
                      (("1" (expand "new_res_lvars")
                        (("1" (skosimp*)
                          (("1" (expand "new_res_lvar")
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "res")
                                  (("1"
                                    (typepred "res_ex(p!1)(res(m!1))")
                                    (("1"
                                      (expand "legal_names")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "declared_var_names")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "var_names" -1)
                    (("2" (skosimp*)
                      (("2" (expand "new_ex_lvars")
                        (("2" (skosimp*)
                          (("2" (replace -2 :hide? t)
                            (("2" (expand "new_ex_lvar")
                              (("2"
                                (expand "ex")
                                (("2"
                                  (typepred "res_ex(p!1)(ex(m!1))")
                                  (("2"
                                    (expand "legal_names")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "declared_var_names")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((var_names_union2 formula-decl nil ProgramFunctions nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (res adt-constructor-decl "[Method -> (res?)]" NewVar_adt nil)
    (res? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (res_ex const-decl "(injective?[NewVar[Name], (legal_names(p))])"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (NewVar type-decl nil NewVar_adt nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (ex? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (ex adt-constructor-decl "[Method -> (ex?)]" NewVar_adt nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   314 290 t nil))
 (new_lvars_not_reserved_words 0
  (new_lvars_not_reserved_words-1 nil 3407218472 3407218538
   ("" (skosimp*)
    ((""
      (auto-rewrite "disjoint?" "union" "member" "intersection"
                    "empty?")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "new_lvars")
            (("" (rewrite "var_names_union2")
              (("" (assert)
                (("" (split -1)
                  (("1" (expand "var_names")
                    (("1" (skosimp*)
                      (("1" (expand "new_res_lvars")
                        (("1" (skosimp*)
                          (("1" (replace -2)
                            (("1" (expand "new_res_lvar")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "res")
                                  (("1"
                                    (typepred "res_ex(p!1)(res(m!1))")
                                    (("1"
                                      (expand "legal_names")
                                      (("1"
                                        (assert)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "var_names")
                    (("2" (skosimp*)
                      (("2" (expand "new_ex_lvars")
                        (("2" (skosimp*)
                          (("2" (replace -2)
                            (("2" (expand "new_ex_lvar")
                              (("2"
                                (expand "ex")
                                (("2"
                                  (typepred "res_ex(p!1)(ex(m!1))")
                                  (("2"
                                    (expand "legal_names")
                                    (("2"
                                      (assert)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((var_names_union2 formula-decl nil ProgramFunctions nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (res adt-constructor-decl "[Method -> (res?)]" NewVar_adt nil)
    (res? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (res_ex const-decl "(injective?[NewVar[Name], (legal_names(p))])"
     InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (NewVar type-decl nil NewVar_adt nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (ex? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (ex adt-constructor-decl "[Method -> (ex?)]" NewVar_adt nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   65819 200 t shostak))
 (new_vars_not_ext_declared_var_names 0
  (new_vars_not_ext_declared_var_names-1 nil 3407217832 3407220247
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (use "new_lvars_not_old_local_decls")
        (("" (use "new_lvars_not_field_decls")
          (("" (use "new_lvars_not_ghost_decls")
            ((""
              (auto-rewrite "disjoint?" "union" "member" "intersection"
                            "empty?")
              (("" (assert)
                (("" (skosimp*)
                  (("" (apply (repeat (inst?)))
                    (("" (assert)
                      (("" (expand "new_lvars")
                        (("" (rewrite "var_names_union2")
                          (("" (assert)
                            (("" (hide-all-but (-1 -2))
                              ((""
                                (split -1)
                                (("1"
                                  (expand "var_names")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (expand "new_res_lvars")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (expand "new_res_lvar")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "res")
                                                (("1"
                                                  (typepred
                                                   "res_ex(p!1)(res(m!1))")
                                                  (("1"
                                                    (expand
                                                     "legal_names")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "reserved_words")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "var_names")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (expand "new_ex_lvars")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (expand "new_ex_lvar")
                                            (("2"
                                              (expand "ex")
                                              (("2"
                                                (typepred
                                                 "res_ex(p!1)(ex(m!1))")
                                                (("2"
                                                  (expand
                                                   "legal_names")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "reserved_words")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (new_lvars_not_field_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (var_names_union2 formula-decl nil ProgramFunctions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (ex adt-constructor-decl "[Method -> (ex?)]" NewVar_adt nil)
    (ex? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (NewVar type-decl nil NewVar_adt nil)
    (injective? const-decl "bool" functions nil)
    (res_ex const-decl "(injective?[NewVar[Name], (legal_names(p))])"
     InlineNewVariableDeclarations nil)
    (res? adt-recognizer-decl "[NewVar -> boolean]" NewVar_adt nil)
    (res adt-constructor-decl "[Method -> (res?)]" NewVar_adt nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (new_lvars_not_ghost_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_lvars_not_old_local_decls formula-decl nil
     InlineNewVariableDeclarations nil))
   490 430 t shostak))
 (new_lvars_not_ext_declared_var_names 0
  (new_lvars_not_ext_declared_var_names-1 nil 3407218547 3407218580
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (use "new_lvars_not_old_local_decls")
        (("" (use "new_lvars_not_field_decls")
          (("" (use "new_lvars_not_ghost_decls")
            (("" (use "new_lvars_not_reserved_words")
              ((""
                (auto-rewrite "disjoint?" "union" "member"
                              "intersection" "empty?")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (apply (repeat (inst?)))
                      (("" (assert)
                        (("" (expand "reserved_words")
                          (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (new_lvars_not_field_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_lvars_not_reserved_words formula-decl nil
     InlineNewVariableDeclarations nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (new_lvars_not_ghost_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil InlineNewVariableDeclarations
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (new_lvars_not_old_local_decls formula-decl nil
     InlineNewVariableDeclarations nil))
   33140 250 t shostak)))
(InlineMethodAnnotation
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157671 3407220247
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineMethodAnnotation nil))
   28 30 t nil))
 (IMP_InlineNewVariableDeclarations_TCC1 0
  (IMP_InlineNewVariableDeclarations_TCC1-1 nil 3407157671 3407220247
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineMethodAnnotation nil)) 30 30
   t nil))
 (inline_method_TCC1 0
  (inline_method_TCC1-1 nil 3407157671 3407220247
   ("" (skosimp*)
    (("" (expand "inline_method_body") (("" (propax) nil nil)) nil))
    nil)
   proved
   ((inline_method_body const-decl "Body" InlineMethodAnnotation nil))
   39 40 t nil))
 (inline_method_TCC2 0
  (inline_method_TCC2-1 nil 3407158174 3407220247
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil))
   249 220 nil nil))
 (inline_methods_TCC1 0
  (inline_methods_TCC1-1 nil 3407157671 3407220248
   ("" (skosimp*)
    (("" (typepred "ms!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                     EXISTS (n: Method[Name]):
                       ms!1(n) AND m = inline_method(p!1)(n)})) : f!1(choose({n: Method[Name] |
                       ms!1(n) AND m = inline_method(p!1)(n)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1 :where -2)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (assert) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (rewrite "nonempty_exists")
                      (("3" (typepred "x1!1")
                        (("3" (skosimp*)
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skosimp*)
                (("2" (rewrite "nonempty_exists")
                  (("2" (typepred "m!1")
                    (("2" (skosimp*)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = inline_method(p!1)(n)})"
     InlineMethodAnnotation nil)
    (n!1 skolem-const-decl "Method[Name]" InlineMethodAnnotation nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = inline_method(p!1)(n)})"
     InlineMethodAnnotation nil)
    (x2!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = inline_method(p!1)(n)})"
     InlineMethodAnnotation nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (n!1 skolem-const-decl "Method[Name]" InlineMethodAnnotation nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ms!1 skolem-const-decl "finite_set[Method[Name]]"
     InlineMethodAnnotation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (p!1 skolem-const-decl "Program[Name]" InlineMethodAnnotation nil)
    (nonempty? const-decl "bool" sets nil))
   220 210 t nil))
 (inline_method_name 0
  (inline_method_name-1 nil 3407157713 3407220248
   ("" (skosimp*)
    (("" (expand "inline_method") (("" (propax) nil nil)) nil)) nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 56
   40 t shostak))
 (inline_method_arg 0
  (inline_method_arg-1 nil 3407157722 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 31
   30 nil nil))
 (inline_method_pre 0
  (inline_method_pre-1 nil 3407157724 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 32
   40 nil nil))
 (inline_method_post 0
  (inline_method_post-1 nil 3407157727 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 33
   40 nil nil))
 (inline_method_lvars 0
  (inline_method_lvars-1 nil 3407157730 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 31
   40 nil nil))
 (inline_method_body 0
  (inline_method_body-1 nil 3407158189 3407220248
   ("" (skosimp*)
    (("" (expand "inline_method") (("" (propax) nil nil)) nil)) nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 31
   30 t shostak))
 (inline_method_pre_set 0
  (inline_method_pre_set-1 nil 3407157734 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 31
   30 nil nil))
 (inline_method_post_set 0
  (inline_method_post_set-1 nil 3407157736 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 31
   30 nil nil))
 (inline_method_exc_set 0
  (inline_method_exc_set-1 nil 3407157739 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 55
   30 nil nil))
 (inline_method_res 0
  (inline_method_res-1 nil 3407158199 3407220248
   ("" (skosimp*)
    (("" (expand "inline_method") (("" (propax) nil nil)) nil)) nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 32
   30 t nil))
 (inline_method_res_type 0
  (inline_method_res_type-1 nil 3407157742 3407220248
   (";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
    (skosimp*)
    ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
      (expand "inline_method")
      ((";;; Proof inline_method_name-1 for formula InlineMethodAnnotation.inline_method_name"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)) 31
   30 nil nil))
 (inline_method_wf_Body1 0
  (inline_method_wf_Body1-1 nil 3407157747 3407220250
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite-theory "InlineMethodAnnotation")
        (("" (assert)
          ((""
            (auto-rewrite "emptyset" "var_names" "union" "member" "add"
                          "singleton")
            (("" (expand* "wf_Method" "method_pred" "wf_Body")
              (("" (flatten)
                (("" (assert)
                  (("" (split 1)
                    (("1" (skosimp*)
                      (("1" (assert)
                        (("1" (case "var_names(exc_set(m!1))(v!1)")
                          (("1" (inst? -14) (("1" (assert) nil nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "ex(p!1)(m!1) = v!1")
                              (("1"
                                (inst 3 "new_ex_lvar(p!1,m!1)")
                                (("1"
                                  (use "new_ex_lvar_new_lvar")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "new_ex_lvar")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (inst? -9)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst? -7)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (inst 4 "new_res_lvar(p!1,m!1)")
                                    (("3"
                                      (use "new_res_lvar_new_lvar")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "new_res_lvar")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (inst? -15)
                                    (("4" (assert) nil nil))
                                    nil)
                                   ("5"
                                    (inst? -11)
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil) ("3" (propax) nil nil)
                     ("4" (skosimp*)
                      (("4" (lift-if)
                        (("4" (assert)
                          (("4" (inst 1 "new_res_lvar(p!1,m!1)")
                            (("4" (use "new_res_lvar_new_lvar")
                              (("4"
                                (assert)
                                (("4"
                                  (expand "new_res_lvar")
                                  (("4"
                                    (apply
                                     (branch
                                      (split -2)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (new_ex_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil))
   2010 1890 t shostak))
 (inline_method_wf_Body2_TCC1 0
  (inline_method_wf_Body2_TCC1-1 nil 3407157671 3407220251
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil))
   891 860 nil nil))
 (inline_method_wf_Body2_TCC2 0
  (inline_method_wf_Body2_TCC2-1 nil 3407157671 3407220252
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil))
   902 880 nil nil))
 (inline_method_wf_Body2_TCC3 0
  (inline_method_wf_Body2_TCC3-1 nil 3407157671 3407220253
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil))
   934 860 nil nil))
 (inline_method_wf_Body2 0
  (inline_method_wf_Body2-1 nil 3407161656 3407220239
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite-theory "InlineMethodAnnotation")
        (("" (expand* "wf_Method" "method_pred" "wf_Body")
          (("" (assert)
            ((""
              (auto-rewrite "union" "member" "add" "singleton"
                            "emptyset")
              (("" (flatten)
                (("" (assert)
                  (("" (split 1)
                    (("1" (expand "subterm" 1)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (inst? -9) (("1" (assert) nil nil))
                            nil)
                           ("2" (expand "subterm" -1)
                            (("2" (case "subterm(b!1, exc_set(m!1))")
                              (("1"
                                (inst? -14)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "subterm(b!1, Skip)")
                                  (("1"
                                    (expand "subterm" -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "subterm" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "subterm" -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (expand "subterm" -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (inst? -7)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "subterm" -1)
                                                (("2"
                                                  (expand "subterm" -1)
                                                  (("2"
                                                    (expand
                                                     "subterm"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "subterm"
                                                       -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "subterm" -1)
                                            (("2"
                                              (expand "subterm" -1)
                                              (("2"
                                                (inst? -15)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? -11)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst? -2) (("2" (assert) nil nil)) nil)
                     ("3" (inst? -4) (("3" (assert) nil nil)) nil)
                     ("4" (lift-if)
                      (("4" (apply (repeat (rewrite "subterm" -1)))
                        (("4" (prop) nil nil)) nil))
                      nil)
                     ("5" (apply (repeat (rewrite "subterm" -1))) nil
                      nil)
                     ("6" (apply (repeat (rewrite "subterm" -1))) nil
                      nil)
                     ("7" (apply (repeat (rewrite "subterm" -1))) nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil InlineMethodAnnotation nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr adt-constructor-decl "[BoolExpr -> (BExpr?)]" Body_adt nil)
    (BoolVarEval adt-constructor-decl "[Name -> (BoolVarEval?)]"
     Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Body_adt nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (TT adt-constructor-decl "(TT?)" Body_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil))
   2165 1650 t shostak)))
(InlineClassAnnotation
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157695 3407220253
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineClassAnnotation nil)) 27
   30 t nil))
 (IMP_InlineMethodAnnotation_TCC1 0
  (IMP_InlineMethodAnnotation_TCC1-1 nil 3407157695 3407220253
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineClassAnnotation nil)) 30 30
   t nil))
 (inv_inline_class 0
  (inv_inline_class-1 nil 3407162024 3407220253
   ("" (skosimp*)
    (("" (expand "inline_class") (("" (propax) nil nil)) nil)) nil)
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   30 30 t shostak))
 (FieldDecls_inline_class 0
  (FieldDecls_inline_class-1 nil 3407162032 3407220253
   (";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
    (skosimp*)
    ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
      (expand "inline_class")
      ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   29 30 nil nil))
 (GhostDecls_inline_class 0
  (GhostDecls_inline_class-1 nil 3407162037 3407220253
   (";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
    (skosimp*)
    ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
      (expand "inline_class")
      ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   30 30 nil nil))
 (name_inline_class 0
  (name_inline_class-1 nil 3407162039 3407220253
   (";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
    (skosimp*)
    ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
      (expand "inline_class")
      ((";;; Proof inv_inline_class-1 for formula InlineClassAnnotation.inv_inline_class"
        (propax) nil))))
    ";;; developed with shostak decision procedures")
   proved ((inline_class const-decl "Class" InlineClassAnnotation nil))
   30 30 nil nil))
 (inline_class_almost_wf_Class 0
  (inline_class_almost_wf_Class-1 nil 3407163151 3407220253
   ("" (skosimp*)
    (("" (assert)
      (("" (skosimp*)
        (("" (expand "wf_Class")
          (("" (flatten)
            (("" (expand "inline_class")
              (("" (expand "inline_methods")
                (("" (skosimp*)
                  (("" (replace -6)
                    (("" (replace -4)
                      (("" (inst -1 "n!1" "n!2")
                        (("" (assert)
                          (("" (expand "inline_method")
                            (("" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Class const-decl "boolean" WellFormedProgram nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil))
   241 220 t shostak))
 (inline_class_inv_wf_Body1 0
  (inline_class_inv_wf_Body1-1 nil 3407162046 3407220253
   ("" (skosimp*)
    (("" (rewrite "inv_inline_class")
      (("" (assert)
        (("" (expand "wf_Body")
          (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   103 100 t shostak))
 (inline_class_inv_wf_Body2_TCC1 0
  (inline_class_inv_wf_Body2_TCC1-1 nil 3407157695 3407220254
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil))
   605 570 nil nil))
 (inline_class_inv_wf_Body2 0
  (inline_class_inv_wf_Body2-1 nil 3407163383 3407220254
   ("" (skosimp*)
    (("" (rewrite "inv_inline_class")
      (("" (expand "wf_Body")
        (("" (flatten) (("" (inst? -2) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (Name formal-nonempty-type-decl nil InlineClassAnnotation nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   104 100 t shostak)))
(InlineProgramAnnotation
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407157696 3407220254
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineProgramAnnotation nil))
   27 30 t nil))
 (IMP_InlineClassAnnotation_TCC1 0
  (IMP_InlineClassAnnotation_TCC1-1 nil 3407157696 3407220254
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineProgramAnnotation nil)) 30
   30 t nil))
 (inline_program_TCC1 0
  (inline_program_TCC1-1 nil 3407157696 3407220255
   ("" (skosimp*)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                     EXISTS (c1: Class[Name]):
                       classes(p!1)(c1) AND
                        c = inline_class[Name](p!1)(c1)})) : f!1(choose({c1: Class[Name] |
                       classes(p!1)(c1) AND
                        c = inline_class[Name](p!1)(c1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1 :where -2)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "c!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineProgramAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (c1!1 skolem-const-decl "Class[Name]" InlineProgramAnnotation nil)
    (c!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(p!1)(c1) AND c = inline_class[Name](p!1)(c1)})"
     InlineProgramAnnotation nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(p!1)(c1) AND c = inline_class[Name](p!1)(c1)})"
     InlineProgramAnnotation nil)
    (x2!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(p!1)(c1) AND c = inline_class[Name](p!1)(c1)})"
     InlineProgramAnnotation nil)
    (c1!1 skolem-const-decl "Class[Name]" InlineProgramAnnotation nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (c1!1 skolem-const-decl "Class[Name]" InlineProgramAnnotation nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "Program[Name]" InlineProgramAnnotation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (nonempty? const-decl "bool" sets nil))
   453 420 t nil))
 (inline_program_TCC2 0
  (inline_program_TCC2-1 nil 3407157696 3407220258
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        ((""
          (case "getFieldDecls((# classes
                                             := {c: Class[Name]
                                                 |
                                                 EXISTS
                                                 (c1: Class[Name]):
                                                 classes(p!1)(c1)
                                                 AND
                                                 c
                                                 =
                                                 inline_class[Name]
                                                 (p!1)(c1)} #)) = getFieldDecls(p!1)")
          (("1"
            (case "getGhostDecls((# classes
                                             := {c: Class[Name]
                                                 |
                                                 EXISTS
                                                 (c1: Class[Name]):
                                                 classes(p!1)(c1)
                                                 AND
                                                 c
                                                 =
                                                 inline_class[Name]
                                                 (p!1)(c1)} #)) = getGhostDecls(p!1)")
            (("1"
              (case "getLocalDecls((# classes
                                             := {c: Class[Name]
                                                 |
                                                 EXISTS
                                                 (c1: Class[Name]):
                                                 classes(p!1)(c1)
                                                 AND
                                                 c
                                                 =
                                                 inline_class[Name]
                                                 (p!1)(c1)} #)) = union(getLocalDecls(p!1), new_lvars(p!1))")
              (("1" (auto-rewrite (-1 -2 -3))
                (("1" (prop)
                  (("1" (hide-all-but (-4 1))
                    (("1" (expand "wf_program_variables_disjoint_def")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (case-replace
                               "var_names(union(getLocalDecls(p!1), new_lvars(p!1))) = union(var_names(getLocalDecls(p!1)), var_names(new_lvars(p!1)))"
                               :hide? t)
                              (("1"
                                (rewrite "disjoint?_union")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (use "new_lvars_not_field_decls")
                                    (("1"
                                      (rewrite "disjoint?_commutative")
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "disjoint?_commutative")
                                    (("2"
                                      (rewrite "disjoint?_union")
                                      (("2"
                                        (rewrite
                                         "disjoint?_commutative")
                                        (("2"
                                          (use
                                           "new_lvars_not_ghost_decls")
                                          (("2"
                                            (rewrite
                                             "disjoint?_commutative")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "var_names_union2")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-5 1))
                    (("2"
                      (expand "wf_program_variables_not_reserved_words_def")
                      (("2" (expand "declared_var_names")
                        (("2" (assert)
                          (("2"
                            (auto-rewrite "disjoint?" "union" "member"
                                          "empty?" "intersection")
                            (("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (rewrite "var_names_union2")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "new_lvars_not_reserved_words")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (-6 1))
                    (("3"
                      (expand "wf_program_has_unique_class_names_def")
                      (("3" (skosimp*)
                        (("3" (replace -2 :hide? t)
                          (("3" (replace -3 :hide? t)
                            (("3" (rewrite "name_inline_class")
                              (("3"
                                (rewrite "name_inline_class")
                                (("3"
                                  (inst -4 "c1!2" "c1!3")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but (-7 1))
                    (("4" (expand "wf_Classes")
                      (("4" (skosimp*)
                        (("4" (replace -2 :hide? t)
                          (("4" (expand "wf_Class")
                            (("4" (inst -2 "c1!1")
                              (("4"
                                (assert)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (split 1)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (expand "inline_class")
                                        (("1"
                                          (expand "inline_methods")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (replace -3 :hide? t)
                                                (("1"
                                                  (inst -5 "n!1" "n!2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "inline_method"
                                                       -3)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (rewrite "name_inline_class")
                                        (("2"
                                          (expand "inline_class")
                                          (("2"
                                            (expand "inline_methods")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (replace -2 :hide? t)
                                                (("2"
                                                  (inst -4 "n!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "inline_method")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide-all-but (-8 1))
                    (("5" (expand "program_pred")
                      (("5" (skosimp*)
                        (("5" (replace -2 :hide? t)
                          (("5" (rewrite "inv_inline_class")
                            (("5" (inst -2 "c1!1")
                              (("5"
                                (assert)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (split 1)
                                    (("1"
                                      (expand "wf_Body" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use
                                           "inline_class_inv_wf_Body1")
                                          (("1"
                                            (use
                                             "inline_class_inv_wf_Body2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "inv_inline_class")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst? -3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ext_declared_var_names")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (auto-rewrite
                                                                 "union"
                                                                 "member")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "var_names_union2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "inline_class" -1)
                                          (("2"
                                            (expand "inline_methods")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (replace -2 :hide? t)
                                                (("2"
                                                  (inst -4 "n!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "method_pred"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "wf_Body"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "ext_declared_var_names")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "var_names_union2")
                                                              (("2"
                                                                (use
                                                                 "inline_method_wf_Body1")
                                                                (("2"
                                                                  (lemma
                                                                   "inline_method_wf_Body2")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "p!1"
                                                                     "n!1"
                                                                     _)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Method")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (auto-rewrite
                                                                                 "union"
                                                                                 "member")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ext_declared_var_names")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -10)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst?
                                                                                             -4)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (inst?
                                                                                             -10)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (skosimp*)
                                                                                          (("5"
                                                                                            (inst?
                                                                                             -2)
                                                                                            (("5"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("6"
                                                                                          (skosimp*)
                                                                                          (("6"
                                                                                            (inst?
                                                                                             -10)
                                                                                            (("6"
                                                                                              (assert)
                                                                                              (("6"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("7"
                                                                                          (skosimp*)
                                                                                          (("7"
                                                                                            (inst?
                                                                                             -6)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("8"
                                                                                          (skosimp*)
                                                                                          (("8"
                                                                                            (inst?
                                                                                             -10)
                                                                                            (("8"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("9"
                                                                                          (skosimp*)
                                                                                          (("9"
                                                                                            (inst?
                                                                                             -7)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("10"
                                                                                          (assert)
                                                                                          (("10"
                                                                                            (skosimp*)
                                                                                            (("10"
                                                                                              (inst?
                                                                                               -10)
                                                                                              (("10"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("11"
                                                                                          (skosimp*)
                                                                                          (("11"
                                                                                            (inst?
                                                                                             -8)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("12"
                                                                                          (assert)
                                                                                          (("12"
                                                                                            (skosimp*)
                                                                                            (("12"
                                                                                              (inst?
                                                                                               -10)
                                                                                              (("12"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("13"
                                                                                          (skosimp*)
                                                                                          (("13"
                                                                                            (assert)
                                                                                            (("13"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("13"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("14"
                                                                                          (skosimp*)
                                                                                          (("14"
                                                                                            (inst?
                                                                                             -10)
                                                                                            (("14"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "methods")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (auto-rewrite "union" "member")
                  (("2" (apply-extensionality :hide? t)
                    (("1" (expand "getLocalDecls")
                      (("1" (iff)
                        (("1" (split 1)
                          (("1" (skosimp*)
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (inst 1 "c1!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "inline_class")
                                    (("1"
                                      (expand "getLocalDecls")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "inline_methods")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (replace -3 :hide? t)
                                              (("1"
                                                (inst 1 "n!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "inline_method")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "add")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (use
                                                               "new_res_lvar_new_lvar")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "methods")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "new_ex_lvar_new_lvar")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "methods")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (split -1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst 1 "inline_class(p!1)(c!1)")
                                  (("1"
                                    (split 1)
                                    (("1" (inst 1 "c!1") nil nil)
                                     ("2"
                                      (expand "inline_class")
                                      (("2"
                                        (expand "getLocalDecls")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             1
                                             "inline_method(p!1)(m!1)")
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (expand
                                                 "inline_methods")
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "inline_method")
                                                (("2"
                                                  (expand "add")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "new_lvars")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (expand "new_res_lvars")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "methods")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst
                                               1
                                               "inline_class(p!1)(c!1)")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (inst 1 "c!1")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "getLocalDecls")
                                                  (("2"
                                                    (inst
                                                     1
                                                     "inline_method(p!1)(m!1)")
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (expand
                                                         "inline_class")
                                                        (("1"
                                                          (expand
                                                           "inline_methods")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "inline_method")
                                                        (("2"
                                                          (expand
                                                           "add")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "new_ex_lvars")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "methods")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               1
                                               "inline_class(p!1)(c!1)")
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (inst 1 "c!1")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "getLocalDecls")
                                                  (("2"
                                                    (inst
                                                     1
                                                     "inline_method(p!1)(m!1)")
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (expand
                                                         "inline_class")
                                                        (("1"
                                                          (expand
                                                           "inline_methods")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "inline_method")
                                                        (("2"
                                                          (expand
                                                           "add")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "inline_program_TCC1") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (apply-extensionality :hide? t)
                (("1" (auto-rewrite "GhostDecls_inline_class")
                  (("1" (expand "getGhostDecls")
                    (("1" (assert)
                      (("1" (iff)
                        (("1" (split 1)
                          (("1" (skosimp*)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (inst? 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst 1 "inline_class(p!1)(c!1)")
                              (("2"
                                (assert)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "inline_program_TCC1") nil nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (auto-rewrite "FieldDecls_inline_class")
              (("2" (expand "getFieldDecls")
                (("2" (apply-extensionality :hide? t)
                  (("2" (iff)
                    (("2" (split 1)
                      (("1" (skosimp*)
                        (("1" (replace -2)
                          (("1" (assert)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst 1 "inline_class(p!1)(c!1)")
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (use "inline_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil InlineProgramAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (GhostDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (disjoint?_commutative formula-decl nil SetProp nil)
    (new_lvars_not_field_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_lvars_not_ghost_decls formula-decl nil
     InlineNewVariableDeclarations nil)
    (disjoint?_union formula-decl nil SetProp nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names_union2 formula-decl nil ProgramFunctions nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (new_lvars_not_reserved_words formula-decl nil
     InlineNewVariableDeclarations nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (name_inline_class formula-decl nil InlineClassAnnotation nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (inline_method_wf_Body2 formula-decl nil InlineMethodAnnotation
     nil)
    (Body type-decl nil Body_adt nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (inline_method_wf_Body1 formula-decl nil InlineMethodAnnotation
     nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (inline_class_inv_wf_Body1 formula-decl nil InlineClassAnnotation
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (inline_class_inv_wf_Body2 formula-decl nil InlineClassAnnotation
     nil)
    (inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (inline_program_TCC1 subtype-tcc nil InlineProgramAnnotation nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (new_ex_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (p!1 skolem-const-decl "Program[Name]" InlineProgramAnnotation nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (FieldDecls_inline_class formula-decl nil InlineClassAnnotation
     nil))
   3672 3390 t nil))
 (LocalDecls_inline_program 0
  (LocalDecls_inline_program-1 nil 3407163445 3407220261
   ("" (skosimp*)
    (("" (auto-rewrite "union" "add" "member")
      (("" (apply-extensionality :hide? t)
        (("" (expand "getLocalDecls")
          (("" (expand "getLocalDecls")
            (("" (expand "inline_program")
              (("" (iff)
                (("" (split 1)
                  (("1" (skosimp*)
                    (("1" (inst 1 "c1!1")
                      (("1" (assert)
                        (("1" (replace -2 :hide? t)
                          (("1" (expand "inline_class")
                            (("1" (expand "inline_methods")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 :hide? t)
                                      (("1"
                                        (expand "inline_method")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use
                                               "new_res_lvar_new_lvar")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "methods")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "new_ex_lvar_new_lvar")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "methods")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (split -1)
                      (("1" (skosimp*)
                        (("1" (inst 1 "inline_class(p!1)(c!1)")
                          (("1" (split 1)
                            (("1" (inst 1 "c!1") nil nil)
                             ("2" (inst 1 "inline_method(p!1)(m!1)")
                              (("2"
                                (split 1)
                                (("1"
                                  (expand "inline_class")
                                  (("1"
                                    (expand "inline_methods")
                                    (("1" (inst?) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "inline_method")
                                  (("2"
                                    (assert)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "new_lvars")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (expand "new_res_lvars")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (expand "methods")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst 1 "inline_class(p!1)(c!1)")
                                      (("1"
                                        (split 1)
                                        (("1" (inst?) nil nil)
                                         ("2"
                                          (inst
                                           1
                                           "inline_method(p!1)(m!1)")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "inline_class")
                                              (("1"
                                                (expand
                                                 "inline_methods")
                                                (("1" (inst?) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "inline_method")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "new_ex_lvars")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "methods")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst 1 "inline_class(p!1)(c!1)")
                                      (("2"
                                        (split 1)
                                        (("1" (inst 1 "c!1") nil nil)
                                         ("2"
                                          (inst
                                           1
                                           "inline_method(p!1)(m!1)")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "inline_class")
                                              (("1"
                                                (expand
                                                 "inline_methods")
                                                (("1" (inst?) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "inline_method")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_ex_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (new_ex_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (new_res_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (union const-decl "set" sets nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil InlineProgramAnnotation nil)
    (JType type-decl nil JType_adt nil))
   2245 690 t shostak)))
(InlineProgramAnnotationProperties
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3407221848 nil
   ("" (assuming-tcc) nil nil) unfinished nil nil nil nil nil))
 (IMP_InlineProgramAnnotation_TCC1 0
  (IMP_InlineProgramAnnotation_TCC1-1 nil 3407221848 nil
   ("" (assuming-tcc) nil nil) unfinished nil nil nil nil nil))
 (inline_program_class_correspondence 0
  (inline_program_class_correspondence-1 nil 3407222159 3407222164
   ("" (skosimp*)
    (("" (expand "inline_program") (("" (propax) nil nil)) nil)) nil)
   unchecked
   ((inline_program const-decl "Program" InlineProgramAnnotation nil))
   5026 80 t shostak))
 (inline_program_method_correspondence 0
  (inline_program_method_correspondence-1 nil 3407222167 3407222222
   ("" (skosimp*)
    (("" (expand "inline_program")
      (("" (skosimp*)
        (("" (replace -2 :hide? t)
          (("" (expand "inline_class")
            (("" (expand "inline_methods")
              (("" (skosimp*)
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((inline_program const-decl "Program" InlineProgramAnnotation nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil))
   55051 160 t shostak))
 (inline_program_preserves_Field_decls 0
  (inline_program_preserves_Field_decls-1 nil 3407222226 3407222504
   ("" (skosimp*)
    (("" (auto-rewrite "FieldDecls_inline_class")
      (("" (expand "getFieldDecls")
        (("" (apply-extensionality :hide? t)
          (("" (iff)
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (expand "inline_program")
                  (("1" (skosimp*)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst 1 "inline_class(p!1)(c!1)")
                  (("2" (assert)
                    (("2" (expand "inline_program")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil))
   14022 200 t shostak))
 (inline_program_preserves_Ghost_decls 0
  (inline_program_preserves_Ghost_decls-1 nil 3407222302 3407222516
   ("" (skosimp*)
    (("" (auto-rewrite "GhostDecls_inline_class")
      (("" (expand "getGhostDecls")
        (("" (apply-extensionality :hide? t)
          (("" (iff)
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (expand "inline_program")
                  (("1" (skosimp*)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst 1 "inline_class(p!1)(c!1)")
                  (("2" (assert)
                    (("2" (expand "inline_program")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (GhostDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil))
   9645 200 t shostak))
 (inline_program_add_LocalVar_decls 0
  (inline_program_add_LocalVar_decls-1 nil 3407222328 3407222348
   ("" (skosimp*) (("" (use "LocalDecls_inline_program") nil nil)) nil)
   unchecked
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (LocalDecls_inline_program formula-decl nil InlineProgramAnnotation
     nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil))
   19994 140 t shostak))
 (inline_program_ext_declared_var_names 0
  (inline_program_ext_declared_var_names-1 nil 3407222356 3407222574
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      ((""
        (auto-rewrite "union" "member"
                      "inline_program_preserves_Field_decls"
                      "inline_program_preserves_Ghost_decls"
                      "inline_program_add_LocalVar_decls")
        (("" (apply-extensionality :hide? t)
          (("" (rewrite "var_names_union2")
            (("" (assert) (("" (iff) (("" (prop) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((var_names_union2 formula-decl nil ProgramFunctions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (inline_program_preserves_Field_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (inline_program_add_LocalVar_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (inline_program_preserves_Ghost_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (This const-decl "Name" Program nil)
    (new_lvars const-decl "finite_set[LocalVarDecl]"
     InlineNewVariableDeclarations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil))
   51495 180 t shostak))
 (var_names_inline_program 0
  (var_names_inline_program-1 nil 3407227542 3407228848
   ("" (skosimp*)
    (("" (auto-rewrite "subset?" "union" "member")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "var_names" (-1 1))
            (("" (expand "Union")
              (("" (skosimp*)
                (("" (typepred "a!1")
                  (("" (skosimp*)
                    (("" (replace -2 :hide? t)
                      (("" (expand "inline_program")
                        (("" (skosimp*)
                          (("" (replace -2 :hide? t)
                            (("" (inst 1 "var_names(c1!1)")
                              (("1"
                                (expand "var_names" (-2 1))
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite
                                       "FieldDecls_inline_class")
                                      (("1"
                                        (rewrite
                                         "GhostDecls_inline_class")
                                        (("1"
                                          (rewrite "inv_inline_class")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "Union")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (typepred "a!2")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand
                                                         "inline_class")
                                                        (("1"
                                                          (expand
                                                           "inline_methods")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "var_names(n!1)")
                                                                (("1"
                                                                  (expand
                                                                   "var_names"
                                                                   (-3
                                                                    1))
                                                                  (("1"
                                                                    (expand
                                                                     "Union")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (typepred
                                                                         "a!3")
                                                                        (("1"
                                                                          (auto-rewrite-theory
                                                                           "InlineMethodAnnotation")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "a!3")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 1
                                                                                 "a!3")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   -3)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(pre_set(n!1))")
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "var_names"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "var_names(exc_set(n!1))(x!1)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "var_names(exc_set(n!1))")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "var_names"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "var_names(Skip)(x!1)")
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       "var_names"
                                                                                                       "emptyset")
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "var_names"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "var_names"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "ex(p!1)(n!1) = x!1")
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "new_ex_lvar_new_lvar")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "var_names"
                                                                                                                       7)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         7
                                                                                                                         "new_ex_lvar(p!1, n!1)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "new_ex_lvar")
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "methods")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     4
                                                                                                                     "var_names(body(n!1))")
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "var_names"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "var_names"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "add")
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (repeat
                                                                                                                                (rewrite
                                                                                                                                 "var_names"
                                                                                                                                 -1)))
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "emptyset")
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (rewrite
                                                                                                                     "var_names"
                                                                                                                     -1)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (rewrite
                                                                                                                         "var_names"
                                                                                                                         -1)
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "singleton")
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             "var_names"
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (rewrite
                                                                                                                                 "var_names"
                                                                                                                                 -1)
                                                                                                                                (("3"
                                                                                                                                  (rewrite
                                                                                                                                   "var_names"
                                                                                                                                   -1)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "add")
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      (("3"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "new_res_lvar_new_lvar")
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "var_names"
                                                                                                                                               8)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 8
                                                                                                                                                 "new_res_lvar(p!1, n!1)")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "new_res_lvar")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "methods")
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (inst
                                                                                                                                           4
                                                                                                                                           "var_names(res(n!1))")
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (inst
                                                                                                                                           4
                                                                                                                                           "var_names(post_set(n!1))")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "var_names")
                                                                                (("4"
                                                                                  (expand
                                                                                   "emptyset")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (expand*
                                                                                 "var_names"
                                                                                 "emptyset")
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (expand*
                                                                                 "var_names"
                                                                                 "emptyset")
                                                                                (("6"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("7"
                                                                                  (auto-rewrite
                                                                                   "add")
                                                                                  (("7"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     -3)
                                                                                    (("7"
                                                                                      (skosimp*)
                                                                                      (("7"
                                                                                        (case
                                                                                         "methods(p!1)(n!1)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -4)
                                                                                          (("1"
                                                                                            (use
                                                                                             "new_res_lvar_new_lvar")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 5)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   5
                                                                                                   "new_res_lvar(p!1, n!1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "new_ex_lvar_new_lvar")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "var_names"
                                                                                               5)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 5
                                                                                                 "new_ex_lvar(p!1, n!1)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (inst
                                                                                             1
                                                                                             "var_names(lvars(n!1))")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "var_names"
                                                                                               1)
                                                                                              (("3"
                                                                                                (inst?)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "methods")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("8"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("8"
                                                                                  (lift-if)
                                                                                  (("8"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     -3)
                                                                                    (("8"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       -3)
                                                                                      (("8"
                                                                                        (auto-rewrite
                                                                                         "singleton")
                                                                                        (("8"
                                                                                          (assert)
                                                                                          (("8"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -3)
                                                                                            (("8"
                                                                                              (rewrite
                                                                                               "var_names"
                                                                                               -3)
                                                                                              (("8"
                                                                                                (rewrite
                                                                                                 "var_names"
                                                                                                 -3)
                                                                                                (("8"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   -3)
                                                                                                  (("8"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     -3)
                                                                                                    (("8"
                                                                                                      (rewrite
                                                                                                       "var_names"
                                                                                                       -3)
                                                                                                      (("8"
                                                                                                        (expand
                                                                                                         "emptyset")
                                                                                                        (("8"
                                                                                                          (assert)
                                                                                                          (("8"
                                                                                                            (use
                                                                                                             "new_res_lvar_new_lvar")
                                                                                                            (("8"
                                                                                                              (assert)
                                                                                                              (("8"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names"
                                                                                                                   5)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     5
                                                                                                                     "new_res_lvar(p!1, n!1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "new_res_lvar")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "methods")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("9"
                                                                                (inst
                                                                                 1
                                                                                 "a!3")
                                                                                (("9"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Union const-decl "set" sets nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (c1!1 skolem-const-decl "Class[Name]"
     InlineProgramAnnotationProperties nil)
    (p!1 skolem-const-decl "Program[Name]"
     InlineProgramAnnotationProperties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (FieldDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (inv_inline_class formula-decl nil InlineClassAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (a!3 skolem-const-decl "({ns: set[Name] |
        ns = var_names(pre(inline_method(p!1)(n!1)))
     OR ns = var_names(post(inline_method(p!1)(n!1)))
     OR ns = var_names(body(inline_method(p!1)(n!1)))
     OR ns = var_names(pre_set(inline_method(p!1)(n!1)))
     OR ns = var_names(post_set(inline_method(p!1)(n!1)))
     OR ns = var_names(exc_set(inline_method(p!1)(n!1)))
     OR ns = var_names(lvars(inline_method(p!1)(n!1)))
     OR ns = var_names(res(inline_method(p!1)(n!1)))
     OR ns = singleton(name(arg(inline_method(p!1)(n!1))))})"
     InlineProgramAnnotationProperties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (TryCatch adt-constructor-decl
     "[[Stmt, Excpt, Stmt, Stmt] -> (TryCatch?)]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Body_adt
     nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Body_adt
     nil)
    (ex const-decl "Name" InlineNewVariableDeclarations nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr adt-constructor-decl "[BoolExpr -> (BExpr?)]" Body_adt nil)
    (TT adt-constructor-decl "(TT?)" Body_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (BoolVarEval adt-constructor-decl "[Name -> (BoolVarEval?)]"
     Body_adt nil)
    (res const-decl "Name" InlineNewVariableDeclarations nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_res_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (new_res_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (new_ex_lvar_new_lvar formula-decl nil
     InlineNewVariableDeclarations nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (new_ex_lvar const-decl "LocalVarDecl"
     InlineNewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (emptyset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Body_adt nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (inline_method_body const-decl "Body" InlineMethodAnnotation nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (n!1 skolem-const-decl "Method[Name]"
     InlineProgramAnnotationProperties nil)
    (GhostDecls_inline_class formula-decl nil InlineClassAnnotation
     nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   1306284 5580 t shostak))
 (inline_program_preserves_wf_method 0
  (inline_program_preserves_wf_method-1 nil 3407228855 3407228988
   ("" (skosimp*) (("" (typepred "m!1") (("" (postpone) nil nil)) nil))
    nil)
   unfinished nil 132891 660 t shostak))
 (inline_program_preserves_wf_body 0
  (inline_program_preserves_wf_body-1 nil 3407229006 3407229069
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (rewrite "inline_program_ext_declared_var_names")
          (("" (rewrite "inline_program_preserves_Ghost_decls")
            (("" (flatten)
              (("" (assert)
                (("" (split 1)
                  (("1" (skosimp*)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (assert) (("1" (flatten) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inline_program_ext_declared_var_names formula-decl nil
     InlineProgramAnnotationProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (inline_program_preserves_Ghost_decls formula-decl nil
     InlineProgramAnnotationProperties nil))
   62812 120 t shostak))
 (get_class_inline_program 0
  (get_class_inline_program-1 nil 3407229100 3407229155
   ("" (skosimp*)
    (("" (expand "inline_program")
      (("" (assert)
        (("" (expand "get_class")
          (("" (lift-if)
            (("" (assert)
              ((""
                (apply (branch (split -1)
                        ((then (flatten) (assert) (flatten)
                          (assert)))))
                ((""
                  (apply (branch (split -3)
                          ((then (flatten) (assert) (flatten)
                            (assert)))))
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_program const-decl "Program" InlineProgramAnnotation nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil))
   55787 290 t shostak))
 (same_class_name_inline_class_implies_same_class 0
  (same_class_name_inline_class_implies_same_class-1 nil 3407229161
   3407229242
   ("" (skosimp*)
    (("" (expand "inline_program")
      (("" (skosimp*)
        (("" (replace -3 :hide? t)
          (("" (rewrite "name_inline_class")
            (("" (typepred "p!1")
              (("" (expand "wf_Program")
                (("" (flatten)
                  (("" (expand "wf_program_has_unique_class_names_def")
                    (("" (inst -3 "c1!1" "c1!2")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_program const-decl "Program" InlineProgramAnnotation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (name_inline_class formula-decl nil InlineClassAnnotation nil))
   81219 270 t shostak))
 (same_method_name_inline_class_implies_same_method 0
  (same_method_name_inline_class_implies_same_method-1 nil 3407229246
   3407229351
   ("" (skosimp*)
    (("" (replace -2 :hide? t)
      (("" (expand "inline_class")
        (("" (expand "inline_methods")
          (("" (skosimp*)
            (("" (replace -4 :hide? t)
              (("" (expand "inline_method" -4)
                ((""
                  (use "wf_class_has_unique_method_names"
                       ("m1" "m1!1" "m2" "n!1"))
                  (("" (assert)
                    (("" (typepred "p!1")
                      (("" (expand "wf_Program")
                        (("" (flatten)
                          (("" (expand "wf_Classes")
                            (("" (inst?) (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_methods const-decl "finite_set[Method]"
     InlineMethodAnnotation nil)
    (wf_class_has_unique_method_names formula-decl nil
     WellFormedProgram nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil
     InlineProgramAnnotationProperties nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil))
   105685 750 t shostak))
 (lookup_mthd_inline_program 0
  (lookup_mthd_inline_program-1 nil 3407229358 3407229485
   ("" (skosimp*)
    (("" (expand "lookup_mthd")
      (("" (lift-if) (("" (assert) (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 127013 1400 t shostak)))

