(AnnotatedProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3390796236 3392371180
   ("" (subtype-tcc) nil nil) proved-complete
   ((APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil))
   48 40 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3390796236 3392371181
   ("" (subtype-tcc) nil nil) proved-complete
   ((APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil))
   41 30 t nil))
 (initial_AP_state_TCC1 0
  (initial_AP_state_TCC1-1 nil 3389427978 3392371181
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   180 140 nil nil))
 (on_method_entry_AP_TCC1 0
  (on_method_entry_AP_TCC1-1 nil 3391506354 3392371181
   ("" (typepred "on_method_entry")
    (("" (assert)
      (("" (expand "on_method_event_type") (("" (propax) nil nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil))
   209 170 t nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3390796236 3392371183
   ("" (skosimp*)
    (("" (expand "on_method_entry")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2" (replace -2 :dir rl)
                    (("2" (replace -14)
                      (("2"
                        (inst-cp -12 "inv!1" "v!2" "v!4" "s!1" "tau1!3"
                         "tau1!5" "m1!1" "m1!2" "m1!1 - 1" "m1!2 - 1")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (replace -13)
                              (("1"
                                (replace -14)
                                (("1"
                                  (replace -15)
                                  (("1"
                                    (replace -5 :dir rl)
                                    (("1"
                                      (replace -20)
                                      (("1"
                                        (inst
                                         -12
                                         "pre(m!1)"
                                         "v!3"
                                         "v!5"
                                         "tau1!1"
                                         "tau1!4"
                                         "tau1!6"
                                         "m2!1"
                                         "m2!2"
                                         "m2!1 - 1"
                                         "m2!2 - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -12)
                                                (("1"
                                                  (replace -13)
                                                  (("1"
                                                    (replace -14)
                                                    (("1"
                                                      (replace

                                                       -8
                                                       :dir

                                                       rl)
                                                      (("1"
                                                        (replace -25)
                                                        (("1"
                                                          (inst
                                                           -11
                                                           "pre_set(m!1)"
                                                           "tau2!1"
                                                           "s1!1"
                                                           "s2!1"
                                                           "n1!1"
                                                           "n2!1"
                                                           "m3!1"
                                                           "m3!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (Method type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Expr type-decl nil Expr_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-decl nil Val_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   2373 2070 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-1 nil 3390796236 3392371185
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2"
                    (inst -11 "post_set(m!1)" "s!1" "tau1!1" "tau1!2"
                     "n1!1" "n2!1" "m1!1" "m1!2")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (replace -11)
                          (("2" (replace -12)
                            (("2"
                              (inst-cp -13 "post(m!1)" "v!2" "v!4"
                               "tau1!2" "tau1!3" "tau1!5" "m2!1" "m2!2"
                               "m2!1 - 1" "m2!2 - 1")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -14)
                                    (("2"
                                      (replace -15)
                                      (("2"
                                        (replace -16)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5 :dir rl)
                                            (("2"
                                              (replace -21)
                                              (("2"
                                                (replace -22 :dir rl)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (inst
                                                     -13
                                                     "inv!2"
                                                     "v!3"
                                                     "v!5"
                                                     "tau2!1"
                                                     "tau1!4"
                                                     "tau1!6"
                                                     "m3!1"
                                                     "m3!2"
                                                     "m3!1 - 1"
                                                     "m3!2 - 1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -14)
                                                          (("2"
                                                            (replace

                                                             -15)
                                                            (("2"
                                                              (replace

                                                               -13)
                                                              (("2"
                                                                (replace

                                                                 -27
                                                                 :dir

                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (Method type-eq-decl nil Program nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   1947 1690 t nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-1 nil 3390796236 3392371188
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (expand "check_assertion")
              (("2" (skosimp*)
                (("2"
                  (inst -8 "exc_set(m!1)" "s!1" "tau1!1" "tau1!3"
                   "n1!1" "n2!1" "m1!1" "m1!2")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (replace -1)
                        (("2" (replace -8)
                          (("2" (replace -9)
                            (("2" (assert)
                              (("2"
                                (replace -13 :dir rl)
                                (("2"
                                  (replace -3)
                                  (("2"
                                    (inst
                                     -10
                                     "inv!2"
                                     "v!2"
                                     "v!3"
                                     "tau1!3"
                                     "tau1!2"
                                     "tau1!4"
                                     "m2!1"
                                     "m2!2"
                                     "m2!1 - 1"
                                     "m2!2 - 1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -10)
                                          (("2"
                                            (replace -11)
                                            (("2"
                                              (replace -12)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -6 :dir rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Val type-decl nil Val_adt nil))
   3131 1070 t nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3390796236 3392371189
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -3)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2"
                    (inst -4
                     "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                       CaseJML(cdr(branches!1)))" "s!1" "s1!1" "s2!1"
                     "n1!1" "n2!1" "n1!1 - 1" "n2!1 - 1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IfThenElse? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Stmt_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil))
   411 330 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3390796236 3392371189
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -2 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -3)
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (replace -7 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Expr type-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil))
   444 370 t nil))
 (stmt_determ_step_AP 0
  (stmt_determ_step_AP-1 nil 3390125303 3392545414
   ("" (use "stmt_determ_step") nil nil) proved
   ((on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (stmt_determ_step formula-decl nil SemanticsProofs nil))
   47 40 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3390125110 3392545418
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (assert)
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (expand "wf_ghoststate")
              (("" (expand "id")
                (("" (expand "is_ghost")
                  (("" (expand "is_field")
                    (("" (expand "is_local")
                      (("" (expand "defined?")
                        (("" (use "wf_program_variables_disjoint")
                          (("" (use "wf_program_variables_not_this")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (case-replace "vn!1 = This")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "disjoint?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (expand "intersection")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst -1 "vn!1")
                                            (("2"
                                              (inst -1 "vn!1")
                                              (("2"
                                                (inst -1 "vn!1")
                                                (("2"
                                                  (inst -1 "vn!1")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -5 "vn!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (is_local const-decl "boolean" State nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (wf_program_variables_disjoint formula-decl nil WellFormedProgram
     nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (This const-decl "Name" Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_program_variables_not_this formula-decl nil WellFormedProgram
     nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_state const-decl "boolean" State nil))
   3962 2190 t shostak))
 (wf_update_PState 0
  (wf_update_PState-2 nil 3392375532 3392545419 ("" (grind) nil nil)
   proved
   ((defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   478 430 nil nil)
  (wf_update_PState-1 nil 3391156508 3392371192 ("" (grind) nil nil)
   proved
   ((defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    nil (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   468 420 t shostak))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3391169512 3392545419
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil))
   51 50 t shostak))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3391162146 3392545431
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                 ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o")
                          (("1" (skosimp*)
                            (("1" (use "wf_state_update_local")
                              (("1"
                                (case
                                 "wf_state(p!1)
                       (update_local(name(arg!1), param_val!1)
                                    (update_locals({x: [Name, Val[Name]]
                                                    |
                                                    EXISTS
                                                    (l: LocalVarDecl[Name]):
                                                    lvds!1(l)
                                                    AND
                                                    name(l) = PROJ_1(x)
                                                    AND
                                                    default_value(jtype(l))
                                                    =
                                                    PROJ_2(x)})
                                                  (pstate(s!1))))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "wf_state" -1)
                                    (("1"
                                      (inst -1 "This")
                                      (("1" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (use "wf_state_update_local")
                                      (("2"
                                        (case
                                         "wf_state(p!1)
                         (update_locals({x: [Name, Val[Name]] |
                                           EXISTS (l: LocalVarDecl[Name]):
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value(jtype(l)) = PROJ_2(x)})
                                       (pstate(s!1)))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "arg!1")
                                            (("1"
                                              (expand "wf_state" -2)
                                              (("1"
                                                (inst -2 "name(arg!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "var_names")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -1 -2)
                                            (("2"
                                              (use
                                               "wf_state_update_locals")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (replace

                                                       -3
                                                       :dir

                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "default_value")
                                                        (("2"
                                                          (hide -3)
                                                          (("2"
                                                            (expand
                                                             "wf_state"
                                                             -4)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "name(l!1)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                         EXISTS (l: LocalVarDecl[Name]):
                           lvds!1(l) AND
                            name(l) = PROJ_1(x) AND
                             default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                           lvds!1(l) AND
                            name(l) = PROJ_1(x) AND
                             default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   proved
   ((update_stack const-decl "FullState" Semantics nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (defined? const-decl "boolean" ValProp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (wf_state_update_local formula-decl nil State nil)
    (wf_state_update_locals formula-decl nil State nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_field const-decl "boolean" State nil)
    (injective? const-decl "bool" functions nil)
    (is_local const-decl "boolean" State nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Null adt-constructor-decl "(Null?)" Val_adt nil)
    (Null? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (RefType adt-constructor-decl "(RefType?)" JType_adt nil)
    (RefType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Void adt-constructor-decl "(Void?)" JType_adt nil)
    (Void? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (BoolType adt-constructor-decl "(BoolType?)" JType_adt nil)
    (BoolType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (v!1 skolem-const-decl "[Name, Val[Name]]"
     AnnotatedProgramSemantics nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" State nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_locals def-decl "PState" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (This const-decl "Name" Program nil)
    (update_local const-decl "PState" State nil)
    (O const-decl "T3" function_props nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (lvds!1 skolem-const-decl "finite_set[LocalVarDecl[Name]]"
     AnnotatedProgramSemantics nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]"
     AnnotatedProgramSemantics nil)
    (x!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: LocalVarDecl[Name]):
      lvds!1(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     AnnotatedProgramSemantics nil)
    (x1!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: LocalVarDecl[Name]):
      lvds!1(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     AnnotatedProgramSemantics nil)
    (x2!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: LocalVarDecl[Name]):
      lvds!1(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     AnnotatedProgramSemantics nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]"
     AnnotatedProgramSemantics nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]"
     AnnotatedProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nonempty? const-decl "bool" sets nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil))
   12566 11380 t shostak))
 (wf_initial_AP_state 0
  (wf_initial_AP_state-1 nil 3390075578 3392545432
   ("" (skosimp*)
    (("" (expand "initial_AP_state")
      (("" (expand "wf_state")
        (("" (split 1)
          (("1" (lemma "wf_initial_Program_state")
            (("1" (inst -1 "p!1" "this_val!1") (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (use "wf_initial_ghost_state")
            (("1" (expand "id") (("1" (propax) nil nil)) nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (wf_initial_Program_state formula-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (p!1 skolem-const-decl "Program[Name]" AnnotatedProgramSemantics
     nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (Bottom adt-constructor-decl "(Bottom?)" Val_adt nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (initial_Program_state const-decl "PState" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (wf_initial_ghost_state formula-decl nil SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   165 170 t shostak))
 (deriv_expr_yields_wf_state_AP 0
  (deriv_expr_yields_wf_state_AP-1 nil 3390125399 3392545996
   ("" (expand "deriv_expr")
    (("" (use "wf_induction[nat, <]")
      (("1"
        (inst -1 "LAMBDA(n : nat) : FORALL (p: Program, e: Expr, v: Val)
                     (sigma1, sigma2: APState):
                wf_Program(p) IMPLIES
                 (FORALL (c: Stmt)(tau1, tau2: APState)(m: below(n)):
                    wf_state(p)(tau1) IMPLIES
                     deriv_stmt(p)(c, tau1, tau2)(m) IMPLIES wf_state(p)(tau2))
                  IMPLIES
                  wf_state(p)(sigma1) IMPLIES
                   deriv_expr(p)(e, sigma1, v, sigma2)(n)
                             (LAMBDA (p: Program[Name])
                                     (c: Stmt[Name], sigma1, sigma2: APState)
                                     (m: below(n)):
                                deriv_stmt(p)(c, sigma1, sigma2)(m))
                    IMPLIES wf_state(p)(sigma2)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (rewrite "deriv_expr" -5)
                (("2" (split -5)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (skosimp*)
                              (("1"
                                (inst -5 "x!1 - 1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "p!1"
                                     "source(e!1)"
                                     "v!1"
                                     "sigma1!1"
                                     "tau!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "wf_update_PState")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "update_PState"
                                                           1)
                                                          (("2"
                                                            (use
                                                             "wf_state_update")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "deriv_expr_bottom_iff_exception_step")
                                                              (("2"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst? -8)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -6 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst? -10)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp
                                                     -15
                                                     "m1!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst? -16)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -16)
                                                            (("1"
                                                              (inst-cp
                                                               -16
                                                               "m2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -17)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -17)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "wf_state(p!1)(tau3!1)")
                                                                          (("1"
                                                                            (case-replace
                                                                             "wf_state(p!1)(tau4!1)")
                                                                            (("1"
                                                                              (case-replace
                                                                               "wf_state(p!1)(tau5!1)")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "wf_state(p!1)(tau6!1)")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "wf_state(p!1)(tau7!1)")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "wf_state(p!1)(tau8!1)")
                                                                                    (("1"
                                                                                      (replace

                                                                                       -22)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "wf_update_PState")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           5)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "p!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "getLocalDecls(p!1)(arg(md!1))")
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "wf_state_update_local")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_state"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -2
                                                                                                             "name(arg(md!1))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace

                                                                                                         -18)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "lookup_local")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "wf_state"
                                                                                                             -7)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "wf_state"
                                                                                                               -7)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -7
                                                                                                                   "name(arg(md!1))")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -10)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "is_local")
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "var_names")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "getLocalDecls")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       _
                                                                                                       "md!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -14)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "lookup_mthd(id(p!1), a!1, name(e!1))")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "every")
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "methods")
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "c!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "id")
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       -19)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "on_method_exit_normal")
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "check_assertion")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (inst-cp
                                                                                                       -34
                                                                                                       "post_set(md!1)"
                                                                                                       "tau7!1"
                                                                                                       "tau1!2"
                                                                                                       "m1!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -32
                                                                                                           "m2!2 - 1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -33)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -33)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "wf_state(p!1)(tau2!2)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -34
                                                                                                                       "m3!2 - 1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -34)
                                                                                                                              (("1"
                                                                                                                                (replace

                                                                                                                                 -13)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (use
                                                                                                                                               "wf_update_PState")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState")
                                                                                                                                                  (("2"
                                                                                                                                                    (use
                                                                                                                                                     "wf_state_raise")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst?
                                                                                                                                   -37)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace

                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "wf_update_PState")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "update_PState")
                                                                                                                                        (("2"
                                                                                                                                          (use
                                                                                                                                           "wf_state_raise")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst?
                                                                                                                       -36)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "on_method_exit_exceptional")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "wf_state(p!1)(tau1!2)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "wf_state(p!1)(tau2!2)")
                                                                                                  (("1"
                                                                                                    (replace

                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "wf_update_PState")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "check_assertion")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "wf_state(p!1)(tau1!3)")
                                                                                                          (("1"
                                                                                                            (replace

                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_update_PState")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             -30
                                                                                                             "m2!2 -1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -33
                                                                                                                       :where
                                                                                                                       -31)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?
                                                                                                   -29
                                                                                                   :where
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "wf_update_PState")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split
                                                                                     -17)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -21
                                                                                           "m5!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -24
                                                                                                     :where
                                                                                                     -22)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?
                                                                                   -22
                                                                                   :where
                                                                                   -15)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace

                                                                                 -13)
                                                                                (("2"
                                                                                  (split
                                                                                   -10)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "id")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "lookup_mthd(p!1, a!1, name(e!1))")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "every")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "methods")
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_update_stack")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "getLocalDecls")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "getLocalDecls")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "on_method_entry")
                                                                              (("2"
                                                                                (split
                                                                                 -10)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "check_assertion")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -27
                                                                                                 "m1!2 - 1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -28)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -28)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "wf_state(p!1)(tau1!2)")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -29
                                                                                                             "m2!2 - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -29)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -29)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(p!1)(tau2!2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -32)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace

                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (use
                                                                                                                                       "wf_update_PState")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update_PState")
                                                                                                                                          (("2"
                                                                                                                                            (use
                                                                                                                                             "wf_state_raise")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst?
                                                                                                                         -32)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace

                                                                                                             -6)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_update_PState")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -31)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace

                                                                             -7)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_update_PState")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst?
                                                                           -20)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -19)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   proved
   ((deriv_expr const-decl "bool" Semantics nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (p!1 skolem-const-decl "Program[Name]" AnnotatedProgramSemantics
     nil)
    (md!1 skolem-const-decl "Method[Name]" AnnotatedProgramSemantics
     nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics
     nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Expr_adt nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_local const-decl "boolean" State nil)
    (lookup_local const-decl "Val" State nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (old_val_arg!1 skolem-const-decl "Val[Name]"
     AnnotatedProgramSemantics nil)
    (wf_state_update_local formula-decl nil State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (update_local const-decl "PState" State nil)
    (m2!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (wf_state_catch formula-decl nil State nil)
    (m1!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (catch const-decl "PState" State nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (wf_state_raise formula-decl nil State nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (raise const-decl "PState" State nil)
    (m1!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Expr_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Expr_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Expr_adt nil)
    (CondExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (test adt-accessor-decl "[(CondExpr?) -> Expr]" Expr_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (Assign? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (source adt-accessor-decl "[(Assign?) -> Expr]" Expr_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target adt-accessor-decl "[(Assign?) -> Name]" Expr_adt nil)
    (wf_state_update formula-decl nil State nil)
    (v!1 skolem-const-decl "Val[Name]" AnnotatedProgramSemantics nil)
    (deriv_expr_bottom_iff_exception_step formula-decl nil
     SemanticsProofs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   483501 81500 t shostak))
 (deriv_stmt_yields_wf_state_AP 0
  (deriv_stmt_yields_wf_state_AP-2 nil 3392371370 3392545480
   ("" (use "wf_induction[nat, <]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, c: Stmt, sigma1, sigma2: APState):
            wf_Program(p) IMPLIES
             wf_state(p)(sigma1) IMPLIES
              deriv_stmt(p)(c, sigma1, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (assert)
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "deriv_stmt" -4)
                (("2" (split -4)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (expand "execute_CaseJML")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -6 "x!1 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (lemma
                                       "deriv_expr_yields_wf_state_AP")
                                      (("1"
                                        (expand "deriv_expr" -1)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -8
                                                         "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -5 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -5 "m2!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "execute_set")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma
                                                     "deriv_expr_yields_wf_state_AP")
                                                    (("1"
                                                      (expand
                                                       "deriv_expr"
                                                       -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace

                                                               -6)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_GhostVars")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (split
                                                                               -8)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_expr_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "deriv_expr"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_ghoststate")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "id")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "vn!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "update_GhostVars")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_store")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ghost")
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "target(c!1) = vn!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_program_target_of_set_declared")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 4)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -9)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (lemma
                                                               "deriv_expr_yields_wf_state_AP")
                                                              (("1"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace

                                                                 -3)
                                                                (("1"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "update_PState")
                                                                      (("1"
                                                                        (use
                                                                         "wf_state_raise")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -8)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -8
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -9)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace

                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "wf_state_raise")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -7
                                                                                       "m2!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -8)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -8)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace

                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_update_PState")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_state_raise")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "wf_update_PState")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "wf_state_catch")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
    nil)
   proved
   ((wf_nat formula-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]"
     Stmt_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Stmt_adt nil)
    (IfThenElse? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Stmt_adt nil)
    (Sequence? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Stmt_adt nil)
    (wf_state_catch formula-decl nil State nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Stmt_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Stmt_adt nil)
    (catch const-decl "PState" State nil)
    (Skip adt-constructor-decl "(Skip?)" Stmt_adt nil)
    (Skip? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (TryCatch? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Stmt_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Stmt_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Stmt_adt
     nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (expr adt-accessor-decl "[(StmtExpr?) -> Expr[Name]]" Stmt_adt nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (deriv_expr_bottom_iff_exception_step formula-decl nil
     SemanticsProofs nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_program_target_of_set_declared formula-decl nil
     WellFormedProgram nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (update_store const-decl "Store" State nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (source adt-accessor-decl "[(Set?) -> Expr[Name]]" Stmt_adt nil)
    (deriv_expr_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (test adt-accessor-decl
     "[{x: Stmt | IfThenElse?(x) OR While?(x)} -> Expr[Name]]" Stmt_adt
     nil)
    (While? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Stmt_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Stmt_adt
     nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   9561 8750 t nil)
  (deriv_stmt_yields_wf_state_AP-1 nil 3391168604 3392371252
   ("" (use "wf_induction[nat, <]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, c: Stmt, sigma1, sigma2: APState):
        wf_Program(p) IMPLIES
         wf_state(p)(sigma1) IMPLIES
          deriv_stmt(p)(c, sigma1, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (assert)
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "deriv_stmt" -4)
                (("2" (split -4)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (expand "execute_CaseJML")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -6 "x!1 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (lemma
                                       "deriv_expr_yields_wf_state_AP")
                                      (("1"
                                        (expand "deriv_expr" -1)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -8
                                                         "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -5 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -5 "m2!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "execute_set")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma
                                                     "deriv_expr_yields_wf_state_AP")
                                                    (("1"
                                                      (expand
                                                       "deriv_expr"
                                                       -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace

                                                               -6)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_GhostVars")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (split
                                                                               -8)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_expr_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "deriv_expr"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_ghoststate")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -2
                                                                                               "vn!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_GhostVars")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "update_store")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ghost")
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "target(c!1) = vn!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "wf_program_target_of_set_declared")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               4)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -9)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (lemma
                                                               "deriv_expr_yields_wf_state_AP")
                                                              (("1"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace

                                                                 -3)
                                                                (("1"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "update_PState")
                                                                      (("1"
                                                                        (use
                                                                         "wf_state_raise")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -8)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -8
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -9)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace

                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "wf_state_raise")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -7
                                                                                       "m2!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -8)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -8)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace

                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_update_PState")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_state_raise")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "wf_update_PState")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "wf_state_catch")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
    nil)
   unfinished
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Stmt_adt
     nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Stmt_adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (While? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (test adt-accessor-decl
     "[{x: Stmt | IfThenElse?(x) OR While?(x)} -> Expr[Name]]" Stmt_adt
     nil)
    (deriv_expr_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (source adt-accessor-decl "[(Set?) -> Expr[Name]]" Stmt_adt nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_program_target_of_set_declared formula-decl nil
     WellFormedProgram nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (deriv_expr_bottom_iff_exception_step formula-decl nil
     SemanticsProofs nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (expr adt-accessor-decl "[(StmtExpr?) -> Expr[Name]]" Stmt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Stmt_adt
     nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Stmt_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Stmt_adt nil)
    (TryCatch? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Skip? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Stmt_adt nil)
    (catch const-decl "PState" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Stmt_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Stmt_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (wf_state_catch formula-decl nil State nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Stmt_adt nil)
    (Sequence? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Stmt_adt nil)
    (IfThenElse? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Stmt_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]"
     Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   11466 8470 t shostak)))
(APSemanticsProperties
 (non_interference_of_set_stmt 0
  (non_interference_of_set_stmt-1 nil 3389426699 3392545483
   ("" (skosimp*)
    (("" (expand* "deriv_stmt" "execute_set")
      (("" (assert)
        (("" (prop)
          (("" (skosimp)
            (("" (expand "deriv_expr" -7)
              (("" (inst? -7)
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (expand* "update_GhostVars" "update_store")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (Val type-decl nil Val_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n!1 skolem-const-decl "nat" APSemanticsProperties nil))
   2491 680 t nil))
 (CaseJML_exclusive_branches_semantics 0
  (CaseJML_exclusive_branches_semantics-1 nil 3389427193 3392545486
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "deriv_stmt" -7)
        (("2" (assert)
          (("2" (expand "execute_CaseJML")
            (("2" (expand "deriv_stmt" -7)
              (("2" (skosimp*)
                (("2" (lift-if)
                  (("2" (expand "member" -3)
                    (("2" (split)
                      (("1" (hide -2 -5)
                        (("1" (replace -1)
                          (("1" (expand "deriv_expr" -3)
                            (("1" (inst? -3)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -4 -9)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (lemma "stmt_determ_step_AP")
                                          (("1"
                                            (inst
                                             -1
                                             "p!1"
                                             "n1!1"
                                             "m2!1"
                                             "PROJ_2(cons1_var!1)"
                                             "tau!2"
                                             "tau!1"
                                             "s2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "cons1_var!1 = b1!1")
                        (("1" (replace -1)
                          (("1" (hide -3 -4 -6 -10)
                            (("1" (inst -3 "tau!2" "v!1" "m1!1")
                              (("1"
                                (expand "deriv_expr" -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -4 -8)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "stmt_determ_step_AP")
                                            (("1"
                                              (inst
                                               -1
                                               "p!1"
                                               "n1!1"
                                               "m2!1"
                                               "PROJ_2(b1!1)"
                                               "tau!2"
                                               "tau!1"
                                               "s2!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst-cp -5 "cons1_var!1" "tau!2" "v!1"
                           "m1!1")
                          (("1" (expand "deriv_expr" -6)
                            (("1" (expand "member" -6)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -7 -12)
                                    (("1"
                                      (replace -6)
                                      (("1"
                                        (inst
                                         -2
                                         "p!1"
                                         "tau!2"
                                         "s2!1"
                                         "tau!1"
                                         "n1!1"
                                         "m2!1"
                                         "b1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -2)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst? -6)
                                                (("2"
                                                  (expand "member" -6)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (inst? -4)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (assert)
                                              (("4"
                                                (expand
                                                 "deriv_stmt"
                                                 -11)
                                                (("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((m1!1 skolem-const-decl "nat" APSemanticsProperties nil)
    (n!1 skolem-const-decl "nat" APSemanticsProperties nil)
    (stmt_determ_step_AP formula-decl nil AnnotatedProgramSemantics
     nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Expr type-decl nil Expr_adt nil) (Stmt type-decl nil Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   3156 2860 t nil))
 (CaseJML_evaluates_true_stmt 0
  (CaseJML_evaluates_true_stmt-1 nil 3392546029 3392546037
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (assert)
        (("2" (expand "member" -3)
          (("2" (split -3)
            (("1" (replace -1)
              (("1" (hide -1 -2 -5)
                (("1" (expand "deriv_stmt" -3)
                  (("1" (expand "execute_CaseJML")
                    (("1" (expand "deriv_stmt" -3)
                      (("1" (skosimp*)
                        (("1" (lift-if)
                          (("1" (inst -2 "tau!1" "v!1" "m1!1")
                            (("1" (expand "deriv_expr" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -3 -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "deriv_stmt" -6)
              (("2" (expand "execute_CaseJML")
                (("2" (expand "deriv_stmt" -6)
                  (("2" (skosimp*)
                    (("2" (lift-if)
                      (("2"
                        (inst -2 "p!1" "tau!1" "s2!1" "m2!1" "b1!1")
                        (("2" (assert)
                          (("2" (case "b1!1 = cons1_var!1")
                            (("1" (replace -1)
                              (("1"
                                (expand "deriv_expr" -5)
                                (("1"
                                  (inst? -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -11)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 2 "s2!1" "m2!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst -5 "cons1_var!1" "tau!1" "v!1"
                               "m1!1")
                              (("2"
                                (expand "member" -5)
                                (("2"
                                  (expand "before" -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "deriv_expr" -5)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -6 -10)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (reveal -1)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "b2!1"
                                                       "tau!2"
                                                       "v!2"
                                                       "m2!2")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "member"
                                                           -1)
                                                          (("3"
                                                            (expand
                                                             "before"
                                                             -1)
                                                            (("3"
                                                              (replace

                                                               -8
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (expand
                                                   "deriv_stmt"
                                                   -9)
                                                  (("5"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Excpt type-decl nil Excpt_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (> const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (before def-decl "boolean" listfuncs nil)
    (FALSE const-decl "bool" booleans nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (list_induction formula-decl nil list_adt nil)
    (m1!1 skolem-const-decl "nat" APSemanticsProperties nil)
    (n!1 skolem-const-decl "nat" APSemanticsProperties nil))
   6549 3970 t nil)))

