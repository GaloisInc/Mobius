(AnnotatedProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3390796236 3391156069
   ("" (subtype-tcc) nil nil) unchecked
   ((APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil))
   86 50 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3390796236 3391156111
   ("" (subtype-tcc) nil nil) unchecked
   ((APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil))
   5160 140 t nil))
 (initial_AP_state_TCC1 0
  (initial_AP_state_TCC1-1 nil 3389427978 3391156069
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   168 130 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3390796236 3391156073
   ("" (skosimp*)
    (("" (expand "on_method_entry")
      (("" (skosimp*)
        (("" (expand "check_assertion")
          (("" (skosimp*)
            (("" (replace -4 :dir rl)
              (("" (replace -14)
                ((""
                  (inst-cp -2 "inv!1" "v!2" "v!4" "s!1" "tau1!3"
                   "tau1!5" "m1!1" "m1!2" "m1!1 - 1" "m1!2 - 1")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -3)
                        (("1" (replace -4)
                          (("1" (replace -5)
                            (("1" (replace -10 :dir rl)
                              (("1"
                                (replace -20)
                                (("1"
                                  (inst
                                   -2
                                   "pre(m!1)"
                                   "v!3"
                                   "v!5"
                                   "tau1!1"
                                   "tau1!4"
                                   "tau1!6"
                                   "m2!1"
                                   "m2!2"
                                   "m2!1 - 1"
                                   "m2!2 - 1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (replace -15 :dir rl)
                                                (("1"
                                                  (replace -25)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "pre_set(m!1)"
                                                     "tau2!1"
                                                     "s1!1"
                                                     "s2!1"
                                                     "n1!1"
                                                     "n2!1"
                                                     "m3!1"
                                                     "m3!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Expr type-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Method type-eq-decl nil Program nil))
   958 880 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-1 nil 3390796236 3391156074
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal")
      (("" (expand "check_assertion")
        (("" (skosimp*)
          ((""
            (inst -1 "post_set(m!1)" "s!1" "tau1!1" "tau1!4" "n1!1"
             "n2!1" "m1!1" "m1!2")
            (("" (assert)
              (("" (flatten)
                (("" (replace -1)
                  (("" (replace -2)
                    (("" (assert)
                      ((""
                        (inst-cp -3 "post(m!1)" "v!2" "v!4" "tau1!4"
                         "tau1!2" "tau1!5" "m2!1" "m2!2" "m2!1 - 1"
                         "m2!2 - 1")
                        (("" (assert)
                          (("" (flatten)
                            (("" (replace -4)
                              ((""
                                (replace -5)
                                ((""
                                  (replace -6)
                                  ((""
                                    (assert)
                                    ((""
                                      (replace -11 :dir rl)
                                      ((""
                                        (replace -21)
                                        ((""
                                          (replace -22 :dir rl)
                                          ((""
                                            (replace -12)
                                            ((""
                                              (inst
                                               -3
                                               "inv!2"
                                               "v!3"
                                               "v!5"
                                               "tau2!1"
                                               "tau1!3"
                                               "tau1!6"
                                               "m3!1"
                                               "m3!2"
                                               "m3!1 - 1"
                                               "m3!2 - 1")
                                              ((""
                                                (assert)
                                                ((""
                                                  (flatten)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (replace -3)
                                                      ((""
                                                        (replace -4)
                                                        ((""
                                                          (replace -5)
                                                          ((""
                                                            (replace

                                                             -17
                                                             :dir

                                                             rl)
                                                            ((""
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (Method type-eq-decl nil Program nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   553 460 t nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-1 nil 3390796236 3391156074
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional")
      (("" (expand "check_assertion")
        (("" (skosimp*)
          ((""
            (inst -1 "exc_set(m!1)" "s!1" "tau1!1" "tau1!3" "n1!1"
             "n2!1" "m1!1" "m1!2")
            (("" (assert)
              (("" (flatten)
                (("" (replace -1)
                  (("" (replace -2)
                    (("" (assert)
                      (("" (replace -13 :dir rl)
                        (("" (replace -6)
                          ((""
                            (inst -3 "inv!2" "v!2" "v!3" "tau1!3"
                             "tau1!2" "tau1!4" "m2!1" "m2!2" "m2!1 - 1"
                             "m2!2 - 1")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (replace -3)
                                  ((""
                                    (replace -4)
                                    ((""
                                      (replace -5)
                                      ((""
                                        (assert)
                                        ((""
                                          (replace -11 :dir rl)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (Method type-eq-decl nil Program nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   394 330 t nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3390796236 3391156075
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -3)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2"
                    (inst -4
                     "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                       CaseJML(cdr(branches!1)))" "s!1" "s1!1" "s2!1"
                     "n1!1" "n2!1" "n1!1 - 1" "n2!1 - 1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IfThenElse? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Stmt_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil))
   221 190 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3390796236 3391156075
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -2 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -3)
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (replace -7 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Expr type-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil))
   159 130 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3390802010 3391156077
   ("" (assuming-tcc) nil nil) unfinished nil 2605 2390 nil nil))
 (stmt_determ_step_AP 0
  (stmt_determ_step_AP-1 nil 3390125303 3391156077
   ("" (use "stmt_determ_step") nil nil) unchecked
   ((on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (stmt_determ_step formula-decl nil SemanticsProofs nil))
   34 30 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3390125110 3391156078
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (assert)
        (("" (flatten)
          (("" (expand "is_ghost")
            (("" (expand "wf_state")
              (("" (expand "is_field")
                (("" (expand "is_local")
                  (("" (assert)
                    (("" (expand "defined?")
                      (("" (use "wf_program_variables_disjoint")
                        (("" (assert)
                          (("" (flatten)
                            (("" (expand "disjoint?")
                              ((""
                                (expand "empty?")
                                ((""
                                  (expand "intersection")
                                  ((""
                                    (expand "member")
                                    ((""
                                      (inst?)
                                      ((""
                                        (inst?)
                                        ((""
                                          (inst?)
                                          ((""
                                            (inst?)
                                            ((""
                                              (inst?)
                                              ((""
                                                (assert)
                                                ((""
                                                  (flatten)
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (defined? const-decl "boolean" ValProp nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (wf_program_variables_disjoint formula-decl nil WellFormedProgram
     nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (is_field const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil))
   373 360 t shostak))
 (wf_update_PState 0
  (wf_update_PState-1 nil 3391156508 3391156623 ("" (grind) nil nil)
   unchecked
   ((defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   2778 540 t shostak))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3391169512 3391169606
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten)
          (("" (assert)
            (("" (skosimp*)
              (("" (inst?)
                (("" (assert)
                  (("" (expand "is_ghost")
                    (("" (assert) (("" (postpone) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 94031 2300 t shostak))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3391162146 3391168513
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (lemma "wf_update_PState")
        (("" (inst? -1 :where 1)
          (("1" (assert)
            (("1" (inst -1 "p!1")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (expand "update_PState")
                    (("1" (expand "o")
                      (("1" (skosimp*)
                        (("1" (use "wf_state_update_local")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (postpone) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (use "wf_state_update_local")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (expand "wf_state" -1)
                                        (("1" (postpone) nil nil))
                                        nil)
                                       ("2"
                                        (use "wf_state_update_locals")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (replace -3 :dir rl)
                                              (("1"
                                                (expand "wf_state" -4)
                                                (("1"
                                                  (inst
                                                   -4
                                                   "proj_1(v!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (comment
                                                         "needed that ldvs is subset of all local var declarations")
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          ";;; needed that ldvs is subset of all local var declarations"))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "lvds!1")
                                          (("2"
                                            (expand "is_finite")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 1
                                                 "N!1"
                                                 "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
                                                (("1"
                                                  (expand "injective?")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "nonempty_exists")
                                                        (("2"
                                                          (typepred
                                                           "x2!1")
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (rewrite
                                                         "nonempty_exists")
                                                        (("3"
                                                          (typepred
                                                           "x1!1")
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (rewrite
                                                     "nonempty_exists")
                                                    (("2"
                                                      (typepred "x!1")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3"
                                    (typepred "lvds!1")
                                    (("3"
                                      (expand "is_finite")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst
                                           1
                                           "N!1"
                                           "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "nonempty_exists")
                                                  (("2"
                                                    (typepred "x2!1")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (rewrite
                                                   "nonempty_exists")
                                                  (("3"
                                                    (typepred "x1!1")
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (rewrite
                                               "nonempty_exists")
                                              (("2"
                                                (typepred "x!1")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (typepred "lvds!1")
                            (("3" (expand "is_finite")
                              (("3"
                                (skosimp*)
                                (("3"
                                  (inst
                                   1
                                   "N!1"
                                   "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "nonempty_exists")
                                          (("2"
                                            (typepred "x2!1")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite "nonempty_exists")
                                          (("3"
                                            (typepred "x1!1")
                                            (("3"
                                              (skosimp*)
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (rewrite "nonempty_exists")
                                      (("2"
                                        (typepred "x!1")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "lvds!1")
            (("2" (expand "is_finite")
              (("2" (skosimp*)
                (("2"
                  (inst 1 "N!1" "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
                  (("1" (expand "injective?")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (typepred "x2!1")
                            (("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (typepred "x1!1")
                            (("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "nonempty_exists")
                      (("2" (typepred "x!1")
                        (("2" (skosimp*)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 445157 19970 t shostak))
 (wf_initial_AP_state 0
  (wf_initial_AP_state-1 nil 3390075578 3391156078
   ("" (skosimp*)
    (("" (expand "initial_AP_state")
      (("" (expand "wf_state")
        (("" (expand "is_ghost")
          (("" (split 1)
            (("1" (lemma "wf_initial_Program_state")
              (("1" (inst -1 "p!1") (("1" (assert) nil nil)) nil)) nil)
             ("2" (skosimp*)
              (("2" (expand "get_GhostDecl")
                (("2" (expand "var_names")
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (split 1)
                          (("1" (skosimp*)
                            (("1" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (rewrite "nonempty_exists")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (typepred
                                   "(choose({g: FieldDecl[Name] |
                        getGhostDecls(p!1)(g) AND name(g) = vn!1})`init_val)")
                                  (("1" (grind) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (wf_initial_Program_state formula-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   603 500 t shostak))
 (deriv_expr_yields_wf_state_AP 0
  (deriv_expr_yields_wf_state_AP-1 nil 3390125399 3391163105
   ("" (expand "deriv_expr")
    (("" (use "wf_induction[nat, <]")
      (("1"
        (inst -1 "LAMBDA(n : nat) : FORALL (p: Program, e: Expr, v: Val)
                 (sigma1, sigma2: APState):
            wf_Program(p) IMPLIES
             (FORALL (c: Stmt)(tau1, tau2: APState)(m: below(n)):
                wf_state(p)(tau1) IMPLIES
                 deriv_stmt(p)(c, tau1, tau2)(m) IMPLIES wf_state(p)(tau2))
              IMPLIES
              wf_state(p)(sigma1) IMPLIES
               deriv_expr(p)(e, sigma1, v, sigma2)(n)
                         (LAMBDA (p: Program[Name])
                                 (c: Stmt[Name], sigma1, sigma2: APState)
                                 (m: below(n)):
                            deriv_stmt(p)(c, sigma1, sigma2)(m))
                IMPLIES wf_state(p)(sigma2)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (rewrite "deriv_expr" -5)
                (("2" (split -5)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (skosimp*)
                              (("1"
                                (inst -5 "x!1 - 1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "p!1"
                                     "source(e!1)"
                                     "v!1"
                                     "sigma1!1"
                                     "tau!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "wf_update_PState")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "update_PState"
                                                           1)
                                                          (("2"
                                                            (use
                                                             "wf_state_update")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "deriv_expr_bottom_iff_exception_step")
                                                              (("2"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst? -8)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -6 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst? -10)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp
                                                     -14
                                                     "m1!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst? -15)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -15)
                                                            (("1"
                                                              (inst-cp
                                                               -15
                                                               "m2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -16)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -16)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "wf_state(p!1)(tau3!1)")
                                                                          (("1"
                                                                            (expand
                                                                             "on_method_entry")
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (expand
                                                                                 "check_assertion")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -26
                                                                                       "m1!2 - 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -27)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -27)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "wf_state(p!1)(tau1!2)")
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -28
                                                                                                   "m2!2 - 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -29)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -29)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "wf_state(p!1)(tau2!2)")
                                                                                                            (("1"
                                                                                                              (inst-cp
                                                                                                               -32
                                                                                                               "pre_set(md!1)"
                                                                                                               "tau2!2"
                                                                                                               "tau4!1"
                                                                                                               "m3!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "wf_state(p!1)(tau5!1)")
                                                                                                                  (("1"
                                                                                                                    (inst-cp
                                                                                                                     -33
                                                                                                                     "body(md!1)"
                                                                                                                     "tau5!1"
                                                                                                                     "tau6!1"
                                                                                                                     "m4!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "wf_state(p!1)(tau7!1)")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(p!1)(tau8!1)")
                                                                                                                          (("1"
                                                                                                                            (replace

                                                                                                                             -32)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "wf_update_PState")
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -1
                                                                                                                                 :where
                                                                                                                                 5)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "p!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "update_PState")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (use
                                                                                                                                             "wf_state_update_local")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state"
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "name(arg(md!1))")
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "var_names")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           2
                                                                                                                                                           "arg(md!1)")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "getLocalDecls")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("1"
                                                                                                                                                                (postpone)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (postpone)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -30)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_normal")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -44
                                                                                                                                               "post_set(md!1)"
                                                                                                                                               "tau7!1"
                                                                                                                                               "tau1!5"
                                                                                                                                               "m1!3")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst-cp
                                                                                                                                                   -42
                                                                                                                                                   "m2!3 - 1")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -43)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -43)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "wf_state(p!1)(tau2!3)")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -44
                                                                                                                                                               "m3!3 - 1")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -44)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       -44)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace

                                                                                                                                                                         -13)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lift-if)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "wf_update_PState")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "update_PState")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (use
                                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst?
                                                                                                                                                                           -47)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (replace

                                                                                                                                                               -7)
                                                                                                                                                              (("2"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?
                                                                                                                                                               -46)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (inst-cp
                                                                                                                                               -40
                                                                                                                                               "exc_set(md!1)"
                                                                                                                                               "tau7!1"
                                                                                                                                               "tau1!5"
                                                                                                                                               "m1!3")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -38
                                                                                                                                                   "m2!3 - 1")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?
                                                                                                                                                       -38)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -38)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace

                                                                                                                                                             -7)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_update_PState")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?
                                                                                                                                                               -41)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (split
                                                                                                                           -28)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -31
                                                                                                                                 "m5!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (inst?
                                                                                                                                     -31)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -34
                                                                                                                                           "c!1"
                                                                                                                                           "tau1!5"
                                                                                                                                           "tau2!3"
                                                                                                                                           "m!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace

                                                                                                                     -25)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "wf_state_update_stack")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace

                                                                                                               -20)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_update_PState")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -32)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace

                                                                                                   -15)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "wf_update_PState")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -30)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace

                                                                             -7)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (use
                                                                                           "wf_state_raise")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst?
                                                                           -19)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -18)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   unfinished nil 692740 70450 t shostak))
 (deriv_stmt_yields_wf_state_AP 0
  (deriv_stmt_yields_wf_state_AP-1 nil 3391168604 3391169438
   ("" (use "wf_induction[nat, <]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, c: Stmt, sigma1, sigma2: APState):
        wf_Program(p) IMPLIES
         wf_state(p)(sigma1) IMPLIES
          deriv_stmt(p)(c, sigma1, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (assert)
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "deriv_stmt" -4)
                (("2" (split -4)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (expand "execute_CaseJML")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -6 "x!1 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (lemma
                                       "deriv_expr_yields_wf_state_AP")
                                      (("1"
                                        (expand "deriv_expr" -1)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -8
                                                         "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -5 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -5 "m2!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "execute_set")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma
                                                     "deriv_expr_yields_wf_state_AP")
                                                    (("1"
                                                      (expand
                                                       "deriv_expr"
                                                       -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace

                                                               -6)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -9)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (lemma
                                                               "deriv_expr_yields_wf_state_AP")
                                                              (("1"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace

                                                                 -3)
                                                                (("1"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "update_PState")
                                                                      (("1"
                                                                        (use
                                                                         "wf_state_raise")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -8)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -8
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -9)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace

                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "wf_state_raise")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -7
                                                                                       "m2!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -8)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -8)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace

                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_update_PState")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_state_raise")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "wf_update_PState")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "wf_state_catch")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
    nil)
   unfinished nil 833923 46680 t shostak)))
(APSemanticsProperties
 (non_interference_of_set_stmt 0
  (non_interference_of_set_stmt-1 nil 3389426699 3391156083
   ("" (skosimp*)
    (("" (expand* "deriv_stmt" "execute_set")
      (("" (assert)
        (("" (prop)
          (("" (skosimp)
            (("" (expand "deriv_expr" -7)
              (("" (inst? -7)
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (expand* "update_GhostVars" "update_store")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (Val type-decl nil Val_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   696 620 t nil))
 (CaseJML_exclusive_branches_semantics 0
  (CaseJML_exclusive_branches_semantics-1 nil 3389427193 3391156087
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "deriv_stmt" -7)
        (("2" (assert)
          (("2" (expand "execute_CaseJML")
            (("2" (expand "deriv_stmt" -7)
              (("2" (skosimp*)
                (("2" (lift-if)
                  (("2" (expand "member" -3)
                    (("2" (split)
                      (("1" (hide -2 -5)
                        (("1" (replace -1)
                          (("1" (expand "deriv_expr" -3)
                            (("1" (inst? -3)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -4 -9)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (lemma "stmt_determ_step_AP")
                                          (("1"
                                            (inst
                                             -1
                                             "p!1"
                                             "n1!1"
                                             "m2!1"
                                             "PROJ_2(cons1_var!1)"
                                             "tau!2"
                                             "tau!1"
                                             "s2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "cons1_var!1 = b1!1")
                        (("1" (replace -1)
                          (("1" (hide -3 -4 -6 -10)
                            (("1" (inst -3 "tau!2" "v!1" "m1!1")
                              (("1"
                                (expand "deriv_expr" -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -4 -8)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "stmt_determ_step_AP")
                                            (("1"
                                              (inst
                                               -1
                                               "p!1"
                                               "n1!1"
                                               "m2!1"
                                               "PROJ_2(b1!1)"
                                               "tau!2"
                                               "tau!1"
                                               "s2!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst-cp -5 "cons1_var!1" "tau!2" "v!1"
                           "m1!1")
                          (("1" (expand "deriv_expr" -6)
                            (("1" (expand "member" -6)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -7 -12)
                                    (("1"
                                      (replace -6)
                                      (("1"
                                        (inst
                                         -2
                                         "p!1"
                                         "tau!2"
                                         "s2!1"
                                         "tau!1"
                                         "n1!1"
                                         "m2!1"
                                         "b1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -2)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst? -6)
                                                (("2"
                                                  (expand "member" -6)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (inst? -4)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (assert)
                                              (("4"
                                                (expand
                                                 "deriv_stmt"
                                                 -11)
                                                (("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((stmt_determ_step_AP formula-decl nil AnnotatedProgramSemantics
     nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Expr type-decl nil Expr_adt nil) (Stmt type-decl nil Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   3102 2740 t nil))
 (CaseJML_evalueates_true_stmt 0
  (CaseJML_evalueates_true_stmt-1 nil 3389427256 3391156091
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (assert)
        (("2" (expand "member" -3)
          (("2" (split -3)
            (("1" (replace -1)
              (("1" (hide -1 -2 -5)
                (("1" (expand "deriv_stmt" -3)
                  (("1" (expand "execute_CaseJML")
                    (("1" (expand "deriv_stmt" -3)
                      (("1" (skosimp*)
                        (("1" (lift-if)
                          (("1" (inst -2 "tau!1" "v!1" "m1!1")
                            (("1" (expand "deriv_expr" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -3 -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "deriv_stmt" -6)
              (("2" (expand "execute_CaseJML")
                (("2" (expand "deriv_stmt" -6)
                  (("2" (skosimp*)
                    (("2" (lift-if)
                      (("2"
                        (inst -2 "p!1" "tau!1" "s2!1" "m2!1" "b1!1")
                        (("2" (assert)
                          (("2" (case "b1!1 = cons1_var!1")
                            (("1" (replace -1)
                              (("1"
                                (expand "deriv_expr" -5)
                                (("1"
                                  (inst? -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -11)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 2 "s2!1" "m2!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst -5 "cons1_var!1" "tau!1" "v!1"
                               "m1!1")
                              (("2"
                                (expand "member" -5)
                                (("2"
                                  (expand "before" -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "deriv_expr" -5)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -6 -10)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (reveal -1)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "b2!1"
                                                       "tau!2"
                                                       "v!2"
                                                       "m2!2")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "member"
                                                           -1)
                                                          (("3"
                                                            (expand
                                                             "before"
                                                             -1)
                                                            (("3"
                                                              (replace

                                                               -8
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (expand
                                                   "deriv_stmt"
                                                   -9)
                                                  (("5"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Expr type-decl nil Expr_adt nil) (Stmt type-decl nil Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (FALSE const-decl "bool" booleans nil)
    (before def-decl "boolean" listfuncs nil)
    (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   4896 3280 nil nil)))

