(AnnotatedProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3390796236 3396347582
   ("" (subtype-tcc) nil nil) unchecked
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil)
   41 41 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3390796236 3396347583
   ("" (subtype-tcc) nil nil) unchecked (nil nil nil nil nil) 23 23 t
   nil))
 (initial_AP_state_TCC1 0
  (initial_AP_state_TCC1-1 nil 3389427978 3396347583
   ("" (subtype-tcc) nil nil) unchecked
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil nil)
   29 29 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3390796236 3396347585
   ("" (skosimp*)
    (("" (expand "on_method_entry")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2" (replace -2 :dir rl)
                    (("2" (replace -13)
                      (("2"
                        (inst-cp -11 "inv!1" "v!4" "v!2" "s!1" "tau1!5"
                         "tau1!3" "m1!2" "m1!1" "m1!2 - 1" "m1!1 - 1")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (replace -12)
                              (("1"
                                (replace -13)
                                (("1"
                                  (replace -14)
                                  (("1"
                                    (replace -5 :dir rl)
                                    (("1"
                                      (replace -19)
                                      (("1"
                                        (inst-cp
                                         -11
                                         "pre(m!1)"
                                         "v!5"
                                         "v!3"
                                         "tau1!1"
                                         "tau1!6"
                                         "tau1!4"
                                         "m2!2"
                                         "m2!1"
                                         "m2!2 - 1"
                                         "m2!1 - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -12)
                                              (("1"
                                                (replace -13)
                                                (("1"
                                                  (replace -14)
                                                  (("1"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace -25)
                                                      (("1"
                                                        (inst
                                                         -11
                                                         "pre_set(m!1)"
                                                         "Unit"
                                                         "Unit"
                                                         "tau2!1"
                                                         "s1!1"
                                                         "s2!1"
                                                         "n1!1"
                                                         "n2!1"
                                                         "m3!2"
                                                         "m3!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (id_preserves application-judgement "S" identity_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil
    nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (int_minus_int_is_int application-judgement "int" integers nil))
   242 242 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-1 nil 3390796236 3396347587
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2"
                    (inst-cp -11 "post_set(m!1)" "Unit" "Unit" "s!1"
                     "tau1!2" "tau1!1" "n1!1" "n2!1" "m1!2" "m1!1")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (replace -12)
                          (("2" (replace -13)
                            (("2"
                              (inst-cp -11 "post(m!1)" "v!4" "v!2"
                               "tau1!1" "tau1!5" "tau1!3" "m2!2" "m2!1"
                               "m2!2 - 1" "m2!1 - 1")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -12)
                                    (("2"
                                      (replace -13)
                                      (("2"
                                        (replace -14)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5 :dir rl)
                                            (("2"
                                              (replace -21)
                                              (("2"
                                                (replace -22 :dir rl)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (inst
                                                     -11
                                                     "inv!2"
                                                     "v!5"
                                                     "v!3"
                                                     "tau2!1"
                                                     "tau1!6"
                                                     "tau1!4"
                                                     "m3!2"
                                                     "m3!1"
                                                     "m3!2 - 1"
                                                     "m3!1 - 1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -11)
                                                          (("2"
                                                            (replace
                                                             -12)
                                                            (("2"
                                                              (replace
                                                               -13)
                                                              (("2"
                                                                (replace
                                                                 -27
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil nil nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil
    (int_minus_int_is_int application-judgement "int" integers nil))
   206 206 t nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-1 nil 3390796236 3396347588
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "check_assertion")
              (("1" (skosimp*)
                (("1"
                  (inst-cp -10 "exc_set(m!1)" "Unit" "Unit"
                   "update_PState(s!1, catch)" "tau1!3" "tau1!1" "n1!1"
                   "n2!1" "m1!2" "m1!1")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -11)
                        (("1" (replace -15 :dir rl)
                          (("1" (replace -4)
                            (("1"
                              (inst -10 "inv!2" "v!3" "v!2" "tau1!3"
                               "tau1!4" "tau1!2" "m2!2" "m2!1"
                               "m2!2 - 1" "m2!1 - 1")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -10)
                                    (("1"
                                      (replace -11)
                                      (("1"
                                        (replace -12)
                                        (("1"
                                          (replace -7 :dir rl)
                                          (("1"
                                            (replace -20)
                                            (("1"
                                              (replace -21 :dir rl)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil))
   78 77 t nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3390796236 3396347589
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -3)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2"
                    (inst -4
                     "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                           CaseJML(cdr(branches!1)))" "Unit" "Unit"
                     "s!1" "s1!1" "s2!1" "n1!1" "n2!1" "n1!1 - 1"
                     "n2!1 - 1")
                    (("2" (assert)
                      (("2" (split -4)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil)
   87 87 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3390796236 3396347589
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -3)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (replace -6 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   32 31 t nil))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3395147174 3396347590
   ("" (skosimp)
    (("" (expand* "wf_state" "declared_var_names")
      (("" (expand* "wf_state" "wf_ghoststate" "id")
        (("" (flatten)
          (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil nil nil nil
    (id const-decl "(bijective?[T, T])" identity nil))
   28 28 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3390125110 3396347593
   ("" (skosimp)
    (("" (expand "wf_state")
      ((""
        (expand* "wf_state" "wf_ghoststate" "id" "is_ghost" "is_field"
         "is_local")
        (("" (flatten)
          (("" (use "wf_program_variables_disjoint")
            (("" (use "wf_program_variables_not_reserved_words")
              (("" (assert)
                (("" (flatten)
                  (("" (case-replace "vn!1 = This")
                    (("1" (hide -3 -4 -5)
                      (("1"
                        (expand* "disjoint?" "intersection" "empty?"
                         "member" "declared_var_names")
                        (("1" (inst? -)
                          (("1" (split)
                            (("1" (inst? -3)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "reserved_words")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2"
                        (expand* "disjoint?" "empty?" "intersection"
                         "member")
                        (("2" (inst - "vn!1")
                          (("2" (inst - "vn!1")
                            (("2" (inst - "vn!1")
                              (("2"
                                (inst - "vn!1")
                                (("2"
                                  (inst - "vn!1")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil nil (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil)
   299 299 t shostak))
 (wf_update_PState 0
  (wf_update_PState-2 nil 3392375532 3396347593 ("" (grind) nil nil)
   unfinished
   (nil nil nil nil nil (boolean nonempty-type-decl nil booleans nil)
    nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    nil nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil)
   62 62 nil nil)
  (wf_update_PState-1 nil 3391156508 3392371192 ("" (grind) nil nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   468 420 t shostak))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3391169512 3396347593
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished (nil nil) 2 3 t shostak))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3391162146 3396347597
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                        ({x: [Name, Val[Name]] |
                            EXISTS (l: LocalVarDecl[Name]):
                              lvds!1(l) AND
                               name(l) = PROJ_1(x) AND
                                default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(p!1)
                                (update_local(name(arg!1), param_val!1)
                                             (update_locals({x: [Name, Val[Name]]
                                                             |
                                                             EXISTS
                                                             (l: LocalVarDecl[Name]):
                                                             lvds!1(l)
                                                             AND
                                                             name(l) = PROJ_1(x)
                                                             AND
                                                             default_value(jtype(l))
                                                             =
                                                             PROJ_2(x)})
                                                           (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(p!1)
                                    (update_locals({x: [Name, Val[Name]] |
                                                      EXISTS (l: LocalVarDecl[Name]):
                                                        lvds!1(l) AND
                                                         name(l) = PROJ_1(x) AND
                                                          default_value(jtype(l)) = PROJ_2(x)})
                                                  (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "var_names")
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                               EXISTS (l: LocalVarDecl[Name]):
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil
    (injective? const-decl "bool" functions nil) nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil)
   338 338 t shostak))
 (wf_initial_AP_state 0
  (wf_initial_AP_state-1 nil 3390075578 3396347597
   ("" (skosimp*)
    (("" (expand "initial_AP_state")
      (("" (expand "wf_state")
        (("" (split 1)
          (("1" (lemma "wf_initial_Program_state")
            (("1" (inst -1 "p!1" "this_val!1") (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (use "wf_initial_ghost_state")
            (("1" (expand "id") (("1" (propax) nil nil)) nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    nil nil (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil) nil nil nil
    nil nil)
   11 12 t shostak))
 (on_method_entry_AP_TCC1 0
  (on_method_entry_AP_TCC1-1 nil 3391506354 3396347597
   ("" (typepred "on_method_entry")
    (("" (assert)
      (("" (expand "on_method_event_type") (("" (propax) nil nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil nil nil
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil) nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    nil (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   32 32 t nil))
 (determ_step_AP 0
  (determ_step_AP-1 nil 3396347126 3396347597
   ("" (skosimp*)
    (("" (use "derive_determ_step") (("" (assert) nil nil)) nil)) nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil)
   24 24 t shostak))
 (derive_bottom_iff_exception_step_AP 0
  (derive_bottom_iff_exception_step_AP-1 nil 3396347163 3396347597
   ("" (skosimp*)
    (("" (use "derive_bottom_iff_exception_step")
      (("" (assert) nil nil)) nil))
    nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil)
   5 5 t shostak))
 (derive_boolean_expr_type_AP 0
  (derive_boolean_expr_type_AP-1 nil 3396347184 3396347598
   ("" (skosimp*)
    (("" (use "derive_boolean_expr_type") (("" (assert) nil nil)) nil))
    nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil)
   22 23 t shostak)))
(APSemanticsProperties
 (non_interference_of_set_stmt_TCC1 0
  (non_interference_of_set_stmt_TCC1-1 nil 3397310672 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (non_interference_of_set_stmt 0
  (non_interference_of_set_stmt-1 nil 3389426699 3396347840
   ("" (skosimp*)
    (("" (expand "derive")
      (("" (expand "spec_expr_has_no_side_effects")
        (("" (expand "execute_set")
          (("" (assert)
            (("" (prop)
              (("" (skosimp)
                (("" (inst?)
                  (("1" (assert)
                    (("1" (replace -7)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "update_GhostVars")
                            (("1" (expand "update_store")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   9591 120 t nil))
 (CaseJML_evaluates_true_stmt 0
  (CaseJML_evaluates_true_stmt-1 nil 3392546029 3396346958
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (assert)
        (("2" (expand "member" -3)
          (("2" (split -3)
            (("1" (replace -1)
              (("1" (hide -1 -2 -5)
                (("1" (expand "deriv_stmt" -3)
                  (("1" (expand "execute_CaseJML")
                    (("1" (expand "deriv_stmt" -3)
                      (("1" (skosimp*)
                        (("1" (lift-if)
                          (("1" (inst -2 "tau!1" "v!1" "m1!1")
                            (("1" (expand "deriv_expr" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -3 -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "deriv_stmt" -6)
              (("2" (expand "execute_CaseJML")
                (("2" (expand "deriv_stmt" -6)
                  (("2" (skosimp*)
                    (("2" (lift-if)
                      (("2"
                        (inst -2 "p!1" "tau!1" "s2!1" "m2!1" "b1!1")
                        (("2" (assert)
                          (("2" (case "b1!1 = cons1_var!1")
                            (("1" (replace -1)
                              (("1"
                                (expand "deriv_expr" -5)
                                (("1"
                                  (inst? -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -11)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 2 "s2!1" "m2!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst -5 "cons1_var!1" "tau!1" "v!1"
                               "m1!1")
                              (("2"
                                (expand "member" -5)
                                (("2"
                                  (expand "before" -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "deriv_expr" -5)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -6 -10)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (reveal -1)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "b2!1"
                                                       "tau!2"
                                                       "v!2"
                                                       "m2!2")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "member"
                                                           -1)
                                                          (("3"
                                                            (expand
                                                             "before"
                                                             -1)
                                                            (("3"
                                                              (replace
                                                               -8
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (expand
                                                   "deriv_stmt"
                                                   -9)
                                                  (("5"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (before def-decl "boolean" listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   415 414 t nil))
 (CaseJML_exclusive_branches_semantics 0
  (CaseJML_exclusive_branches_semantics-1 nil 3389427193 3397313799
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "derive" -6)
        (("2" (assert)
          (("2" (expand "execute_CaseJML")
            (("2" (expand "derive" -6)
              (("2" (skosimp*)
                (("2" (expand "check_for_exception")
                  (("2" (prop)
                    (("2" (lift-if)
                      (("2" (expand "member" -5)
                        (("2" (split -5)
                          (("1" (hide -4 -7)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -5 -2 :hide? t)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -4 :hide? t)
                                          (("1" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "b1!1 = cons1_var!1")
                            (("1" (hide -5 -8)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -3 :hide? t)
                                        (("1"
                                          (replace -5 :hide? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 3 "m2!1" "Unit")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst - "p!1" "s1!1" "s2!1" "Unit" "m2!1"
                               "b1!1")
                              (("2"
                                (inst
                                 -7
                                 "cons1_var!1"
                                 "tau!1"
                                 "v1!1"
                                 "m1!1")
                                (("1"
                                  (expand "member" -7)
                                  (("1"
                                    (expand "before" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -8 -3 :hide? t)
                                          (("1"
                                            (replace -7 :hide? t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -4)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand "derive" -3)
                                                  (("4"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (typepred "cons1_var!1`1")
                                  (("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   1657181 8560 t nil)))

