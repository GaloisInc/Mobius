(AnnotatedProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3390796236 3406611027
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil))
   107 110 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3390796236 3406611027
   ("" (subtype-tcc) nil nil) proved-complete
   ((APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil))
   133 100 t nil))
 (initial_AP_state_TCC1 0
  (initial_AP_state_TCC1-1 nil 3389427978 3406611028
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   144 150 nil nil))
 (body_has_no_side_effects_TCC1 0
  (body_has_no_side_effects_TCC1-1 nil 3403271979 3406611028
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil (is_local const-decl "boolean" State nil) nil nil nil
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   367 330 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3390796236 3406611029
   ("" (skosimp*)
    (("" (expand "on_method_entry")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2" (replace -2 :dir rl)
                    (("2" (replace -14)
                      (("2"
                        (inst-cp -12 "inv!1" "v!6" "v!4" "s!1" "tau1!5"
                         "tau1!3" "m1!2" "m1!1" "m1!2 - 1" "m1!1 - 1")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (replace -13)
                              (("1"
                                (replace -14)
                                (("1"
                                  (replace -15)
                                  (("1"
                                    (replace -5 :dir rl)
                                    (("1"
                                      (replace -20)
                                      (("1"
                                        (inst-cp
                                         -12
                                         "pre(m!1)"
                                         "v!7"
                                         "v!5"
                                         "tau1!1"
                                         "tau1!6"
                                         "tau1!4"
                                         "m2!2"
                                         "m2!1"
                                         "m2!2 - 1"
                                         "m2!1 - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -13)
                                              (("1"
                                                (replace -14)
                                                (("1"
                                                  (replace -15)
                                                  (("1"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace -26)
                                                      (("1"
                                                        (inst
                                                         -12
                                                         "pre_set(m!1)"
                                                         "v!3"
                                                         "v!2"
                                                         "tau2!1"
                                                         "s1!1"
                                                         "s2!1"
                                                         "n1!1"
                                                         "n2!1"
                                                         "m3!2"
                                                         "m3!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1232 1030 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-1 nil 3390796236 3406611030
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2"
                    (inst-cp -12 "post_set(m!1)" "v!3" "v!2" "s!1"
                     "tau1!2" "tau1!1" "n1!1" "n2!1" "m1!2" "m1!1")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (replace -13)
                          (("2" (replace -14)
                            (("2" (replace -15)
                              (("2"
                                (replace -3 :dir rl)
                                (("2"
                                  (replace -16)
                                  (("2"
                                    (inst-cp
                                     -12
                                     "inv!1"
                                     "v!6"
                                     "v!4"
                                     "tau1!1"
                                     "tau1!5"
                                     "tau1!3"
                                     "m2!2"
                                     "m2!1"
                                     "m2!2 - 1"
                                     "m2!1 - 1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -13)
                                          (("2"
                                            (replace -14)
                                            (("2"
                                              (replace -15)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -22 :dir rl)
                                                  (("2"
                                                    (replace
                                                     -23
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (replace -6)
                                                      (("2"
                                                        (inst
                                                         -11
                                                         "post(m!1)"
                                                         "v!7"
                                                         "v!5"
                                                         "tau2!1"
                                                         "tau1!6"
                                                         "tau1!4"
                                                         "m3!2"
                                                         "m3!1"
                                                         "m3!2 - 1"
                                                         "m3!1 - 1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace
                                                               -11)
                                                              (("2"
                                                                (replace
                                                                 -12)
                                                                (("2"
                                                                  (replace
                                                                   -13)
                                                                  (("2"
                                                                    (replace
                                                                     -28
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   919 770 t nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-1 nil 3390796236 3406611031
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "check_assertion")
              (("1" (skosimp*)
                (("1"
                  (inst-cp -11 "exc_set(m!1)" "v!4" "v!2"
                   "update_PState(s!1, catch)" "tau1!3" "tau1!1" "n1!1"
                   "n2!1" "m1!2" "m1!1")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -12)
                        (("1" (replace -13)
                          (("1" (replace -14)
                            (("1" (replace -4)
                              (("1"
                                (inst
                                 -11
                                 "inv!2"
                                 "v!5"
                                 "v!3"
                                 "tau1!3"
                                 "tau1!4"
                                 "tau1!2"
                                 "m2!2"
                                 "m2!1"
                                 "m2!2 - 1"
                                 "m2!1 - 1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -11)
                                      (("1"
                                        (replace -12)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -13)
                                            (("1"
                                              (replace -8 :dir rl)
                                              (("1"
                                                (replace -22)
                                                (("1"
                                                  (replace -23 :dir rl)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (split -4)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (catch const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   571 500 t nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3390796236 3406611031
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (expand "extend")
        (("" (lift-if)
          (("" (split -3)
            (("1" (flatten)
              (("1" (assert)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (flatten)
                  (("2" (assert)
                    (("2"
                      (inst -4
                       "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                                   CaseJML(cdr(branches!1)))" "v1!1"
                       "v2!1" "s!1" "s1!1" "s2!1" "n1!1" "n2!1"
                       "n1!1 - 1" "n2!1 - 1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (extend const-decl "R" extend nil))
   322 270 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3390796236 3406611031
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -3)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (replace -6 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   213 180 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3397385547 3406611031
   ("" (skosimp*)
    (("" (expand "execute_assert")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (flatten)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2" (apply (repeat (inst? -5 :where (-2 -7))))
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (replace -5)
                          (("1" (replace -7)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil) ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   287 260 t nil))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3395147174 3406611032
   ("" (skosimp)
    (("" (expand* "wf_state" "ext_declared_var_names")
      (("" (expand* "wf_state" "wf_ghoststate" "id")
        (("" (expand "union")
          (("" (expand "member")
            (("" (flatten)
              (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (union const-decl "set" sets nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (member const-decl "bool" sets nil)
    (wf_state const-decl "boolean" State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil))
   211 170 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3390125110 3406611032
   ("" (skosimp)
    (("" (expand "wf_state")
      ((""
        (expand* "wf_state" "wf_ghoststate" "id" "is_ghost" "is_field"
         "is_local")
        (("" (flatten)
          (("" (use "wf_program_variables_disjoint")
            (("" (use "wf_program_variables_not_reserved_words")
              (("" (assert)
                (("" (flatten)
                  (("" (case-replace "vn!1 = This")
                    (("1" (hide -3 -4 -5)
                      (("1"
                        (expand* "disjoint?" "intersection" "empty?"
                         "member" "declared_var_names")
                        (("1" (inst? -)
                          (("1" (split)
                            (("1" (inst? -3)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "reserved_words")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2"
                        (expand* "disjoint?" "empty?" "intersection"
                         "member")
                        (("2" (inst - "vn!1")
                          (("2" (inst - "vn!1")
                            (("2" (inst - "vn!1")
                              (("2"
                                (inst - "vn!1")
                                (("2"
                                  (inst - "vn!1")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_program_variables_not_reserved_words formula-decl nil
     WellFormedProgram nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (This const-decl "Name" Program nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_program_variables_disjoint formula-decl nil WellFormedProgram
     nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (is_field const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil))
   483 460 t shostak))
 (wf_update_PState 0
  (wf_update_PState-2 nil 3392375532 3406611033 ("" (grind) nil nil)
   unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil (is_local const-decl "boolean" State nil) nil nil nil
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   373 350 nil nil)
  (wf_update_PState-1 nil 3391156508 3392371192 ("" (grind) nil nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   468 420 t shostak))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3391169512 3406611033
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil))
   125 100 t shostak))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3391162146 3406611034
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                        ({x: [Name, Val[Name]] |
                            EXISTS (l: LocalVarDecl[Name]):
                              lvds!1(l) AND
                               name(l) = PROJ_1(x) AND
                                default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(p!1)
                                (update_local(name(arg!1), param_val!1)
                                             (update_locals({x: [Name, Val[Name]]
                                                             |
                                                             EXISTS
                                                             (l: LocalVarDecl[Name]):
                                                             lvds!1(l)
                                                             AND
                                                             name(l) = PROJ_1(x)
                                                             AND
                                                             default_value(jtype(l))
                                                             =
                                                             PROJ_2(x)})
                                                           (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(p!1)
                                    (update_locals({x: [Name, Val[Name]] |
                                                      EXISTS (l: LocalVarDecl[Name]):
                                                        lvds!1(l) AND
                                                         name(l) = PROJ_1(x) AND
                                                          default_value(jtype(l)) = PROJ_2(x)})
                                                  (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "var_names")
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                               EXISTS (l: LocalVarDecl[Name]):
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((update_stack const-decl "FullState" Semantics nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (defined? const-decl "boolean" ValProp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (wf_state_update_locals formula-decl nil State nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_locals def-decl "PState" State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil) nil
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (This const-decl "Name" Program nil)
    (update_local const-decl "PState" State nil)
    (O const-decl "T3" function_props nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil) nil nil nil
    (injective? const-decl "bool" functions nil) nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil))
   742 650 t shostak))
 (wf_initial_AP_state 0
  (wf_initial_AP_state-1 nil 3390075578 3406611034
   ("" (skosimp*)
    (("" (expand "initial_AP_state")
      (("" (expand "wf_state")
        (("" (split 1)
          (("1" (lemma "wf_initial_Program_state")
            (("1" (inst -1 "p!1" "this_val!1") (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (use "wf_initial_ghost_state")
            (("1" (expand "id") (("1" (propax) nil nil)) nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_initial_Program_state formula-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    nil (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (Bottom adt-constructor-decl "(Bottom?)" Val_adt nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (initial_Program_state const-decl "PState" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (wf_initial_ghost_state formula-decl nil SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   215 210 t shostak))
 (derive_yields_wf_state_AP 0
  (derive_yields_wf_state_AP-4 nil 3408884034 3408885465
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, b: (wf_Body(p)), v: Val)
                             (sigma1, sigma2: APState):
                        wf_Program(p) IMPLIES
                         wf_state(p)(sigma1) IMPLIES
                          derive(p)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2"
                        (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "p!1" "b!1" _)
                          (("2"
                            (apply (branch
                                    (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst-cp -7 "m2!1")
                                  (("1"
                                    (inst -7 "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -8 :where -4)))
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "<<")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<<")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then (flatten) (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then (flatten) (assert)))))
                                  (("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -3)))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (inst?)
                                                  (assert)
                                                  (expand "<<")))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -8
                                                   :where
                                                   -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "<<")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst?)
                                                  (("2"
                                                    (expand "<<")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -8
                                                         :where
                                                         -4)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (inst?)
                                                          (assert)
                                                          (expand
                                                           "<<")))
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (inst?)
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "m2!1")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -4)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (use
                                                                       "derive_boolean_expr_type")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "id")
                                                                        (("2"
                                                                          (expand
                                                                           "wf_BoolExpr")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (inst?)
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -1)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("2"
                                                                                      (auto-rewrite
                                                                                       "id")
                                                                                      (("2"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("2"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "wf_state(p!1)(tau3!1)")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(p!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(p!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(p!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   18)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "p!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "wf_state"
                                                                                                                                               (1
                                                                                                                                                -1
                                                                                                                                                -29))
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "wf_state"
                                                                                                                                                   (1
                                                                                                                                                    -1
                                                                                                                                                    -29))
                                                                                                                                                  (("1"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -13)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -29)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "is_field")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "is_local")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("4"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -36
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -36
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -36
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -36
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -37
                                                                                                                                                           :where
                                                                                                                                                           -7)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -38
                                                                                                                                                               :where
                                                                                                                                                               -10)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -38)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -12)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_update_PState"
                                                                                                                                                                           ("s1"
                                                                                                                                                                            "tau1!4"))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (apply
                                                                                                                                                                                   (then
                                                                                                                                                                                    (use
                                                                                                                                                                                     "wf_state_raise")
                                                                                                                                                                                    (assert)))
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -8)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("s1"
                                                                                                                                                                              "tau1!3"))
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (typepred
                                                                                                                                                                 "md!1")
                                                                                                                                                                (expand
                                                                                                                                                                 "wf_Method")
                                                                                                                                                                (expand
                                                                                                                                                                 "method_pred")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (typepred
                                                                                                                                                             "p!1")
                                                                                                                                                            (expand*
                                                                                                                                                             "wf_Program"
                                                                                                                                                             "program_pred"
                                                                                                                                                             "lookup_inv")
                                                                                                                                                            (flatten)
                                                                                                                                                            (inst
                                                                                                                                                             -5
                                                                                                                                                             "down(get_class(p!1)(a!1))")
                                                                                                                                                            (assert)
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)))
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (typepred
                                                                                                                                                         "md!1")
                                                                                                                                                        (expand
                                                                                                                                                         "wf_Method")
                                                                                                                                                        (expand
                                                                                                                                                         "method_pred")
                                                                                                                                                        (assert)))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -33
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -33
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -33
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -34
                                                                                                                                                         :where
                                                                                                                                                         -6)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -33)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(p!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -10)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("s1"
                                                                                                                                                                              "tau2!2"))
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -8)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (skosimp*)))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_update_PState"
                                                                                                                                                                           ("s1"
                                                                                                                                                                            "tau1!3"))
                                                                                                                                                                          (assert)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (expand
                                                                                                                                                                           "update_PState")))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                            (assert)))
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState"
                                                                                                                                                               ("s1"
                                                                                                                                                                "tau6!1"))
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (typepred
                                                                                                                                                           "p!1")
                                                                                                                                                          (expand*
                                                                                                                                                           "wf_Program"
                                                                                                                                                           "program_pred"
                                                                                                                                                           "lookup_inv")
                                                                                                                                                          (flatten)
                                                                                                                                                          (inst
                                                                                                                                                           -5
                                                                                                                                                           "down(get_class(p!1)(a!1))")
                                                                                                                                                          (assert)
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (typepred
                                                                                                                                                         "md!1")
                                                                                                                                                        (expand
                                                                                                                                                         "wf_Method")
                                                                                                                                                        (expand
                                                                                                                                                         "method_pred")
                                                                                                                                                        (assert)))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "on_method_entry")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "check_assertion")
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (branch
                                                                                                                              (split
                                                                                                                               -11)
                                                                                                                              ((then
                                                                                                                                (flatten)
                                                                                                                                (assert)
                                                                                                                                (flatten)
                                                                                                                                (assert)))))
                                                                                                                            (("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst-cp
                                                                                                                                 -33
                                                                                                                                 "m3!2")
                                                                                                                                (("2"
                                                                                                                                  (inst-cp
                                                                                                                                   -33
                                                                                                                                   "m2!2 - 1")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -33
                                                                                                                                     "m1!2 - 1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (inst?
                                                                                                                                           -33
                                                                                                                                           :where
                                                                                                                                           -4)))
                                                                                                                                        (("1"
                                                                                                                                          (apply
                                                                                                                                           (repeat
                                                                                                                                            (inst?
                                                                                                                                             -34
                                                                                                                                             :where
                                                                                                                                             -7)))
                                                                                                                                          (("1"
                                                                                                                                            (apply
                                                                                                                                             (repeat
                                                                                                                                              (inst?
                                                                                                                                               -35
                                                                                                                                               :where
                                                                                                                                               -9)))
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "wf_state(p!1)(tau1!2)")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -9)
                                                                                                                                                    (("1"
                                                                                                                                                      (lift-if)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (split
                                                                                                                                                             20)
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (split
                                                                                                                                                             1)
                                                                                                                                                            (skosimp*)))
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState"
                                                                                                                                                               ("s1"
                                                                                                                                                                "tau1!4"))
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("1"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (replace
                                                                                                                                                   -5)
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (split
                                                                                                                                                           1)
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (split
                                                                                                                                                           1)
                                                                                                                                                          (skosimp*)))
                                                                                                                                                        (("2"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (use
                                                                                                                                                             "wf_update_PState"
                                                                                                                                                             ("s1"
                                                                                                                                                              "tau1!3"))
                                                                                                                                                            (assert)
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (expand
                                                                                                                                                             "update_PState")))
                                                                                                                                                          (("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_state_raise")
                                                                                                                                                              (assert)))
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (apply
                                                                                                                                               (then
                                                                                                                                                (typepred
                                                                                                                                                 "md!1")
                                                                                                                                                (expand
                                                                                                                                                 "wf_Method")
                                                                                                                                                (expand
                                                                                                                                                 "method_pred")
                                                                                                                                                (assert)))
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (apply
                                                                                                                                             (then
                                                                                                                                              (typepred
                                                                                                                                               "md!1")
                                                                                                                                              (expand
                                                                                                                                               "wf_Method")
                                                                                                                                              (expand
                                                                                                                                               "method_pred")
                                                                                                                                              (assert)))
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (lift-if)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (apply
                                                                                                                                               (then
                                                                                                                                                (typepred
                                                                                                                                                 "p!1")
                                                                                                                                                (expand*
                                                                                                                                                 "wf_Program"
                                                                                                                                                 "program_pred"
                                                                                                                                                 "lookup_inv")
                                                                                                                                                (flatten)
                                                                                                                                                (inst
                                                                                                                                                 -5
                                                                                                                                                 "down(get_class(p!1)(a!1))")
                                                                                                                                                (assert)
                                                                                                                                                (flatten)
                                                                                                                                                (assert)))
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -9)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "wf_state_update_stack")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "getLocalDecls")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "down(get_class(p!1)(a!1))")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "getLocalDecls")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "md!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "getLocalDecls")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "down(get_class(p!1)(a!1))")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                                                                                                                                                                                                                                   classes(p!1)(down(get_class(p!1)(a!1))) AND
                                                                                                                                                                                                                                                                                                                    methods(down(get_class(p!1)(a!1)))(m) AND
                                                                                                                                                                                                                                                                                                                     name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "p!1")
                                                                                                                      (("1"
                                                                                                                        (expand*
                                                                                                                         "wf_Program"
                                                                                                                         "wf_Classes"
                                                                                                                         "wf_Class")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -4
                                                                                                                             "down(get_class(p!1)(a!1))")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -4
                                                                                                                                   "m!1"
                                                                                                                                   "md!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (expand
                                                                                 "method_pred")
                                                                                (assert)))
                                                                              (("2"
                                                                                (auto-rewrite
                                                                                 "id")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (expand
                                                                               "method_pred")
                                                                              (assert)))
                                                                            (("2"
                                                                              (auto-rewrite
                                                                               "id")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (inst?
                                                                             -6)
                                                                            (assert)
                                                                            (expand
                                                                             "<<")))
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?
                                                                           -6)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (inst?)
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (auto-rewrite
                                                                 "id")
                                                                (("1"
                                                                  (expand
                                                                   "execute_CaseJML")
                                                                  (("1"
                                                                    (expand
                                                                     "extend")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -3)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -2)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "x!1 - 1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -8
                                                                                     :where
                                                                                     -2)))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "b!1")
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -6
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "wf_Body")
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (auto-rewrite
                                                                                                   "union"
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "var_names"
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "subterm"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "subterm"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "some_is_exists")
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           3
                                                                                                           "car(branches(b!1))")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             4)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "subterm"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "some_is_exists")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         3
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (use
                                                                                 "derive_boolean_expr_type")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "id")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_BoolExpr")
                                                                                    (("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (inst?)
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (inst?)
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -8
                                                                         "m2!1")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -9
                                                                                   :where
                                                                                   -6)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "wf_ghoststate")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "id")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ghost")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "defined?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_GhostVars")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_store")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "b!1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_Body")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "b!1")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "subterm"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "derive_bottom_iff_exception_step")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1
                                                                                                                                           :where
                                                                                                                                           -10)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -11
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -11
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -11
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -11
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(p!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "wf_state(p!1)(update_PState(tau2!1, catch))")
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -9)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           26)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "wf_update_PState")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       (1
                                                                                                                        -1))
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "is_field")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "is_local")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -6)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (inst?)
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "b!1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -6
                                                                                         "test(b!1)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<<")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_Body")
                                                                                              (("2"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "var_names"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (auto-rewrite
                                                                                                             "union"
                                                                                                             "member"
                                                                                                             "emptyset")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "While(test(b!1), body(b!1)) = b!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "var_names"
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -4
                                                                                                     "b1!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subterm"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "While[Name](test[Name](b!1), body[Name](b!1)) = b!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -10
                                                                                                               "b1!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "subterm"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply-extensionality
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (inst?)
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (typepred "b!1")
          (("2" (expand "id") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   proved
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (m1!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (inv!2 skolem-const-decl "(wf_BoolExpr(id(p!1)))"
     AnnotatedProgramSemantics nil)
    (m2!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (is_field const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (inv!2 skolem-const-decl "(wf_BoolExpr(id(p!1)))"
     AnnotatedProgramSemantics nil)
    (m2!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (m3!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (inv!2 skolem-const-decl "(wf_BoolExpr(id(p!1)))"
     AnnotatedProgramSemantics nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (m2!2 skolem-const-decl "nat" AnnotatedProgramSemantics nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics
     nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (m!1 skolem-const-decl "Method[Name]" AnnotatedProgramSemantics
     nil)
    (a!1 skolem-const-decl "Val[Name]" AnnotatedProgramSemantics nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (md!1 skolem-const-decl "(wf_Method(id(p!1)))"
     AnnotatedProgramSemantics nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (v1!1 skolem-const-decl "Val[Name]" AnnotatedProgramSemantics nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (extend const-decl "R" extend nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (v1!1 skolem-const-decl "Val[Name]" AnnotatedProgramSemantics nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (id_preserves application-judgement "S" identity_props nil)
    (derive_boolean_expr_type formula-decl nil SemanticsProofs nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (v!1 skolem-const-decl "Val[Name]" AnnotatedProgramSemantics nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b!1 skolem-const-decl "(wf_Body(p!1))" AnnotatedProgramSemantics
     nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (p!1 skolem-const-decl "Program[Name]" AnnotatedProgramSemantics
     nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   1428789 37940 t nil)
  (derive_yields_wf_state_AP-3 nil 3406266378 3408884008
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, b: (wf_Body(p)), v: Val)
                         (sigma1, sigma2: APState):
                    wf_Program(p) IMPLIES
                     wf_state(p)(sigma1) IMPLIES
                      derive(p)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2"
                        (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "p!1" "b!1" _)
                          (("2"
                            (apply (branch
                                    (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst-cp -7 "m2!1")
                                  (("1"
                                    (inst -7 "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -8 :where -4)))
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "<<")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<<")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then (flatten) (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then (flatten) (assert)))))
                                  (("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -3)))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (inst?)
                                                  (assert)
                                                  (expand "<<")))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -8
                                                   :where
                                                   -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "<<")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst?)
                                                  (("2"
                                                    (expand "<<")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -8
                                                         :where
                                                         -4)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (inst?)
                                                          (assert)
                                                          (expand
                                                           "<<")))
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (inst?)
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "m2!1")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -4)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (use
                                                                       "derive_boolean_expr_type")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "id")
                                                                        (("2"
                                                                          (expand
                                                                           "wf_BoolExpr")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (inst?)
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -1)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("2"
                                                                                      (auto-rewrite
                                                                                       "id")
                                                                                      (("2"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("2"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(p!1)(tau3!1)")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "wf_state(p!1)(tau4!1)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(p!1)(tau6!1)")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "wf_state(p!1)(tau7!1)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -21)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1
                                                                                                                                     :where
                                                                                                                                     18)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "p!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state"
                                                                                                                                                 (1
                                                                                                                                                  -1
                                                                                                                                                  -31))
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "wf_state"
                                                                                                                                                     (1
                                                                                                                                                      -1
                                                                                                                                                      -31))
                                                                                                                                                    (("1"
                                                                                                                                                      (skosimp*)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -15)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst?
                                                                                                                                                             -31)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "is_field")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "is_local")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("4"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (split
                                                                                                                                 -18)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "on_method_exit_normal")
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "check_assertion")
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -38
                                                                                                                                               "m3!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst-cp
                                                                                                                                                 -38
                                                                                                                                                 "m2!2 - 1")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -38
                                                                                                                                                   "m1!2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -38
                                                                                                                                                         :where
                                                                                                                                                         -3)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (apply
                                                                                                                                                           (repeat
                                                                                                                                                            (inst?
                                                                                                                                                             -39
                                                                                                                                                             :where
                                                                                                                                                             -7)))
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (apply
                                                                                                                                                               (repeat
                                                                                                                                                                (inst?
                                                                                                                                                                 -40
                                                                                                                                                                 :where
                                                                                                                                                                 -10)))
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   -40)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -12)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("s1"
                                                                                                                                                                              "tau1!4"))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (apply
                                                                                                                                                                                     (then
                                                                                                                                                                                      (use
                                                                                                                                                                                       "wf_state_raise")
                                                                                                                                                                                      (assert)))
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -8)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                               ("s1"
                                                                                                                                                                                "tau1!3"))
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (typepred
                                                                                                                                                                   "md!1")
                                                                                                                                                                  (expand
                                                                                                                                                                   "wf_Method")
                                                                                                                                                                  (expand
                                                                                                                                                                   "method_pred")
                                                                                                                                                                  (assert)))
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (typepred
                                                                                                                                                               "p!1")
                                                                                                                                                              (expand*
                                                                                                                                                               "wf_Program"
                                                                                                                                                               "program_pred"
                                                                                                                                                               "lookup_inv")
                                                                                                                                                              (flatten)
                                                                                                                                                              (inst
                                                                                                                                                               -5
                                                                                                                                                               "down(get_class(p!1)(a!1))")
                                                                                                                                                              (assert)
                                                                                                                                                              (flatten)
                                                                                                                                                              (assert)))
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (typepred
                                                                                                                                                           "md!1")
                                                                                                                                                          (expand
                                                                                                                                                           "wf_Method")
                                                                                                                                                          (expand
                                                                                                                                                           "method_pred")
                                                                                                                                                          (assert)))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_exceptional")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (skosimp*)
                                                                                                                                              (("1"
                                                                                                                                                (inst-cp
                                                                                                                                                 -35
                                                                                                                                                 "m2!2 - 1")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -35
                                                                                                                                                   "m1!2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -35
                                                                                                                                                         :where
                                                                                                                                                         -2)))
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -36
                                                                                                                                                           :where
                                                                                                                                                           -6)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -35)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "wf_state(p!1)(tau2!2)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -10)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         3)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                               ("s1"
                                                                                                                                                                                "tau2!2"))
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -8)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("s1"
                                                                                                                                                                              "tau1!3"))
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                 ("s1"
                                                                                                                                                                  "tau6!1"))
                                                                                                                                                                (assert)
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState")))
                                                                                                                                                              (("2"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_state_catch")
                                                                                                                                                                  (assert)))
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (typepred
                                                                                                                                                             "p!1")
                                                                                                                                                            (expand*
                                                                                                                                                             "wf_Program"
                                                                                                                                                             "program_pred"
                                                                                                                                                             "lookup_inv")
                                                                                                                                                            (flatten)
                                                                                                                                                            (inst
                                                                                                                                                             -5
                                                                                                                                                             "down(get_class(p!1)(a!1))")
                                                                                                                                                            (assert)
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)))
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (typepred
                                                                                                                                                           "md!1")
                                                                                                                                                          (expand
                                                                                                                                                           "wf_Method")
                                                                                                                                                          (expand
                                                                                                                                                           "method_pred")
                                                                                                                                                          (assert)))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -16)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "on_method_entry")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "check_assertion")
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (branch
                                                                                                                                (split
                                                                                                                                 -12)
                                                                                                                                ((then
                                                                                                                                  (flatten)
                                                                                                                                  (assert)
                                                                                                                                  (flatten)
                                                                                                                                  (assert)))))
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst-cp
                                                                                                                                   -35
                                                                                                                                   "m3!2")
                                                                                                                                  (("2"
                                                                                                                                    (inst-cp
                                                                                                                                     -35
                                                                                                                                     "m2!2 - 1")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -35
                                                                                                                                       "m1!2 - 1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (apply
                                                                                                                                           (repeat
                                                                                                                                            (inst?
                                                                                                                                             -35
                                                                                                                                             :where
                                                                                                                                             -4)))
                                                                                                                                          (("1"
                                                                                                                                            (apply
                                                                                                                                             (repeat
                                                                                                                                              (inst?
                                                                                                                                               -36
                                                                                                                                               :where
                                                                                                                                               -7)))
                                                                                                                                            (("1"
                                                                                                                                              (apply
                                                                                                                                               (repeat
                                                                                                                                                (inst?
                                                                                                                                                 -37
                                                                                                                                                 :where
                                                                                                                                                 -9)))
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "wf_state(p!1)(tau1!2)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -9)
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (split
                                                                                                                                                               20)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (split
                                                                                                                                                               1)
                                                                                                                                                              (skosimp*)))
                                                                                                                                                            (("1"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                 ("s1"
                                                                                                                                                                  "tau1!4"))
                                                                                                                                                                (assert)
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState")))
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                  (assert)))
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -5)
                                                                                                                                                    (("2"
                                                                                                                                                      (lift-if)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (split
                                                                                                                                                             1)
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (split
                                                                                                                                                             1)
                                                                                                                                                            (skosimp*)))
                                                                                                                                                          (("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState"
                                                                                                                                                               ("s1"
                                                                                                                                                                "tau1!3"))
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (apply
                                                                                                                                                 (then
                                                                                                                                                  (typepred
                                                                                                                                                   "md!1")
                                                                                                                                                  (expand
                                                                                                                                                   "wf_Method")
                                                                                                                                                  (expand
                                                                                                                                                   "method_pred")
                                                                                                                                                  (assert)))
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (apply
                                                                                                                                               (then
                                                                                                                                                (typepred
                                                                                                                                                 "md!1")
                                                                                                                                                (expand
                                                                                                                                                 "wf_Method")
                                                                                                                                                (expand
                                                                                                                                                 "method_pred")
                                                                                                                                                (assert)))
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (apply
                                                                                                                                                 (then
                                                                                                                                                  (typepred
                                                                                                                                                   "p!1")
                                                                                                                                                  (expand*
                                                                                                                                                   "wf_Program"
                                                                                                                                                   "program_pred"
                                                                                                                                                   "lookup_inv")
                                                                                                                                                  (flatten)
                                                                                                                                                  (inst
                                                                                                                                                   -5
                                                                                                                                                   "down(get_class(p!1)(a!1))")
                                                                                                                                                  (assert)
                                                                                                                                                  (flatten)
                                                                                                                                                  (assert)))
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -10)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(p!1)(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(p!1)(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                                                                                                                                                   classes(p!1)(down(get_class(p!1)(a!1))) AND
                                                                                                                                                                                                                                    methods(down(get_class(p!1)(a!1)))(m) AND
                                                                                                                                                                                                                                     name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "p!1")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(p!1)(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (postpone)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (expand
                                                                                 "method_pred")
                                                                                (assert)))
                                                                              (("2"
                                                                                (auto-rewrite
                                                                                 "id")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (expand
                                                                               "method_pred")
                                                                              (assert)))
                                                                            (("2"
                                                                              (auto-rewrite
                                                                               "id")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (inst?
                                                                             -6)
                                                                            (assert)
                                                                            (expand
                                                                             "<<")))
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?
                                                                           -6)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (inst?)
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (auto-rewrite
                                                                 "id")
                                                                (("1"
                                                                  (expand
                                                                   "execute_CaseJML")
                                                                  (("1"
                                                                    (expand
                                                                     "extend")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -3)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -2)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "x!1 - 1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -8
                                                                                     :where
                                                                                     -2)))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "b!1")
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -6
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "wf_Body")
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (auto-rewrite
                                                                                                   "union"
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "var_names"
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "subterm"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "subterm"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "some_is_exists")
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           3
                                                                                                           "car(branches(b!1))")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             4)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "subterm"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "some_is_exists")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         3
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (use
                                                                                 "derive_boolean_expr_type")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "id")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_BoolExpr")
                                                                                    (("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (inst?)
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (inst?)
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -8
                                                                         "m2!1")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -9
                                                                                   :where
                                                                                   -6)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "wf_ghoststate")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "id")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ghost")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "defined?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_GhostVars")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_store")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "b!1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_Body")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "b!1")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "subterm"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "derive_bottom_iff_exception_step")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1
                                                                                                                                           :where
                                                                                                                                           -10)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -11
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -11
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -11
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -11
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(p!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "wf_state(p!1)(update_PState(tau2!1, catch))")
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -9)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           26)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "wf_update_PState")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       (1
                                                                                                                        -1))
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "is_field")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "is_local")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -6)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (inst?)
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "b!1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -6
                                                                                         "test(b!1)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<<")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_Body")
                                                                                              (("2"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "var_names"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (auto-rewrite
                                                                                                             "union"
                                                                                                             "member"
                                                                                                             "emptyset")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "While(test(b!1), body(b!1)) = b!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "var_names"
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -4
                                                                                                     "b1!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subterm"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "While[Name](test[Name](b!1), body[Name](b!1)) = b!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -10
                                                                                                               "b1!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "subterm"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply-extensionality
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (inst?)
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (typepred "b!1")
          (("2" (expand "id") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (raise const-decl "PState" State nil)
    (wf_state_raise formula-decl nil State nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil) nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil
    (program_pred const-decl "bool" ProgramRestriction nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    nil nil (check_assertion const-decl "boolean" SemanticsJML nil) nil
    nil (wf_state_catch formula-decl nil State nil)
    (catch const-decl "PState" State nil)
    (update_local const-decl "PState" State nil)
    (wf_state_update_local formula-decl nil State nil) nil
    (is_local const-decl "boolean" State nil)
    (lookup_local const-decl "Val" State nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics
     nil)
    nil (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (wf_state_arg_is_local formula-decl nil State nil) nil nil nil nil
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil) nil
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (is_field const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (extend const-decl "R" extend nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil) nil
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (id_preserves application-judgement "S" identity_props nil)
    (derive_boolean_expr_type formula-decl nil SemanticsProofs nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil) nil
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil) nil
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   1822769 56800 t nil)
  (derive_yields_wf_state_AP-2 nil 3405928466 3406017854
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, b: (wf_Body(p)), v: Val)
                     (sigma1, sigma2: APState):
                wf_Program(p) IMPLIES
                 wf_state(p)(sigma1) IMPLIES
                  derive(p)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2"
                        (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "p!1" "b!1" _)
                          (("2"
                            (apply (branch
                                    (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst-cp -7 "m2!1")
                                  (("1"
                                    (inst -7 "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -8 :where -4)))
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "<<")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<<")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then (flatten) (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then (flatten) (assert)))))
                                  (("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -3)))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (inst?)
                                                  (assert)
                                                  (expand "<<")))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -8
                                                   :where
                                                   -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "<<")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst?)
                                                  (("2"
                                                    (expand "<<")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -8
                                                         :where
                                                         -4)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (inst?)
                                                          (assert)
                                                          (expand
                                                           "<<")))
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (inst?)
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "m2!1")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -4)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (use
                                                                       "derive_boolean_expr_type")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "id")
                                                                        (("2"
                                                                          (expand
                                                                           "wf_BoolExpr")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (inst?)
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (auto-rewrite
                                                                                     "id")
                                                                                    (("2"
                                                                                      (case
                                                                                       "wf_state(p!1)(tau3!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("1"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(p!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(p!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(p!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   17)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "p!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_update_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_arg_is_local")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "is_local"
                                                                                                                                                 "lookup_local"
                                                                                                                                                 "defined?")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -35
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -35
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -35
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -35
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -36
                                                                                                                                                           :where
                                                                                                                                                           -6)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -37
                                                                                                                                                               :where
                                                                                                                                                               -9)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -37)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -11)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -7)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (typepred
                                                                                                                                                                 "md!1")
                                                                                                                                                                (expand
                                                                                                                                                                 "wf_Method")
                                                                                                                                                                (expand
                                                                                                                                                                 "method_pred")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (typepred
                                                                                                                                                             "p!1")
                                                                                                                                                            (expand*
                                                                                                                                                             "wf_Program"
                                                                                                                                                             "program_pred"
                                                                                                                                                             "lookup_inv")
                                                                                                                                                            (flatten)
                                                                                                                                                            (inst
                                                                                                                                                             -5
                                                                                                                                                             "down(get_class(p!1)(a!1))")
                                                                                                                                                            (assert)
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)))
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (typepred
                                                                                                                                                         "md!1")
                                                                                                                                                        (expand
                                                                                                                                                         "wf_Method")
                                                                                                                                                        (expand
                                                                                                                                                         "method_pred")
                                                                                                                                                        (assert)))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -32
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -32
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -32
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -33
                                                                                                                                                         :where
                                                                                                                                                         -5)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -32)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(p!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -9)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -7)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (skosimp*)))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_update_PState")
                                                                                                                                                                          (assert)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (expand
                                                                                                                                                                           "update_PState")))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                            (assert)))
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState")
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (typepred
                                                                                                                                                           "p!1")
                                                                                                                                                          (expand*
                                                                                                                                                           "wf_Program"
                                                                                                                                                           "program_pred"
                                                                                                                                                           "lookup_inv")
                                                                                                                                                          (flatten)
                                                                                                                                                          (inst
                                                                                                                                                           -5
                                                                                                                                                           "down(get_class(p!1)(a!1))")
                                                                                                                                                          (assert)
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (typepred
                                                                                                                                                         "md!1")
                                                                                                                                                        (expand
                                                                                                                                                         "wf_Method")
                                                                                                                                                        (expand
                                                                                                                                                         "method_pred")
                                                                                                                                                        (assert)))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(p!1)(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(p!1)(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                     classes(p!1)(down(get_class(p!1)(a!1))) AND
                                                                                                      methods(down(get_class(p!1)(a!1)))(m) AND
                                                                                                       name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "p!1")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(p!1)(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "check_assertion")
                                                                                          (("2"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -3)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -26
                                                                                                 "m3!2")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -26
                                                                                                   "m2!2 - 1")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -26
                                                                                                     "m1!2 - 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (repeat
                                                                                                          (inst?
                                                                                                           -26
                                                                                                           :where
                                                                                                           -4)))
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (repeat
                                                                                                            (inst?
                                                                                                             -27
                                                                                                             :where
                                                                                                             -7)))
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -28
                                                                                                               :where
                                                                                                               -9)))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "wf_state(p!1)(tau1!2)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -9)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (split
                                                                                                                             19)
                                                                                                                            (skosimp*)
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (skosimp*)))
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState")
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")))
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                (assert)))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -5)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (apply
                                                                                                                         (then
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (skosimp*)
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (skosimp*)))
                                                                                                                        (("2"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (use
                                                                                                                             "wf_update_PState")
                                                                                                                            (assert)
                                                                                                                            (skosimp*)
                                                                                                                            (expand
                                                                                                                             "update_PState")))
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (then
                                                                                                                (typepred
                                                                                                                 "md!1")
                                                                                                                (expand
                                                                                                                 "wf_Method")
                                                                                                                (expand
                                                                                                                 "method_pred")
                                                                                                                (assert)))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (typepred
                                                                                                               "md!1")
                                                                                                              (expand
                                                                                                               "wf_Method")
                                                                                                              (expand
                                                                                                               "method_pred")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "lookup_mthd")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -11)
                                                                                                                (("1"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (typepred
                                                                                                                     "p!1")
                                                                                                                    (expand*
                                                                                                                     "wf_Program"
                                                                                                                     "program_pred"
                                                                                                                     "lookup_inv")
                                                                                                                    (flatten)
                                                                                                                    (inst
                                                                                                                     -5
                                                                                                                     "down(get_class(p!1)(a!1))")
                                                                                                                    (assert)
                                                                                                                    (flatten)
                                                                                                                    (assert)))
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (expand
                                                                                 "method_pred")
                                                                                (assert)))
                                                                              (("2"
                                                                                (auto-rewrite
                                                                                 "id")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (expand
                                                                               "method_pred")
                                                                              (assert)))
                                                                            (("2"
                                                                              (auto-rewrite
                                                                               "id")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (inst?
                                                                             -6)
                                                                            (assert)
                                                                            (expand
                                                                             "<<")))
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?
                                                                           -6)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (inst?)
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (auto-rewrite
                                                                 "id")
                                                                (("1"
                                                                  (case
                                                                   " FORALL (branches: (wf_Branches(id(p!1))), s1, s2: APState, x: nat):
                                        execute_CaseJML(p!1, branches, s1, s2, x,
                                                        LAMBDA (k: upto(x))(p: Program)
                                                               (b: (wf_Body(id(p))), sigma1: APState,
                                                                v: Val[Name], sigma2: APState)
                                                               (m: below(k)):
                                                          derive(p)(b, sigma1, v, sigma2)(m))
                                         IMPLIES
                                         wf_state(p!1)(s1) IMPLIES
                                          (FORALL (y: nat):
                                             y < x IMPLIES
                                              (FORALL (p: Program, b: (wf_Body(id(p))), v: Val)
                                                      (sigma1, sigma2: APState):
                                                 wf_state(p)(sigma1) IMPLIES
                                                  derive(p)(b, sigma1, v, sigma2)(y) IMPLIES
                                                   wf_state(p)(sigma2)))
                                           IMPLIES wf_state(p!1)(s2)")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst?
                                                                           -9)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -3)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "b!2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      -7))
                                                                    (("2"
                                                                      (induct
                                                                       "branches")
                                                                      (("1"
                                                                        (typepred
                                                                         "branches!1")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "execute_CaseJML")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "extend")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (expand
                                                                           "execute_CaseJML"
                                                                           -3)
                                                                          (("3"
                                                                            (expand*
                                                                             "extend"
                                                                             "id")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (expand
                                                                                   "wf_Branches")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "every"
                                                                                     -2)
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "derive"
                                                                                           -6)
                                                                                          (("3"
                                                                                            (split
                                                                                             -6)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "check_for_exception")
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "wf_state(p!1)(tau!1)")
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -16
                                                                                                                 "m2!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -16
                                                                                                                       :where
                                                                                                                       -2)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -8
                                                                                                                 "tau!1"
                                                                                                                 "s2!1"
                                                                                                                 "m2!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -17
                                                                                                                         "y!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (inst?
                                                                                                                               -17
                                                                                                                               :where
                                                                                                                               -3)))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "derive"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             -14
                                                                                                             "m1!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -14
                                                                                                                   :where
                                                                                                                   -5)))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (use
                                                                                 "derive_boolean_expr_type")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "id")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_BoolExpr")
                                                                                    (("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (inst?)
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (inst?)
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -6)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (inst?)
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "wf_ghoststate")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "id")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ghost")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "defined?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_GhostVars")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_store")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "b!1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_Body")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "b!1")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "subterm"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "derive_bottom_iff_exception_step")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1
                                                                                                                                           :where
                                                                                                                                           -10)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -11
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -11
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -11
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -11
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(p!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "wf_state(p!1)(update_PState(tau2!1, catch))")
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -9)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           26)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "wf_update_PState")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       (1
                                                                                                                        -1))
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "is_field")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "is_local")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -6)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (inst?)
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "b!1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -6
                                                                                         "test(b!1)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<<")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_Body")
                                                                                              (("2"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "var_names"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (auto-rewrite
                                                                                                             "union"
                                                                                                             "member"
                                                                                                             "emptyset")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "While(test(b!1), body(b!1)) = b!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "var_names"
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -4
                                                                                                     "b1!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subterm"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "While[Name](test[Name](b!1), body[Name](b!1)) = b!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -10
                                                                                                               "b1!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "subterm"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply-extensionality
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (inst?)
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (typepred "b!1")
          (("2" (expand "id") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics
     nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (is_field const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (extend const-decl "R" extend nil)
    (list_induction formula-decl nil list_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (id_preserves application-judgement "S" identity_props nil)
    (derive_boolean_expr_type formula-decl nil SemanticsProofs nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   17002 16370 t nil)
  (derive_yields_wf_state_AP-1 nil 3401776689 3405928368
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, b: (wf_Body(p)), v: Val)
                 (sigma1, sigma2: APState):
            wf_Program(p) IMPLIES
             wf_state(p)(sigma1) IMPLIES
              derive(p)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2"
                        (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "p!1" "b!1" _)
                          (("2"
                            (apply (branch
                                    (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst-cp -7 "m2!1")
                                  (("1"
                                    (inst -7 "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -8 :where -4)))
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "<<")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<<")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then (flatten) (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then (flatten) (assert)))))
                                  (("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -3)))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (inst?)
                                                  (assert)
                                                  (expand "<<")))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -8
                                                   :where
                                                   -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "<<")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst?)
                                                  (("2"
                                                    (expand "<<")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -8
                                                         :where
                                                         -4)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (inst?)
                                                          (assert)
                                                          (expand
                                                           "<<")))
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (inst?)
                                                        (assert)
                                                        (expand "<<")))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (inst?)
                                                              (assert)
                                                              (expand
                                                               "<<")))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "m2!1")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -4)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (apply
                                                                         (then
                                                                          (inst?)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (use
                                                                       "derive_boolean_expr_type")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "id")
                                                                        (("2"
                                                                          (expand
                                                                           "wf_BoolExpr")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (inst?)
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (auto-rewrite
                                                                                     "id")
                                                                                    (("2"
                                                                                      (case
                                                                                       "wf_state(p!1)(tau3!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("1"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(p!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(p!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(p!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   17)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "p!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_update_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_arg_is_local")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "is_local"
                                                                                                                                                 "lookup_local"
                                                                                                                                                 "defined?")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -35
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -35
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -35
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -35
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -36
                                                                                                                                                           :where
                                                                                                                                                           -6)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -37
                                                                                                                                                               :where
                                                                                                                                                               -9)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -37)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -11)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -7)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (typepred
                                                                                                                                                                 "md!1")
                                                                                                                                                                (expand
                                                                                                                                                                 "wf_Method")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (typepred
                                                                                                                                                             "p!1")
                                                                                                                                                            (expand*
                                                                                                                                                             "wf_Program"
                                                                                                                                                             "wf_Classes"
                                                                                                                                                             "wf_Class"
                                                                                                                                                             "lookup_inv")
                                                                                                                                                            (flatten)
                                                                                                                                                            (inst
                                                                                                                                                             -4
                                                                                                                                                             "down(get_class(p!1)(a!1))")
                                                                                                                                                            (assert)))
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (typepred
                                                                                                                                                         "md!1")
                                                                                                                                                        (expand
                                                                                                                                                         "wf_Method")
                                                                                                                                                        (assert)))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -32
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -32
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -32
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -33
                                                                                                                                                         :where
                                                                                                                                                         -5)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -32)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(p!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -9)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -7)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (skosimp*)))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_update_PState")
                                                                                                                                                                          (assert)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (expand
                                                                                                                                                                           "update_PState")))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                            (assert)))
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState")
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (typepred
                                                                                                                                                           "p!1")
                                                                                                                                                          (expand*
                                                                                                                                                           "wf_Program"
                                                                                                                                                           "wf_Classes"
                                                                                                                                                           "wf_Class"
                                                                                                                                                           "lookup_inv")
                                                                                                                                                          (flatten)
                                                                                                                                                          (inst
                                                                                                                                                           -4
                                                                                                                                                           "down(get_class(p!1)(a!1))")
                                                                                                                                                          (assert)))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (typepred
                                                                                                                                                         "md!1")
                                                                                                                                                        (expand
                                                                                                                                                         "wf_Method")
                                                                                                                                                        (assert)))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(p!1)(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(p!1)(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                           classes(p!1)(down(get_class(p!1)(a!1))) AND
                                                            methods(down(get_class(p!1)(a!1)))(m) AND
                                                             name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "p!1")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(p!1)(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "check_assertion")
                                                                                          (("2"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -3)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -26
                                                                                                 "m3!2")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -26
                                                                                                   "m2!2 - 1")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -26
                                                                                                     "m1!2 - 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (repeat
                                                                                                          (inst?
                                                                                                           -26
                                                                                                           :where
                                                                                                           -4)))
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (repeat
                                                                                                            (inst?
                                                                                                             -27
                                                                                                             :where
                                                                                                             -7)))
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -28
                                                                                                               :where
                                                                                                               -9)))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "wf_state(p!1)(tau1!2)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -9)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (split
                                                                                                                             19)
                                                                                                                            (skosimp*)
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (skosimp*)))
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState")
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")))
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                (assert)))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -5)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (apply
                                                                                                                         (then
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (skosimp*)
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (skosimp*)))
                                                                                                                        (("2"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (use
                                                                                                                             "wf_update_PState")
                                                                                                                            (assert)
                                                                                                                            (skosimp*)
                                                                                                                            (expand
                                                                                                                             "update_PState")))
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (then
                                                                                                                (typepred
                                                                                                                 "md!1")
                                                                                                                (expand
                                                                                                                 "wf_Method")
                                                                                                                (assert)))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (typepred
                                                                                                               "md!1")
                                                                                                              (expand
                                                                                                               "wf_Method")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "p!1")
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             "wf_Program"
                                                                                                             "wf_Classes"
                                                                                                             "wf_Class"
                                                                                                             "lookup_inv")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "lookup_mthd")
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -15)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -6
                                                                                                                             "down(get_class(p!1)(a!1))")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (assert)))
                                                                              (("2"
                                                                                (auto-rewrite
                                                                                 "id")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (assert)))
                                                                            (("2"
                                                                              (auto-rewrite
                                                                               "id")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (inst?
                                                                             -6)
                                                                            (assert)
                                                                            (expand
                                                                             "<<")))
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst?
                                                                           -6)
                                                                          (assert)
                                                                          (expand
                                                                           "<<")))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (inst?)
                                                                    (assert)
                                                                    (expand
                                                                     "<<")))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (inst?)
                                                                      (assert)
                                                                      (expand
                                                                       "<<")))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (auto-rewrite
                                                                 "id")
                                                                (("1"
                                                                  (case
                                                                   " FORALL (branches: (wf_Branches(id(p!1))), s1, s2: APState, x: nat):
        execute_CaseJML(p!1, branches, s1, s2, x,
                        LAMBDA (k: upto(x))(p: Program)
                               (b: (wf_Body(id(p))), sigma1: APState,
                                v: Val[Name], sigma2: APState)
                               (m: below(k)):
                          derive(p)(b, sigma1, v, sigma2)(m))
         IMPLIES
         wf_state(p!1)(s1) IMPLIES
          (FORALL (y: nat):
             y < x IMPLIES
              (FORALL (p: Program, b: (wf_Body(id(p))), v: Val)
                      (sigma1, sigma2: APState):
                 wf_state(p)(sigma1) IMPLIES
                  derive(p)(b, sigma1, v, sigma2)(y) IMPLIES
                   wf_state(p)(sigma2)))
           IMPLIES wf_state(p!1)(s2)")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst?
                                                                           -9)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -3)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "b!2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      -7))
                                                                    (("2"
                                                                      (induct
                                                                       "branches")
                                                                      (("1"
                                                                        (typepred
                                                                         "branches!1")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "execute_CaseJML")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "extend")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (expand
                                                                           "execute_CaseJML"
                                                                           -3)
                                                                          (("3"
                                                                            (expand*
                                                                             "extend"
                                                                             "id")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (expand
                                                                                   "wf_Branches")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "every"
                                                                                     -2)
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "derive"
                                                                                           -6)
                                                                                          (("3"
                                                                                            (split
                                                                                             -6)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "check_for_exception")
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "wf_state(p!1)(tau!1)")
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -16
                                                                                                                 "m2!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -16
                                                                                                                       :where
                                                                                                                       -2)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -8
                                                                                                                 "tau!1"
                                                                                                                 "s2!1"
                                                                                                                 "m2!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -17
                                                                                                                         "y!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (inst?
                                                                                                                               -17
                                                                                                                               :where
                                                                                                                               -3)))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "derive"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             -14
                                                                                                             "m1!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -14
                                                                                                                   :where
                                                                                                                   -5)))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (use
                                                                                 "derive_boolean_expr_type")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "id")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_BoolExpr")
                                                                                    (("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (inst?)
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (inst?)
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -7
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -7
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (inst?)
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "wf_ghoststate")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "id")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ghost")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "defined?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_GhostVars")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_store")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "b!1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_Body")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "b!1")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "subterm"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "derive_bottom_iff_exception_step")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1
                                                                                                                                           :where
                                                                                                                                           -10)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (inst?)
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (inst?)
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -9
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -9
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -9
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(p!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "wf_state(p!1)(update_PState(tau2!1, catch))")
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -13
                                                                                                   :where
                                                                                                   -8)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           26)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "wf_update_PState")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       (1
                                                                                                                        -1))
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "is_field")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "is_local")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -5)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -12
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (inst?)
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (inst?)
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "b!1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -6
                                                                                         "test(b!1)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<<")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_Body")
                                                                                              (("2"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "var_names"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (auto-rewrite
                                                                                                             "union"
                                                                                                             "member"
                                                                                                             "emptyset")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "While(test(b!1), body(b!1)) = b!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "var_names"
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -4
                                                                                                     "b1!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subterm"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "While[Name](test[Name](b!1), body[Name](b!1)) = b!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -10
                                                                                                               "b1!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "subterm"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply-extensionality
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (inst?)
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (typepred "b!1")
          (("2" (expand "id") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics
     nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (is_field const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (extend const-decl "R" extend nil)
    (list_induction formula-decl nil list_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (id_preserves application-judgement "S" identity_props nil)
    (derive_boolean_expr_type formula-decl nil SemanticsProofs nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   31378 27920 t shostak))
 (on_method_entry_yields_wf_state_AP_TCC1 0
  (on_method_entry_yields_wf_state_AP_TCC1-1 nil 3406553260 3406611067
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil (is_local const-decl "boolean" State nil) nil nil nil
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   573 530 nil nil))
 (on_method_entry_yields_wf_state_AP_TCC2 0
  (on_method_entry_yields_wf_state_AP_TCC2-1 nil 3406553575 3406611067
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil (is_local const-decl "boolean" State nil) nil nil nil
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   580 530 nil nil))
 (on_method_entry_yields_wf_state_AP_TCC3 0
  (on_method_entry_yields_wf_state_AP_TCC3-1 nil 3406553575 3406611068
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil (is_local const-decl "boolean" State nil) nil nil nil
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   613 570 nil nil))
 (on_method_entry_yields_wf_state_AP 0
  (on_method_entry_yields_wf_state_AP-1 nil 3406553294 3406611069
   ("" (skosimp*)
    (("" (expand "on_method_entry")
      ((""
        (apply (branch (split -3)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (use "derive_yields_wf_state_AP")
                (("1" (assert)
                  (("1" (hide -9)
                    (("1" (use "derive_yields_wf_state_AP")
                      (("1" (assert)
                        (("1" (hide -5)
                          (("1" (use "derive_yields_wf_state_AP")
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (replace -9)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (then
                                          (split 1)
                                          (skosimp*)
                                          (split 1)
                                          (skosimp*)
                                          (use "wf_update_PState")
                                          (assert)
                                          (skosimp*)
                                          (expand "update_PState")
                                          (use "wf_state_raise")
                                          (assert)))
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -5)
                                  (("2"
                                    (apply
                                     (then
                                      (lift-if)
                                      (split 1)
                                      (skosimp*)
                                      (split 1)
                                      (skosimp*)
                                      (use "wf_update_PState")
                                      (assert)
                                      (skosimp*)
                                      (expand "update_PState")
                                      (use "wf_state_raise")
                                      (assert)))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (then
                                      (typepred "m!1")
                                      (expand*
                                       "wf_Method"
                                       "method_pred")
                                      (flatten)))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (apply (then
                                (typepred "p!1")
                                (expand* "wf_Program" "program_pred")
                                (flatten)))
                        (("2"
                          (apply (then
                                  (expand "lookup_inv")
                                  (lift-if)
                                  (assert)))
                          (("2" (expand "id")
                            (("2"
                              (apply (branch
                                      (split -7)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (inst -7 "down(get_class(p!1)(a!1))")
                                (("1"
                                  (use "get_class_in_classes")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (expand*
                                   "wf_Body"
                                   "var_names"
                                   "emptyset"
                                   "subterm")
                                  (("2"
                                    (skosimp*)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (apply (then (typepred "m!1")
                          (expand* "wf_Method" "method_pred")
                          (flatten)))
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (raise const-decl "PState" State nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil) nil
    (subterm adt-def-decl "boolean" Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (program_pred const-decl "bool" ProgramRestriction nil) nil
    (wf_Method const-decl "boolean" WellFormedProgram nil) nil
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1510 1380 t shostak))
 (on_method_exit_normal_yields_wf_state_AP 0
  (on_method_exit_normal_yields_wf_state_AP-1 nil 3406554024 3406611071
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal")
      ((""
        (apply (branch (split -3)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (use "derive_yields_wf_state_AP")
                (("1" (assert)
                  (("1" (hide -3)
                    (("1" (use "derive_yields_wf_state_AP")
                      (("1" (assert)
                        (("1" (hide -7)
                          (("1" (use "derive_yields_wf_state_AP")
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (replace -11)
                                  (("1"
                                    (apply
                                     (then
                                      (lift-if)
                                      (split 2)
                                      (skosimp*)
                                      (split 1)
                                      (skosimp*)
                                      (use "wf_update_PState")
                                      (assert)
                                      (skosimp*)
                                      (expand "update_PState")
                                      (use "wf_state_raise")
                                      (assert)))
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -7)
                                  (("2"
                                    (apply
                                     (then
                                      (lift-if)
                                      (split 1)
                                      (skosimp*)
                                      (split 1)
                                      (skosimp*)
                                      (use "wf_update_PState")
                                      (assert)
                                      (skosimp*)
                                      (expand "update_PState")
                                      (use "wf_state_raise")
                                      (assert)))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (then
                                      (typepred "m!1")
                                      (expand*
                                       "wf_Method"
                                       "method_pred")
                                      (flatten)))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (apply (then
                                (typepred "p!1")
                                (expand* "wf_Program" "program_pred")
                                (flatten)))
                        (("2"
                          (apply (then
                                  (expand "lookup_inv")
                                  (lift-if)
                                  (assert)))
                          (("2" (expand "id")
                            (("2"
                              (apply (branch
                                      (split -9)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (inst -7 "down(get_class(p!1)(a!1))")
                                (("1"
                                  (use "get_class_in_classes")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (expand*
                                   "wf_Body"
                                   "var_names"
                                   "emptyset"
                                   "subterm")
                                  (("2"
                                    (skosimp*)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (apply (then (typepred "m!1")
                          (expand* "wf_Method" "method_pred")
                          (flatten)))
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (wf_state_raise formula-decl nil State nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (raise const-decl "PState" State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil) nil
    (subterm adt-def-decl "boolean" Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (program_pred const-decl "bool" ProgramRestriction nil) nil
    (wf_Method const-decl "boolean" WellFormedProgram nil) nil
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1488 1360 t shostak))
 (on_method_exit_exceptional_yields_wf_state_AP 0
  (on_method_exit_exceptional_yields_wf_state_AP-1 nil 3406554172
   3406611073
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional")
      ((""
        (apply (branch (split -3)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (use "derive_yields_wf_state_AP")
                (("1" (assert)
                  (("1" (hide -4)
                    (("1" (use "derive_yields_wf_state_AP")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (case "wf_state(p!1)(tau2!1)")
                            (("1" (replace -11)
                              (("1"
                                (apply
                                 (then
                                  (lift-if)
                                  (split 2)
                                  (skosimp*)
                                  (split 1)
                                  (skosimp*)
                                  (use "wf_update_PState")
                                  (assert)
                                  (skosimp*)
                                  (expand "update_PState")
                                  (use "wf_state_raise")
                                  (assert)))
                                nil
                                nil))
                              nil)
                             ("2" (replace -9)
                              (("2"
                                (apply
                                 (then
                                  (lift-if)
                                  (split 1)
                                  (skosimp*)
                                  (split 1)
                                  (skosimp*)
                                  (use "wf_update_PState")
                                  (assert)
                                  (skosimp*)
                                  (expand "update_PState")
                                  (use "wf_state_raise")
                                  (assert)))
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (split -1)
                            (("1" (propax) nil nil)
                             ("2"
                              (apply (then
                                      (use "wf_update_PState")
                                      (assert)
                                      (skosimp*)
                                      (expand "update_PState")
                                      (use "wf_state_catch")
                                      (assert)))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (apply (then
                                (typepred "p!1")
                                (expand* "wf_Program" "program_pred")
                                (flatten)))
                        (("2"
                          (apply (then
                                  (expand "lookup_inv")
                                  (lift-if)
                                  (assert)))
                          (("2" (expand "id")
                            (("2"
                              (apply (branch
                                      (split -10)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (inst -7 "down(get_class(p!1)(a!1))")
                                (("1"
                                  (use "get_class_in_classes")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (expand*
                                   "wf_Body"
                                   "var_names"
                                   "emptyset"
                                   "subterm")
                                  (("2"
                                    (skosimp*)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (apply (then (typepred "m!1")
                          (expand* "wf_Method" "method_pred")
                          (flatten)))
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state_catch formula-decl nil State nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil) nil
    (subterm adt-def-decl "boolean" Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (wf_Method const-decl "boolean" WellFormedProgram nil) nil
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (catch const-decl "PState" State nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1539 1420 t shostak))
 (on_method_entry_AP_TCC1 0
  (on_method_entry_AP_TCC1-1 nil 3391506354 3406611073
   ("" (expand "id") (("" (propax) nil nil)) nil) proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)) 87 90 t nil))
 (on_method_entry_AP_TCC2 0
  (on_method_entry_AP_TCC2-1 nil 3401609002 3406611073
   ("" (expand "id") (("" (propax) nil nil)) nil) proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)) 87 90 t nil))
 (on_method_entry_AP_TCC3 0
  (on_method_entry_AP_TCC3-1 nil 3403446339 3406611073
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_entry")
        (("" (split -1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (flatten)
                  (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   366 300 t nil))
 (determ_step_AP_TCC1 0
  (determ_step_AP_TCC1-1 nil 3401609002 3406611073
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)) 223 220 nil
   nil))
 (determ_step_AP 0
  (determ_step_AP-1 nil 3396347126 3406611074
   ("" (skosimp*)
    (("" (use "derive_determ_step") (("" (assert) nil nil)) nil)) nil)
   unchecked
   ((derive_determ_step formula-decl nil SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil))
   167 140 t shostak))
 (derive_bottom_iff_exception_step_AP 0
  (derive_bottom_iff_exception_step_AP-1 nil 3396347163 3406611074
   ("" (skosimp*)
    (("" (use "derive_bottom_iff_exception_step")
      (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil))
   117 120 t shostak))
 (derive_boolean_expr_type_AP_TCC1 0
  (derive_boolean_expr_type_AP_TCC1-1 nil 3401609002 3406611074
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   369 340 nil nil))
 (derive_boolean_expr_type_AP 0
  (derive_boolean_expr_type_AP-1 nil 3396347184 3406611074
   ("" (skosimp*)
    (("" (use "derive_boolean_expr_type")
      (("1" (assert) nil nil)
       ("2" (typepred "b!1")
        (("2" (expand "id") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((derive_boolean_expr_type formula-decl nil SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    nil nil (id_preserves application-judgement "S" identity_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   156 120 t shostak)))
(APSemanticsProperties
 (non_interference_of_set_stmt_TCC1 0
  (non_interference_of_set_stmt_TCC1-1 nil 3401609268 3406626022
   ("" (skosimp*)
    (("" (expand "id")
      ((""
        (use "wf_Body_preserved_by_proper_subterm"
             ("b2" "source(c!1)"))
        (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil))
   190 180 t nil))
 (non_interference_of_set_stmt_TCC2 0
  (non_interference_of_set_stmt_TCC2-1 nil 3401609268 3406626022
   ("" (skosimp*) (("" (expand "id") (("" (propax) nil nil)) nil)) nil)
   proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)) 184 140 t nil))
 (non_interference_of_set_stmt 0
  (non_interference_of_set_stmt-1 nil 3389426699 3406626023
   ("" (skosimp*)
    (("" (expand* "derive" "execute_set" "body_has_no_side_effects")
      (("" (assert)
        (("" (prop)
          (("" (skosimp)
            (("" (inst?)
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (expand* "update_GhostVars" "update_store")
                      (("1" (replace -5 3 :hide? t)
                        (("1" (replace -8 :dir rl :hide? t)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (body_has_no_side_effects const-decl "boolean"
     AnnotatedProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (update_store const-decl "Store" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   844 790 t nil))
 (CaseJML_exclusive_branches_semantics_TCC1 0
  (CaseJML_exclusive_branches_semantics_TCC1-1 nil 3401609268
   3406626023
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "bs!1")
        (("" (expand "wf_Branches")
          (("" (rewrite "every_is_forall")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil))
   168 170 t nil))
 (CaseJML_exclusive_branches_semantics_TCC2 0
  (CaseJML_exclusive_branches_semantics_TCC2-1 nil 3401609268
   3406626023
   ("" (skosimp*)
    (("" (typepred "proj_1(b2!1)")
      (("" (expand "wf_BoolExpr")
        (("" (assert) (("" (expand "id") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((wf_Stmt const-decl "boolean" WellFormedProgram nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (id_preserves application-judgement "S" identity_props nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   226 200 t nil))
 (CaseJML_exclusive_branches_semantics_TCC3 0
  (CaseJML_exclusive_branches_semantics_TCC3-1 nil 3401609268
   3406626023
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "bs!1") (("" (rewrite "wf_Body_CaseJML") nil nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (wf_Body_CaseJML formula-decl nil WellFormedProgram nil))
   151 150 t nil))
 (CaseJML_exclusive_branches_semantics_TCC4 0
  (CaseJML_exclusive_branches_semantics_TCC4-1 nil 3401609268
   3406626024
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "proj_2(b1!1)")
        (("" (expand "wf_Stmt") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   proved-incomplete
   ((id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil))
   149 150 t nil))
 (CaseJML_exclusive_branches_semantics 0
  (CaseJML_exclusive_branches_semantics-2 nil 3398071500 3406626222
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "derive" -6)
        (("2" (assert)
          (("2" (flatten)
            (("2" (expand "execute_CaseJML")
              (("2" (expand* "extend" "id")
                (("2" (flatten)
                  (("2" (expand "derive" -8)
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2" (expand "check_for_exception")
                          (("2" (split -10)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (expand "member" -5)
                                (("2"
                                  (case-replace
                                   "b1!1 = cons1_var!1"
                                   :hide?
                                   t)
                                  (("1"
                                    (inst? -5 :where -10)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (replace -6)
                                            (("1"
                                              (assert)
                                              (("1" (inst? 3) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst-cp
                                       -7
                                       "cons1_var!1"
                                       "tau!1"
                                       "v1!1"
                                       "m1!1")
                                      (("1"
                                        (expand "before" -8)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -8)
                                            (("1"
                                              (replace -9)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "p!1"
                                                   "tau!1"
                                                   "s2!1"
                                                   "v!1"
                                                   "m2!1"
                                                   "b1!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "wf_Branches")
                                                      (("1"
                                                        (expand
                                                         "every"
                                                         -4)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -3)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst?
                                                                   -10)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "before"
                                                                       -10)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (inst?
                                                                   -9)
                                                                  (("3"
                                                                    (inst?
                                                                     -8)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand*
                                         "wf_Branches"
                                         "every"
                                         "wf_Stmt"
                                         "wf_BoolExpr")
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp*)
        (("3" (expand "id")
          (("3" (typepred "proj_2(b1!1)")
            (("3" (expand "wf_Stmt") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skosimp*)
        (("4" (expand "id") (("4" (rewrite "wf_Body_CaseJML") nil nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skosimp*)
        (("5" (expand "id")
          (("5" (typepred "proj_1(b2!1)")
            (("5" (expand "wf_BoolExpr") (("5" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (skosimp*)
        (("6" (expand "id")
          (("6" (typepred "proj_1(b1!1)")
            (("6" (expand "wf_BoolExpr") (("6" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_Body_CaseJML formula-decl nil WellFormedProgram nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (check_for_exception const-decl "bool" Semantics nil) nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (extend const-decl "R" extend nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (derive def-decl "bool" Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (before def-decl "boolean" listfuncs nil)
    (list type-decl nil list_adt nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Excpt type-decl nil Excpt_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   92567 2920 t nil)
  (CaseJML_exclusive_branches_semantics-1 nil 3389427193 3397561497
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "derive" -6)
        (("2" (assert)
          (("2" (expand "execute_CaseJML")
            (("2" (expand "derive" -6)
              (("2" (skosimp*)
                (("2" (expand "check_for_exception")
                  (("2" (prop)
                    (("2" (lift-if)
                      (("2" (expand "member" -5)
                        (("2" (split -5)
                          (("1" (hide -4 -7)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -5 -2 :hide? t)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -4 :hide? t)
                                          (("1" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "b1!1 = cons1_var!1")
                            (("1" (hide -5 -8)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -3 :hide? t)
                                        (("1"
                                          (replace -5 :hide? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 3 "m2!1" "Unit")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst - "p!1" "s1!1" "s2!1" "Unit" "m2!1"
                               "b1!1")
                              (("2"
                                (inst
                                 -7
                                 "cons1_var!1"
                                 "tau!1"
                                 "v1!1"
                                 "m1!1")
                                (("1"
                                  (expand "member" -7)
                                  (("1"
                                    (expand "before" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -8 -3 :hide? t)
                                          (("1"
                                            (replace -7 :hide? t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -4)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand "derive" -3)
                                                  (("4"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (typepred "cons1_var!1`1")
                                  (("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   495 494 t nil)))

