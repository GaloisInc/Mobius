(AnnotatedProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3390796236 3397561465
   ("" (subtype-tcc) nil nil) unchecked
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil)
   25 25 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3390796236 3397561465
   ("" (subtype-tcc) nil nil) unchecked (nil nil nil nil nil) 5 5 t
   nil))
 (initial_AP_state_TCC1 0
  (initial_AP_state_TCC1-1 nil 3389427978 3397561466
   ("" (subtype-tcc) nil nil) unchecked
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil nil)
   30 29 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3390796236 3397561468
   ("" (skosimp*)
    (("" (expand "on_method_entry")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2" (replace -2 :dir rl)
                    (("2" (replace -13)
                      (("2"
                        (inst-cp -11 "inv!1" "v!4" "v!2" "s!1" "tau1!5"
                         "tau1!3" "m1!2" "m1!1" "m1!2 - 1" "m1!1 - 1")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (replace -12)
                              (("1"
                                (replace -13)
                                (("1"
                                  (replace -14)
                                  (("1"
                                    (replace -5 :dir rl)
                                    (("1"
                                      (replace -19)
                                      (("1"
                                        (inst-cp
                                         -11
                                         "pre(m!1)"
                                         "v!5"
                                         "v!3"
                                         "tau1!1"
                                         "tau1!6"
                                         "tau1!4"
                                         "m2!2"
                                         "m2!1"
                                         "m2!2 - 1"
                                         "m2!1 - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -12)
                                              (("1"
                                                (replace -13)
                                                (("1"
                                                  (replace -14)
                                                  (("1"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace -25)
                                                      (("1"
                                                        (inst
                                                         -11
                                                         "pre_set(m!1)"
                                                         "Unit"
                                                         "Unit"
                                                         "tau2!1"
                                                         "s1!1"
                                                         "s2!1"
                                                         "n1!1"
                                                         "n2!1"
                                                         "m3!2"
                                                         "m3!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (id_preserves application-judgement "S" identity_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil
    nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (int_minus_int_is_int application-judgement "int" integers nil))
   241 240 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-1 nil 3390796236 3397561470
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2"
                    (inst-cp -11 "post_set(m!1)" "Unit" "Unit" "s!1"
                     "tau1!2" "tau1!1" "n1!1" "n2!1" "m1!2" "m1!1")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (replace -12)
                          (("2" (replace -13)
                            (("2"
                              (inst-cp -11 "post(m!1)" "v!4" "v!2"
                               "tau1!1" "tau1!5" "tau1!3" "m2!2" "m2!1"
                               "m2!2 - 1" "m2!1 - 1")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -12)
                                    (("2"
                                      (replace -13)
                                      (("2"
                                        (replace -14)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5 :dir rl)
                                            (("2"
                                              (replace -21)
                                              (("2"
                                                (replace -22 :dir rl)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (inst
                                                     -11
                                                     "inv!2"
                                                     "v!5"
                                                     "v!3"
                                                     "tau2!1"
                                                     "tau1!6"
                                                     "tau1!4"
                                                     "m3!2"
                                                     "m3!1"
                                                     "m3!2 - 1"
                                                     "m3!1 - 1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -11)
                                                          (("2"
                                                            (replace
                                                             -12)
                                                            (("2"
                                                              (replace
                                                               -13)
                                                              (("2"
                                                                (replace
                                                                 -27
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil nil nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil
    (int_minus_int_is_int application-judgement "int" integers nil))
   169 169 t nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-1 nil 3390796236 3397561471
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "check_assertion")
              (("1" (skosimp*)
                (("1"
                  (inst-cp -10 "exc_set(m!1)" "Unit" "Unit"
                   "update_PState(s!1, catch)" "tau1!3" "tau1!1" "n1!1"
                   "n2!1" "m1!2" "m1!1")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -11)
                        (("1" (replace -15 :dir rl)
                          (("1" (replace -4)
                            (("1"
                              (inst -10 "inv!2" "v!3" "v!2" "tau1!3"
                               "tau1!4" "tau1!2" "m2!2" "m2!1"
                               "m2!2 - 1" "m2!1 - 1")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -10)
                                    (("1"
                                      (replace -11)
                                      (("1"
                                        (replace -12)
                                        (("1"
                                          (replace -7 :dir rl)
                                          (("1"
                                            (replace -20)
                                            (("1"
                                              (replace -21 :dir rl)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil))
   120 119 t nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3390796236 3397561472
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -3)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2"
                    (inst -4
                     "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                           CaseJML(cdr(branches!1)))" "Unit" "Unit"
                     "s!1" "s1!1" "s2!1" "n1!1" "n2!1" "n1!1 - 1"
                     "n2!1 - 1")
                    (("2" (assert)
                      (("2" (split -4)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil)
   115 115 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3390796236 3397561472
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -3)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (replace -6 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   33 33 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3397385547 3397561473
   ("" (skosimp*)
    (("" (expand "execute_assert")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (flatten)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2" (apply (repeat (inst? -5 :where (-2 -7))))
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (replace -5)
                          (("1" (replace -7)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil) ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil nil
    (int_minus_int_is_int application-judgement "int" integers nil))
   64 64 t nil))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3395147174 3397561549
   ("" (skosimp)
    (("" (expand* "wf_state" "ext_declared_var_names")
      (("" (expand* "wf_state" "wf_ghoststate" "id")
        (("" (expand "union")
          (("" (expand "member")
            (("" (flatten)
              (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (union const-decl "set" sets nil) nil
    (member const-decl "bool" sets nil) nil nil
    (id const-decl "(bijective?[T, T])" identity nil))
   4356 35 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3390125110 3397561475
   ("" (skosimp)
    (("" (expand "wf_state")
      ((""
        (expand* "wf_state" "wf_ghoststate" "id" "is_ghost" "is_field"
         "is_local")
        (("" (flatten)
          (("" (use "wf_program_variables_disjoint")
            (("" (use "wf_program_variables_not_reserved_words")
              (("" (assert)
                (("" (flatten)
                  (("" (case-replace "vn!1 = This")
                    (("1" (hide -3 -4 -5)
                      (("1"
                        (expand* "disjoint?" "intersection" "empty?"
                         "member" "declared_var_names")
                        (("1" (inst? -)
                          (("1" (split)
                            (("1" (inst? -3)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "reserved_words")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2"
                        (expand* "disjoint?" "empty?" "intersection"
                         "member")
                        (("2" (inst - "vn!1")
                          (("2" (inst - "vn!1")
                            (("2" (inst - "vn!1")
                              (("2"
                                (inst - "vn!1")
                                (("2"
                                  (inst - "vn!1")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil nil (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil)
   241 241 t shostak))
 (wf_update_PState 0
  (wf_update_PState-2 nil 3392375532 3397561476 ("" (grind) nil nil)
   unfinished
   (nil nil nil nil nil (boolean nonempty-type-decl nil booleans nil)
    nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    nil nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil)
   90 89 nil nil)
  (wf_update_PState-1 nil 3391156508 3392371192 ("" (grind) nil nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   468 420 t shostak))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3391169512 3397561476
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished (nil nil) 3 3 t shostak))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3391162146 3397561480
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                        ({x: [Name, Val[Name]] |
                            EXISTS (l: LocalVarDecl[Name]):
                              lvds!1(l) AND
                               name(l) = PROJ_1(x) AND
                                default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(p!1)
                                (update_local(name(arg!1), param_val!1)
                                             (update_locals({x: [Name, Val[Name]]
                                                             |
                                                             EXISTS
                                                             (l: LocalVarDecl[Name]):
                                                             lvds!1(l)
                                                             AND
                                                             name(l) = PROJ_1(x)
                                                             AND
                                                             default_value(jtype(l))
                                                             =
                                                             PROJ_2(x)})
                                                           (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(p!1)
                                    (update_locals({x: [Name, Val[Name]] |
                                                      EXISTS (l: LocalVarDecl[Name]):
                                                        lvds!1(l) AND
                                                         name(l) = PROJ_1(x) AND
                                                          default_value(jtype(l)) = PROJ_2(x)})
                                                  (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "var_names")
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                               EXISTS (l: LocalVarDecl[Name]):
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil
    (injective? const-decl "bool" functions nil) nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil)
   364 363 t shostak))
 (wf_initial_AP_state 0
  (wf_initial_AP_state-1 nil 3390075578 3397561480
   ("" (skosimp*)
    (("" (expand "initial_AP_state")
      (("" (expand "wf_state")
        (("" (split 1)
          (("1" (lemma "wf_initial_Program_state")
            (("1" (inst -1 "p!1" "this_val!1") (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (use "wf_initial_ghost_state")
            (("1" (expand "id") (("1" (propax) nil nil)) nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    nil nil (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil) nil nil nil
    nil nil)
   13 12 t shostak))
 (on_method_entry_AP_TCC1 0
  (on_method_entry_AP_TCC1-1 nil 3391506354 3397561481
   ("" (typepred "on_method_entry")
    (("" (assert)
      (("" (expand "on_method_event_type") (("" (propax) nil nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil nil nil
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil) nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    nil (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   36 37 t nil))
 (determ_step_AP 0
  (determ_step_AP-1 nil 3396347126 3397561481
   ("" (skosimp*)
    (("" (use "derive_determ_step") (("" (assert) nil nil)) nil)) nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil)
   27 27 t shostak))
 (derive_bottom_iff_exception_step_AP 0
  (derive_bottom_iff_exception_step_AP-1 nil 3396347163 3397561481
   ("" (skosimp*)
    (("" (use "derive_bottom_iff_exception_step")
      (("" (assert) nil nil)) nil))
    nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil)
   6 6 t shostak))
 (derive_boolean_expr_type_AP 0
  (derive_boolean_expr_type_AP-1 nil 3396347184 3397561481
   ("" (skosimp*)
    (("" (use "derive_boolean_expr_type") (("" (assert) nil nil)) nil))
    nil)
   unfinished
   (nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil)
   25 25 t shostak)))
(APSemanticsProperties
 (non_interference_of_set_stmt 0
  (non_interference_of_set_stmt-1 nil 3389426699 3397561483
   ("" (skosimp*)
    (("" (expand "derive")
      (("" (expand "spec_expr_has_no_side_effects")
        (("" (expand "execute_set")
          (("" (assert)
            (("" (prop)
              (("" (skosimp)
                (("" (inst?)
                  (("1" (assert)
                    (("1" (replace -7)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "update_GhostVars")
                            (("1" (expand "update_store")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil)
   142 141 t nil))
 (CaseJML_exclusive_branches_semantics 0
  (CaseJML_exclusive_branches_semantics-2 nil 3398071500 3398071519
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "derive" -6)
        (("2" (assert)
          (("2" (expand "execute_CaseJML")
            (("2" (expand "derive" -6)
              (("2" (skosimp*)
                (("2" (expand "check_for_exception")
                  (("2" (prop)
                    (("2" (lift-if)
                      (("2" (expand "member" -5)
                        (("2" (split -5)
                          (("1" (hide -4 -7)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -5 -2 :hide? t)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -4 :hide? t)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "b1!1 = cons1_var!1")
                            (("1" (hide -5 -8)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -3 :hide? t)
                                        (("1"
                                          (replace -5 :hide? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 3 "m2!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst - "p!1" "s1!1" "s2!1" "Unit" "m2!1"
                               "b1!1")
                              (("2"
                                (inst
                                 -7
                                 "cons1_var!1"
                                 "tau!1"
                                 "v1!1"
                                 "m1!1")
                                (("1"
                                  (expand "before" -7)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -8 -3 :hide? t)
                                        (("1"
                                          (replace -7 :dir rl :hide? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (reveal -3)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "before"
                                                         -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "derive" -3)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list type-decl nil list_adt nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Excpt type-decl nil Excpt_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (> const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (derive def-decl "bool" Semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (before def-decl "boolean" listfuncs nil)
    (FALSE const-decl "bool" booleans nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (list_induction formula-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (m1!1 skolem-const-decl "nat" APSemanticsProperties nil)
    (n!1 skolem-const-decl "nat" APSemanticsProperties nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   16236 7530 nil nil)
  (CaseJML_exclusive_branches_semantics-1 nil 3389427193 3397561497
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "derive" -6)
        (("2" (assert)
          (("2" (expand "execute_CaseJML")
            (("2" (expand "derive" -6)
              (("2" (skosimp*)
                (("2" (expand "check_for_exception")
                  (("2" (prop)
                    (("2" (lift-if)
                      (("2" (expand "member" -5)
                        (("2" (split -5)
                          (("1" (hide -4 -7)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -5 -2 :hide? t)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -4 :hide? t)
                                          (("1" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "b1!1 = cons1_var!1")
                            (("1" (hide -5 -8)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -3 :hide? t)
                                        (("1"
                                          (replace -5 :hide? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 3 "m2!1" "Unit")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst - "p!1" "s1!1" "s2!1" "Unit" "m2!1"
                               "b1!1")
                              (("2"
                                (inst
                                 -7
                                 "cons1_var!1"
                                 "tau!1"
                                 "v1!1"
                                 "m1!1")
                                (("1"
                                  (expand "member" -7)
                                  (("1"
                                    (expand "before" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -8 -3 :hide? t)
                                          (("1"
                                            (replace -7 :hide? t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -4)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand "derive" -3)
                                                  (("4"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (typepred "cons1_var!1`1")
                                  (("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   495 494 t nil)))

