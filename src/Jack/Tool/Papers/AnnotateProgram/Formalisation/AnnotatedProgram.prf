(AnnotatedProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3390796236 3394352429
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   22 22 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3390796236 3394352429
   ("" (subtype-tcc) nil nil) unchecked nil 5 5 t nil))
 (initial_AP_state_TCC1 0
  (initial_AP_state_TCC1-1 nil 3389427978 3394352429
   ("" (subtype-tcc) nil nil) unchecked
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   27 27 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3390796236 3394352431
   ("" (skosimp*)
    (("" (expand "on_method_entry")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2" (replace -2 :dir rl)
                    (("2" (replace -14)
                      (("2"
                        (inst-cp -12 "inv!1" "v!2" "v!4" "s!1" "tau1!3"
                         "tau1!5" "m1!1" "m1!2" "m1!1 - 1" "m1!2 - 1")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (replace -13)
                              (("1"
                                (replace -14)
                                (("1"
                                  (replace -15)
                                  (("1"
                                    (replace -5 :dir rl)
                                    (("1"
                                      (replace -20)
                                      (("1"
                                        (inst
                                         -12
                                         "pre(m!1)"
                                         "v!3"
                                         "v!5"
                                         "tau1!1"
                                         "tau1!4"
                                         "tau1!6"
                                         "m2!1"
                                         "m2!2"
                                         "m2!1 - 1"
                                         "m2!2 - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -12)
                                                (("1"
                                                  (replace -13)
                                                  (("1"
                                                    (replace -14)
                                                    (("1"
                                                      (replace
                                                       -8
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace -25)
                                                        (("1"
                                                          (inst
                                                           -11
                                                           "pre_set(m!1)"
                                                           "tau2!1"
                                                           "s1!1"
                                                           "s2!1"
                                                           "n1!1"
                                                           "n2!1"
                                                           "m3!1"
                                                           "m3!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (id_preserves application-judgement "S" identity_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   229 228 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-1 nil 3390796236 3394352433
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (skosimp*)
                  (("2"
                    (inst -11 "post_set(m!1)" "s!1" "tau1!1" "tau1!2"
                     "n1!1" "n2!1" "m1!1" "m1!2")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (replace -11)
                          (("2" (replace -12)
                            (("2"
                              (inst-cp -13 "post(m!1)" "v!2" "v!4"
                               "tau1!2" "tau1!3" "tau1!5" "m2!1" "m2!2"
                               "m2!1 - 1" "m2!2 - 1")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -14)
                                    (("2"
                                      (replace -15)
                                      (("2"
                                        (replace -16)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5 :dir rl)
                                            (("2"
                                              (replace -21)
                                              (("2"
                                                (replace -22 :dir rl)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (inst
                                                     -13
                                                     "inv!2"
                                                     "v!3"
                                                     "v!5"
                                                     "tau2!1"
                                                     "tau1!4"
                                                     "tau1!6"
                                                     "m3!1"
                                                     "m3!2"
                                                     "m3!1 - 1"
                                                     "m3!2 - 1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -14)
                                                          (("2"
                                                            (replace
                                                             -15)
                                                            (("2"
                                                              (replace
                                                               -13)
                                                              (("2"
                                                                (replace
                                                                 -27
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   181 181 t nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-1 nil 3390796236 3394352434
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional")
      (("" (split -3)
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "check_assertion")
              (("1" (skosimp*)
                (("1"
                  (inst -10 "exc_set(m!1)" "update_PState(s!1, catch)"
                   "tau1!1" "tau1!3" "n1!1" "n2!1" "m1!1" "m1!2")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -10)
                        (("1" (replace -15 :dir rl)
                          (("1" (replace -4)
                            (("1"
                              (inst -12 "inv!2" "v!2" "v!3" "tau1!3"
                               "tau1!2" "tau1!4" "m2!1" "m2!2"
                               "m2!1 - 1" "m2!2 - 1")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -12)
                                    (("1"
                                      (replace -13)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -7 :dir rl)
                                          (("1"
                                            (replace -20)
                                            (("1"
                                              (replace -21 :dir rl)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil))
   76 76 t nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3390796236 3394352434
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -3)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2"
                    (inst -4
                     "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                       CaseJML(cdr(branches!1)))" "s!1" "s1!1" "s2!1"
                     "n1!1" "n2!1" "n1!1 - 1" "n2!1 - 1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil))
   32 32 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3390796236 3394352435
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -2 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -3)
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (replace -7 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   68 68 t nil))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3390125110 3394352455
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (assert)
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (expand "wf_ghoststate")
              (("" (expand "id")
                (("" (expand "is_ghost")
                  (("" (expand "is_field")
                    (("" (expand "is_local")
                      (("" (expand "defined?")
                        (("" (use "wf_program_variables_disjoint")
                          (("" (use "wf_program_variables_not_this")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (case-replace "vn!1 = This")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "disjoint?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (expand "intersection")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst -1 "vn!1")
                                            (("2"
                                              (inst -1 "vn!1")
                                              (("2"
                                                (inst -1 "vn!1")
                                                (("2"
                                                  (inst -1 "vn!1")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -5 "vn!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   2021 2017 t shostak))
 (wf_update_PState 0
  (wf_update_PState-2 nil 3392375532 3394352455 ("" (grind) nil nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   41 41 nil nil)
  (wf_update_PState-1 nil 3391156508 3392371192 ("" (grind) nil nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   468 420 t shostak))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3391169512 3394352456
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished nil 20 21 t shostak))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3391162146 3394353275
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                        ({x: [Name, Val[Name]] |
                            EXISTS (l: LocalVarDecl[Name]):
                              lvds!1(l) AND
                               name(l) = PROJ_1(x) AND
                                default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(p!1)
                                (update_local(name(arg!1), param_val!1)
                                             (update_locals({x: [Name, Val[Name]]
                                                             |
                                                             EXISTS
                                                             (l: LocalVarDecl[Name]):
                                                             lvds!1(l)
                                                             AND
                                                             name(l) = PROJ_1(x)
                                                             AND
                                                             default_value(jtype(l))
                                                             =
                                                             PROJ_2(x)})
                                                           (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(p!1)
                                    (update_locals({x: [Name, Val[Name]] |
                                                      EXISTS (l: LocalVarDecl[Name]):
                                                        lvds!1(l) AND
                                                         name(l) = PROJ_1(x) AND
                                                          default_value(jtype(l)) = PROJ_2(x)})
                                                  (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "var_names")
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                               EXISTS (l: LocalVarDecl[Name]):
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                 lvds!1(l) AND
                                  name(l) = PROJ_1(x) AND
                                   default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lift type-decl nil lift_adt nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   56451 3473 t shostak))
 (wf_initial_AP_state 0
  (wf_initial_AP_state-1 nil 3390075578 3394352587
   ("" (skosimp*)
    (("" (expand "initial_AP_state")
      (("" (expand "wf_state")
        (("" (split 1)
          (("1" (lemma "wf_initial_Program_state")
            (("1" (inst -1 "p!1" "this_val!1") (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (use "wf_initial_ghost_state")
            (("1" (expand "id") (("1" (propax) nil nil)) nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil))
   28 27 t shostak))
 (deriv_expr_yields_wf_state_AP 0
  (deriv_expr_yields_wf_state_AP-1 nil 3390125399 3394352621
   ("" (expand "deriv_expr")
    (("" (use "wf_induction[nat, <]")
      (("1"
        (inst -1 "LAMBDA(n : nat) : FORALL (p: Program, e: Expr, v: Val)
                     (sigma1, sigma2: APState):
                wf_Program(p) IMPLIES
                 (FORALL (c: Stmt)(tau1, tau2: APState)(m: below(n)):
                    wf_state(p)(tau1) IMPLIES
                     deriv_stmt(p)(c, tau1, tau2)(m) IMPLIES wf_state(p)(tau2))
                  IMPLIES
                  wf_state(p)(sigma1) IMPLIES
                   deriv_expr(p)(e, sigma1, v, sigma2)(n)
                             (LAMBDA (p: Program[Name])
                                     (c: Stmt[Name], sigma1, sigma2: APState)
                                     (m: below(n)):
                                deriv_stmt(p)(c, sigma1, sigma2)(m))
                    IMPLIES wf_state(p)(sigma2)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (rewrite "deriv_expr" -5)
                (("2" (split -5)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (skosimp*)
                              (("1"
                                (inst -5 "x!1 - 1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "p!1"
                                     "source(e!1)"
                                     "v!1"
                                     "sigma1!1"
                                     "tau!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "wf_update_PState")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "update_PState"
                                                           1)
                                                          (("2"
                                                            (use
                                                             "wf_state_update")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "deriv_expr_bottom_iff_exception_step")
                                                              (("2"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst? -8)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -6 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -7)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst? -10)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp
                                                     -15
                                                     "m1!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst? -16)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -16)
                                                            (("1"
                                                              (inst-cp
                                                               -16
                                                               "m2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -17)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -17)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "wf_state(p!1)(tau3!1)")
                                                                          (("1"
                                                                            (case-replace
                                                                             "wf_state(p!1)(tau4!1)")
                                                                            (("1"
                                                                              (case-replace
                                                                               "wf_state(p!1)(tau5!1)")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "wf_state(p!1)(tau6!1)")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "wf_state(p!1)(tau7!1)")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "wf_state(p!1)(tau8!1)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -22)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "wf_update_PState")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           5)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "p!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "getLocalDecls(p!1)(arg(md!1))")
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "wf_state_update_local")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_state"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -2
                                                                                                             "name(arg(md!1))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -18)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "lookup_local")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "wf_state"
                                                                                                             -7)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "wf_state"
                                                                                                               -7)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -7
                                                                                                                   "name(arg(md!1))")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -10)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "is_local")
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "var_names")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "getLocalDecls")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       _
                                                                                                       "md!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -14)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "lookup_mthd(id(p!1), a!1, name(e!1))")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "every")
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "methods")
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "c!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "id")
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       -19)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "on_method_exit_normal")
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "check_assertion")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (inst-cp
                                                                                                       -34
                                                                                                       "post_set(md!1)"
                                                                                                       "tau7!1"
                                                                                                       "tau1!2"
                                                                                                       "m1!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -32
                                                                                                           "m2!2 - 1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -33)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -33)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "wf_state(p!1)(tau2!2)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -34
                                                                                                                       "m3!2 - 1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -34)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -13)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (use
                                                                                                                                               "wf_update_PState")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState")
                                                                                                                                                  (("2"
                                                                                                                                                    (use
                                                                                                                                                     "wf_state_raise")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst?
                                                                                                                                   -37)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "wf_update_PState")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "update_PState")
                                                                                                                                        (("2"
                                                                                                                                          (use
                                                                                                                                           "wf_state_raise")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst?
                                                                                                                       -36)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "on_method_exit_exceptional")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "wf_state(p!1)(tau1!2)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "wf_state(p!1)(tau2!2)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "wf_update_PState")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "check_assertion")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "wf_state(p!1)(tau1!3)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_update_PState")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             -30
                                                                                                             "m2!2 -1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -33
                                                                                                                       :where
                                                                                                                       -31)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?
                                                                                                   -29
                                                                                                   :where
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "wf_update_PState")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split
                                                                                     -17)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -21
                                                                                           "m5!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -24
                                                                                                     :where
                                                                                                     -22)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?
                                                                                   -22
                                                                                   :where
                                                                                   -15)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -13)
                                                                                (("2"
                                                                                  (split
                                                                                   -10)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "id")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "lookup_mthd(p!1, a!1, name(e!1))")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "every")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "methods")
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_update_stack")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "getLocalDecls")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "getLocalDecls")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "on_method_entry")
                                                                              (("2"
                                                                                (split
                                                                                 -10)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "check_assertion")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -27
                                                                                                 "m1!2 - 1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -28)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -28)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "wf_state(p!1)(tau1!2)")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -29
                                                                                                             "m2!2 - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -29)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -29)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(p!1)(tau2!2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -32)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (use
                                                                                                                                       "wf_update_PState")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update_PState")
                                                                                                                                          (("2"
                                                                                                                                            (use
                                                                                                                                             "wf_state_raise")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst?
                                                                                                                         -32)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -6)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_update_PState")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -31)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -7)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_update_PState")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst?
                                                                           -20)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -19)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   unfinished
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (id_preserves application-judgement "S" identity_props nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   3310 3287 t shostak))
 (deriv_stmt_yields_wf_state_AP 0
  (deriv_stmt_yields_wf_state_AP-2 nil 3392371370 3394352638
   ("" (use "wf_induction[nat, <]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, c: Stmt, sigma1, sigma2: APState):
            wf_Program(p) IMPLIES
             wf_state(p)(sigma1) IMPLIES
              deriv_stmt(p)(c, sigma1, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (assert)
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "deriv_stmt" -4)
                (("2" (split -4)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (expand "execute_CaseJML")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -6 "x!1 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (lemma
                                       "deriv_expr_yields_wf_state_AP")
                                      (("1"
                                        (expand "deriv_expr" -1)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -8
                                                         "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -5 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -5 "m2!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "execute_set")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma
                                                     "deriv_expr_yields_wf_state_AP")
                                                    (("1"
                                                      (expand
                                                       "deriv_expr"
                                                       -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace
                                                               -6)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_GhostVars")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (split
                                                                               -8)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_expr_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "deriv_expr"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_ghoststate")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "id")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "vn!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "update_GhostVars")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_store")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ghost")
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "target(c!1) = vn!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_program_target_of_set_declared")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 4)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -9)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (lemma
                                                               "deriv_expr_yields_wf_state_AP")
                                                              (("1"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "update_PState")
                                                                      (("1"
                                                                        (use
                                                                         "wf_state_raise")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -8)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -8
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -9)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "wf_state_raise")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -7
                                                                                       "m2!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -8)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -8)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_update_PState")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_state_raise")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "wf_update_PState")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "wf_state_catch")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
    nil)
   unfinished
   ((wf_nat formula-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   1725 1718 t nil)
  (deriv_stmt_yields_wf_state_AP-1 nil 3391168604 3392371252
   ("" (use "wf_induction[nat, <]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (p: Program, c: Stmt, sigma1, sigma2: APState):
        wf_Program(p) IMPLIES
         wf_state(p)(sigma1) IMPLIES
          deriv_stmt(p)(c, sigma1, sigma2)(n) IMPLIES wf_state(p)(sigma2)")
      (("1" (assert)
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "deriv_stmt" -4)
                (("2" (split -4)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (expand "execute_CaseJML")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -6 "x!1 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (lemma
                                       "deriv_expr_yields_wf_state_AP")
                                      (("1"
                                        (expand "deriv_expr" -1)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -8
                                                         "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -5 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -5 "m2!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "execute_set")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma
                                                     "deriv_expr_yields_wf_state_AP")
                                                    (("1"
                                                      (expand
                                                       "deriv_expr"
                                                       -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace
                                                               -6)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_GhostVars")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (split
                                                                               -8)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_expr_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "deriv_expr"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_ghoststate")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -2
                                                                                               "vn!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_GhostVars")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "update_store")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ghost")
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "target(c!1) = vn!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "wf_program_target_of_set_declared")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               4)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?
                                                                 -9)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (lemma
                                                               "deriv_expr_yields_wf_state_AP")
                                                              (("1"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "update_PState")
                                                                      (("1"
                                                                        (use
                                                                         "wf_state_raise")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -8)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -8
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -9)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "wf_state_raise")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "wf_state_catch")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -7
                                                                                       "m2!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -8)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -8)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_update_PState")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_state_raise")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "wf_update_PState")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "wf_state_catch")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
    nil)
   unfinished
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   11466 8470 t shostak))
 (on_method_entry_AP_TCC1 0
  (on_method_entry_AP_TCC1-1 nil 3391506354 3394352638
   ("" (typepred "on_method_entry")
    (("" (assert)
      (("" (expand "on_method_event_type") (("" (propax) nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   4 5 t nil))
 (expr_determ_step_AP 0
  (expr_determ_step_AP-1 nil 3393152608 3394352649
   ("" (use "expr_determ_step")
    (("" (skosimp*)
      (("" (inst?) (("" (inst?) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   1095 1092 t shostak))
 (stmt_determ_step_AP 0
  (stmt_determ_step_AP-1 nil 3390125303 3394352658
   ("" (use "stmt_determ_step")
    (("" (skosimp*)
      (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   873 869 t shostak))
 (deriv_expr_bottom_iff_exception_step_AP 0
  (deriv_expr_bottom_iff_exception_step_AP-1 nil 3392726021 3394352658
   ("" (skosimp*)
    (("" (use "deriv_expr_bottom_iff_exception_step")
      (("" (assert) nil nil)) nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil))
   5 4 t shostak))
 (deriv_boolean_expr_type_AP 0
  (deriv_boolean_expr_type_AP-1 nil 3393341680 3394352665
   ("" (use "deriv_boolean_expr_type")
    (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   unfinished
   ((list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   741 737 t shostak)))
(APSemanticsProperties
 (proper_subterm_sequence 0
  (proper_subterm_sequence-1 nil 3394426901 3394426908
   ("" (induct "c3")
    (("1" (skosimp*)
      (("1" (use "every_is_forall[[Expr, Stmt]]")
        (("1" (rewrite -1)
          (("1" (expand "<<" (-2 1))
            (("1" (use "some_is_exists[[Expr, Stmt]]")
              (("1" (rewrite -1)
                (("1" (use "some_is_exists[[Expr, Stmt]]")
                  (("1" (rewrite -1)
                    (("1" (use "some_is_exists[[Expr, Stmt]]")
                      (("1" (rewrite -1)
                        (("1" (skosimp)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (inst?)
                                (("1"
                                  (split +)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (replace -1 3 :dir rl)
                                        (("1"
                                          (expand "<<" 3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst?)
                                    (("2"
                                      (ground)
                                      (("2"
                                        (replace -1 3 :dir rl)
                                        (("2"
                                          (expand "<<" 3)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "<<" (-3 1))
        (("2" (inst?)
          (("2" (inst?)
            (("2" (ground)
              (("1" (replace -1 2 :dir rl)
                (("1" (expand "<<" 2) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (replace -1 2 :dir rl)
                (("2" (expand "<<" 2) (("2" (propax) nil nil)) nil))
                nil)
               ("3" (replace -1 4 :dir rl)
                (("3" (expand "<<" 4) (("3" (propax) nil nil)) nil))
                nil)
               ("4" (replace -1 4 :dir rl)
                (("4" (expand "<<" 4) (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "<<" (-3 1))
        (("3" (inst?)
          (("3" (inst?)
            (("3" (ground)
              (("1" (replace -1 2 :dir rl)
                (("1" (expand "<<" 2) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (replace -1 2 :dir rl)
                (("2" (expand "<<" 2) (("2" (propax) nil nil)) nil))
                nil)
               ("3" (replace -1 4 :dir rl)
                (("3" (expand "<<" 4) (("3" (propax) nil nil)) nil))
                nil)
               ("4" (replace -1 4 :dir rl)
                (("4" (expand "<<" 4) (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (expand "<<") (("4" (propax) nil nil)) nil)
     ("5" (expand "<<") (("5" (propax) nil nil)) nil)
     ("6" (expand "<<") (("6" (propax) nil nil)) nil)
     ("7" (expand "<<") (("7" (propax) nil nil)) nil)
     ("8" (skosimp*)
      (("8" (expand "<<" (-4 1))
        (("8" (inst?)
          (("8" (inst?)
            (("8" (inst?)
              (("8" (ground)
                (("1" (replace -1 2 :dir rl)
                  (("1" (expand "<<" 2) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (replace -1 2 :dir rl)
                  (("2" (expand "<<" 2) (("2" (propax) nil nil)) nil))
                  nil)
                 ("3" (replace -1 4 :dir rl)
                  (("3" (expand "<<" 4) (("3" (propax) nil nil)) nil))
                  nil)
                 ("4" (replace -1 4 :dir rl)
                  (("4" (expand "<<" 4) (("4" (propax) nil nil)) nil))
                  nil)
                 ("5" (replace -1 6 :dir rl)
                  (("5" (expand "<<" 6) (("5" (propax) nil nil)) nil))
                  nil)
                 ("6" (replace -1 6 :dir rl)
                  (("6" (expand "<<" 6) (("6" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp*)
      (("9" (expand "<<" (-2 1))
        (("9" (inst?)
          (("9" (ground)
            (("1" (replace -1 2 :dir rl)
              (("1" (expand "<<" 2) (("1" (propax) nil nil)) nil)) nil)
             ("2" (replace -1 2 :dir rl)
              (("2" (expand "<<" 2) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Stmt type-decl nil Stmt_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (Sequence? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Stmt_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Stmt_induction formula-decl nil Stmt_adt nil)
    (Expr type-decl nil Expr_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (list type-decl nil list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   5252 1420 nil nil))
 (proper_subterm_set_clause_sequence 0
  (proper_subterm_set_clause_sequence-1 nil 3394426981 3394426988
   ("" (skosimp*)
    (("" (expand "proper_subterm_set_clause")
      (("" (lemma "proper_subterm_sequence")
        (("" (inst-cp - "c1!1" "c2!1" "pre_set(m!1)")
          (("" (inst-cp - "c1!1" "c2!1" "post_set(m!1)")
            (("" (inst - "c1!1" "c2!1" "exc_set(m!1)")
              (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((proper_subterm_sequence formula-decl nil APSemanticsProperties
     nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil))
   3126 120 t nil))
 (stmt_proper_subterm_is_transitive 0
  (stmt_proper_subterm_is_transitive-1 nil 3394427036 3394427042
   ("" (induct "c3")
    (("1" (skosimp*)
      (("1" (expand "<<" (-3 1))
        (("1" (use "every_is_forall[[Expr, Stmt]] ")
          (("1" (rewrite -1)
            (("1" (use "some_is_exists[[Expr, Stmt]]")
              (("1" (rewrite -1)
                (("1" (use "some_is_exists[[Expr, Stmt]]")
                  (("1" (rewrite -1)
                    (("1" (skosimp)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst - "c1!1" "c2!1")
                              (("1" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "<<" (-4 1))
        (("2" (inst?) (("2" (inst?) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "<<" (-4 1))
        (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "<<" -2) (("4" (propax) nil nil)) nil)) nil)
     ("5" (skosimp*)
      (("5" (expand "<<" -2) (("5" (propax) nil nil)) nil)) nil)
     ("6" (skosimp*)
      (("6" (expand "<<" -2) (("6" (propax) nil nil)) nil)) nil)
     ("7" (skosimp*)
      (("7" (expand "<<" -2) (("7" (propax) nil nil)) nil)) nil)
     ("8" (skosimp*)
      (("8" (expand "<<" (-5 1))
        (("8" (inst?)
          (("8" (inst?) (("8" (inst?) (("8" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp*)
      (("9" (expand "<<" (-3 1))
        (("9" (inst?) (("9" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((Stmt type-decl nil Stmt_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (Stmt_induction formula-decl nil Stmt_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (member def-decl "bool" list_props nil) nil
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Expr type-decl nil Expr_adt nil))
   3563 630 nil nil))
 (non_interference_of_set_stmt 0
  (non_interference_of_set_stmt-1 nil 3389426699 3394446648
   ("" (skosimp*)
    ((""
      (expand* "deriv_stmt" "execute_set" "expr_has_no_side_effects")
      (("" (assert)
        (("" (prop)
          (("" (skosimp)
            (("" (expand "deriv_expr" -7)
              (("" (inst? -)
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (expand* "update_GhostVars" "update_store")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (expr_has_no_side_effects const-decl "boolean" Semantics nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (Val type-decl nil Val_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil APSemanticsProperties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n!1 skolem-const-decl "nat" APSemanticsProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   77712 700 t nil))
 (CaseJML_exclusive_branches_semantics 0
  (CaseJML_exclusive_branches_semantics-1 nil 3389427193 3394352668
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "deriv_stmt" -7)
        (("2" (assert)
          (("2" (expand "execute_CaseJML")
            (("2" (expand "deriv_stmt" -7)
              (("2" (skosimp*)
                (("2" (lift-if)
                  (("2" (expand "member" -3)
                    (("2" (split)
                      (("1" (hide -2 -5)
                        (("1" (replace -1)
                          (("1" (expand "deriv_expr" -3)
                            (("1" (inst? -3)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -4 -9)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (lemma "stmt_determ_step_AP")
                                          (("1"
                                            (inst
                                             -1
                                             "p!1"
                                             "n1!1"
                                             "m2!1"
                                             "PROJ_2(cons1_var!1)"
                                             "tau!2"
                                             "tau!1"
                                             "s2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "cons1_var!1 = b1!1")
                        (("1" (replace -1)
                          (("1" (hide -3 -4 -6 -10)
                            (("1" (inst -3 "tau!2" "v!1" "m1!1")
                              (("1"
                                (expand "deriv_expr" -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -4 -8)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "stmt_determ_step_AP")
                                            (("1"
                                              (inst
                                               -1
                                               "p!1"
                                               "n1!1"
                                               "m2!1"
                                               "PROJ_2(b1!1)"
                                               "tau!2"
                                               "tau!1"
                                               "s2!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst-cp -5 "cons1_var!1" "tau!2" "v!1"
                           "m1!1")
                          (("1" (expand "deriv_expr" -6)
                            (("1" (expand "member" -6)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -7 -12)
                                    (("1"
                                      (replace -6)
                                      (("1"
                                        (inst
                                         -2
                                         "p!1"
                                         "tau!2"
                                         "s2!1"
                                         "tau!1"
                                         "n1!1"
                                         "m2!1"
                                         "b1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -2)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst? -6)
                                                (("2"
                                                  (expand "member" -6)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (inst? -4)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (assert)
                                              (("4"
                                                (expand
                                                 "deriv_stmt"
                                                 -11)
                                                (("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   236 236 t nil))
 (CaseJML_evaluates_true_stmt 0
  (CaseJML_evaluates_true_stmt-1 nil 3392546029 3394352671
   ("" (induct "bs")
    (("1" (expand "member") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (assert)
        (("2" (expand "member" -3)
          (("2" (split -3)
            (("1" (replace -1)
              (("1" (hide -1 -2 -5)
                (("1" (expand "deriv_stmt" -3)
                  (("1" (expand "execute_CaseJML")
                    (("1" (expand "deriv_stmt" -3)
                      (("1" (skosimp*)
                        (("1" (lift-if)
                          (("1" (inst -2 "tau!1" "v!1" "m1!1")
                            (("1" (expand "deriv_expr" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -3 -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "deriv_stmt" -6)
              (("2" (expand "execute_CaseJML")
                (("2" (expand "deriv_stmt" -6)
                  (("2" (skosimp*)
                    (("2" (lift-if)
                      (("2"
                        (inst -2 "p!1" "tau!1" "s2!1" "m2!1" "b1!1")
                        (("2" (assert)
                          (("2" (case "b1!1 = cons1_var!1")
                            (("1" (replace -1)
                              (("1"
                                (expand "deriv_expr" -5)
                                (("1"
                                  (inst? -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -6 -11)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 2 "s2!1" "m2!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst -5 "cons1_var!1" "tau!1" "v!1"
                               "m1!1")
                              (("2"
                                (expand "member" -5)
                                (("2"
                                  (expand "before" -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "deriv_expr" -5)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -6 -10)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (reveal -1)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "b2!1"
                                                       "tau!2"
                                                       "v!2"
                                                       "m2!2")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "member"
                                                           -1)
                                                          (("3"
                                                            (expand
                                                             "before"
                                                             -1)
                                                            (("3"
                                                              (replace
                                                               -8
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (expand
                                                   "deriv_stmt"
                                                   -9)
                                                  (("5"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (before def-decl "boolean" listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (> const-decl "bool" reals nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   272 271 t nil)))

