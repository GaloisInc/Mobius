(LegalProgramRestriction
 (legal_Body_TCC1 0
  (legal_Body_TCC1-1 nil 3405949666 3430477973
   ("" (skosimp*)
    ((""
      (use "wf_Body_preserved_by_proper_subterm"
           ("b1" "b1!1" "b2" "try(b1!1)"))
      (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Name formal-nonempty-type-decl nil LegalProgramRestriction nil)
    (program formal-const-decl "[FullProgram -> Program]"
     LegalProgramRestriction nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil LegalProgramRestriction nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil))
   77200 830 t nil))
 (legal_Body_TCC2 0
  (legal_Body_TCC2-1 nil 3405949666 3430477876
   ("" (skosimp*)
    (("" (typepred "b1!1")
      (("" (lemma "wf_Body_preserved_by_proper_subterm")
        (("" (inst -1 "p!1" "b1!1" "try(b1!1)")
          (("" (assert)
            (("" (rewrite "program_full_program_inverse")
              (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved nil 283 250 t nil))
 (legal_Body_TCC3 0
  (legal_Body_TCC3-2 nil 3405949769 3430478004
   ("" (skosimp*)
    ((""
      (use "wf_Body_preserved_by_proper_subterm"
           ("b1" "b1!1" "b2" "catch(b1!1)"))
      (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Name formal-nonempty-type-decl nil LegalProgramRestriction nil)
    (program formal-const-decl "[FullProgram -> Program]"
     LegalProgramRestriction nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil LegalProgramRestriction nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil))
   25056 570 t nil)
  (legal_Body_TCC3-1 nil 3405949666 nil ("" (subtype-tcc) nil nil) nil nil nil
   nil nil nil))
 (legal_Body_preserved_by_proper_subterm 0
  (legal_Body_preserved_by_proper_subterm-1 nil 3405950300 3430478080
   ("" (skosimp*)
    (("" (expand "legal_Body")
      (("" (skosimp*)
        (("" (inst?)
          (("" (assert)
            (("" (split -1)
              (("1" (apply (repeat (inst? -1 :where (-7 -8 -10))))
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (lemma "proper_subterm_implies_subterm")
                (("2" (inst? -1 :where -2)
                  (("2" (assert)
                    (("2" (lemma "subterm_transitive")
                      (("2" (inst -1 "b1!2" "b2!1" "b1!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((legal_Body const-decl "bool" LegalProgramRestriction nil)
    (Name formal-nonempty-type-decl nil LegalProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil LegalProgramRestriction nil)
    (subterm_transitive formula-decl nil ProgramFunctions nil)
    (proper_subterm_implies_subterm formula-decl nil ProgramFunctions nil))
   64949 550 t shostak)))
(LegalPartialMonitoredProgramRestriction)
(LegalCompleteMonitoredProgramRestriction)
(LegalAnnotatedProgramRestriction)

