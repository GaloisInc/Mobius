(LegalProgramRestriction
 (legal_Body_TCC1 0
  (legal_Body_TCC1-1 nil 3405949666 3433150944
   ("" (skosimp*)
    ((""
      (use "wf_Body_preserved_by_proper_subterm"
           ("b1" "b1!1" "b2" "try(b1!1)"))
      (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (FullProgram formal-type-decl nil LegalProgramRestriction nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]"
     LegalProgramRestriction nil)
    (Name formal-nonempty-type-decl nil LegalProgramRestriction nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil))
   759 650 t nil))
 (legal_Body_TCC2 0
  (legal_Body_TCC2-1 nil 3405949666 3433150997 ("" (skosimp*) nil nil)
   proved nil 17442 350 t nil))
 (legal_Body_TCC3 0
  (legal_Body_TCC3-2 nil 3405949769 3433151007
   ("" (skosimp*)
    ((""
      (use "wf_Body_preserved_by_proper_subterm"
           ("b1" "b1!1" "b2" "catch(b1!1)"))
      (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (FullProgram formal-type-decl nil LegalProgramRestriction nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]"
     LegalProgramRestriction nil)
    (Name formal-nonempty-type-decl nil LegalProgramRestriction nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil))
   796 670 t nil)
  (legal_Body_TCC3-1 nil 3405949666 nil ("" (subtype-tcc) nil nil) nil
   nil nil nil nil nil))
 (legal_Body_preserved_by_proper_subterm 0
  (legal_Body_preserved_by_proper_subterm-1 nil 3405950300 3433151166
   ("" (skosimp*)
    (("" (expand "legal_Body")
      (("" (skosimp*)
        (("" (inst?)
          (("" (assert)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (lemma "proper_subterm_implies_subterm")
                (("2" (inst? -1 :where -2)
                  (("2" (assert)
                    (("2" (lemma "subterm_transitive")
                      (("2" (inst -1 "b1!2" "b2!1" "b1!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((legal_Body const-decl "bool" LegalProgramRestriction nil)
    (Name formal-nonempty-type-decl nil LegalProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (subterm_transitive formula-decl nil ProgramFunctions nil)
    (proper_subterm_implies_subterm formula-decl nil ProgramFunctions
     nil))
   98935 600 t shostak)))
(LegalAnnotatedProgramRestriction)

