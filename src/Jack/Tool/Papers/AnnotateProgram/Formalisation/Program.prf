(|JType|)
(|Excpt|)
(|Body|)
(|Program|
 (|reserved_words_TCC1| 0
  (|reserved_words_TCC1-2| NIL 3394869706 3401690170
   ("" (EXPAND "is_finite")
    ((""
      (INST 1 "6"
       "LAMBDA (n : {n: Name | n = This OR n = Super OR n = rsIf OR n = rsThen OR n = rsElse}) :
                         IF n = This THEN 1
                         ELSIF n = Super THEN 2
                         ELSIF n = rsIf THEN 3
                         ELSIF n = rsThen THEN 4
                         ELSIF n = rsElse THEN 5
                         ELSE 0 ENDIF")
      (("" (EXPAND "injective?")
        (("" (SKOSIMP)
          (("" (LIFT-IF)
            (("" (ASSERT)
              (("" (GRIND) (("" (TYPEPRED "x1!1") (("" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |Program| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|Super| CONST-DECL "Name" |Program| NIL)
    (|rsIf| CONST-DECL "Name" |Program| NIL)
    (|rsThen| CONST-DECL "Name" |Program| NIL)
    (|rsElse| CONST-DECL "Name" |Program| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL))
   130 130 NIL NIL)
  (|reserved_words_TCC1-1| NIL 3394869664 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL NIL NIL NIL NIL)))
(|ProgramFunctions|
 (|var_names_TCC1| 0
  (|var_names_TCC1-1| NIL 3390821142 3401690212 ("" (GRIND) NIL NIL) PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   135 133 T NIL))
 (|var_names_TCC2| 0
  (|var_names_TCC2-1| NIL 3390821142 3401690213 ("" (GRIND) NIL NIL) PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   112 111 T NIL))
 (|var_names_TCC3| 0
  (|var_names_TCC3-1| NIL 3397378010 3401690215 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   129 128 NIL NIL))
 (|var_names_TCC4| 0
  (|var_names_TCC4-1| NIL 3397378010 3401690216 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   112 112 T NIL))
 (|var_names_TCC5| 0
  (|var_names_TCC5-1| NIL 3397378010 3401690217 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   92 93 NIL NIL))
 (|var_names_TCC6| 0
  (|var_names_TCC6-1| NIL 3397378010 3401690218 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   131 131 NIL NIL))
 (|var_names_TCC7| 0
  (|var_names_TCC7-1| NIL 3397378010 3401690219 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   111 111 NIL NIL))
 (|var_names_TCC8| 0
  (|var_names_TCC8-1| NIL 3397378010 3401690220 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   126 127 NIL NIL))
 (|var_names_TCC9| 0
  (|var_names_TCC9-1| NIL 3397378010 3401690221 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   107 108 NIL NIL))
 (|var_names_TCC10| 0
  (|var_names_TCC10-1| NIL 3397378010 3401690223 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   136 136 NIL NIL))
 (|var_names_TCC11| 0
  (|var_names_TCC11-1| NIL 3397378010 3401690224 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   158 158 NIL NIL))
 (|var_names_TCC12| 0
  (|var_names_TCC12-1| NIL 3397378010 3401690226 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   136 135 NIL NIL))
 (|var_names_TCC13| 0
  (|var_names_TCC13-1| NIL 3397378010 3401690227 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   132 133 NIL NIL))
 (|var_names_TCC14| 0
  (|var_names_TCC14-1| NIL 3397378010 3401690228 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   113 112 NIL NIL))
 (|var_names_TCC15| 0
  (|var_names_TCC15-1| NIL 3397378010 3401690229 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   108 108 NIL NIL))
 (|var_names_TCC16| 0
  (|var_names_TCC16-1| NIL 3397378010 3401690230 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|RefExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RefVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Null?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   108 108 NIL NIL))
 (|var_names_TCC17| 0
  (|var_names_TCC17-2| "" 3397383573 3401690231
   ("" (SKOSIMP*)
    (("" (EXPAND "size")
      (("" (EXPAND "reduce_nat" 1 2)
        (("" (ASSERT)
          ((""
            (NAME-REPLACE "s" "reduce_nat(LAMBDA (i: int): 1,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1, 1,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1,
                                      LAMBDA (n: Name): 1,
                                      LAMBDA (nm: Name, n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1: nat, nm: Name, n2: nat):
                                        1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (l: list[[nat, nat]]):
                                        1 +
                                         sum(map[[nat, nat], nat]
                                                 (LAMBDA (n1, n2: nat):
                                                    1 + n1 + n2)
                                                 (l)),
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (nm: Name, n: nat): 1 + n, 1,
                                      LAMBDA (n: nat): 1 + n, 1,
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n)")
            ((""
              (USE "sum_geq_than_elements"
                   ("x" "s(proj_1(x!1)) + s(proj_2(x!1)) + 1"))
              (("" (SPLIT -1)
                (("1" (ASSERT) NIL NIL)
                 ("2" (REWRITE "map_list_composition")
                  (("2" (EXPAND "o")
                    (("2" (REPLACE -1)
                      (("2" (ASSERT)
                        (("2" (USE "list_map_member[[BoolExpr, Stmt], nat]")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED NIL 29 28 T SHOSTAK)
  (|var_names_TCC17-1| NIL 3397378010 3397383381 ("" (TERMINATION-TCC) NIL NIL)
   UNFINISHED NIL 79 79 T NIL))
 (|var_names_TCC18| 0
  (|var_names_TCC18-1| NIL 3397378010 3401690236
   ("" (SKOSIMP*)
    (("" (EXPAND "size")
      (("" (REPLACE -1)
        (("" (EXPAND "reduce_nat" 2 2)
          ((""
            (NAME-REPLACE "s" "reduce_nat(LAMBDA (i: int): 1,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n: Name): 1, 1, 1,
                                    LAMBDA (n: nat): 1 + n,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n: Name): 1, 1,
                                    LAMBDA (n: Name): 1,
                                    LAMBDA (nm: Name, n: nat): 1 + n,
                                    LAMBDA (n: nat): 1 + n,
                                    LAMBDA (n1, n2, n3: nat):
                                      1 + n1 + n2 + n3,
                                    LAMBDA (n1: nat, nm: Name, n2: nat):
                                      1 + n1 + n2,
                                    LAMBDA (n: nat): 1 + n,
                                    LAMBDA (n: nat): 1 + n,
                                    LAMBDA (l: list[[nat, nat]]):
                                      1 +
                                       sum(map[[nat, nat], nat]
                                               (LAMBDA (n1, n2: nat):
                                                  1 + n1 + n2)
                                               (l)),
                                    LAMBDA (n1, n2, n3: nat):
                                      1 + n1 + n2 + n3,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (nm: Name, n: nat): 1 + n, 1,
                                    LAMBDA (n: nat): 1 + n, 1,
                                    LAMBDA (n1, n2, n3: nat):
                                      1 + n1 + n2 + n3,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n: nat): 1 + n)")
            (("" (LEMMA "sum_geq_than_elements")
              ((""
                (INST -1 _
                 "1 + s(PROJ_1(car[[BoolExpr[Name], Stmt[Name]]](branches!1))) + s(PROJ_2(car[[BoolExpr[Name], Stmt[Name]]](branches!1)))")
                (("" (INST?)
                  (("" (ASSERT)
                    (("" (SPLIT -1)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (USE "list_map_member[[nat, nat], nat]")
                        (("2"
                          (INST -1
                           "(s(PROJ_1(car[[BoolExpr[Name], Stmt[Name]]](branches!1))), s(PROJ_2(car[[BoolExpr[Name], Stmt[Name]]](branches!1))))")
                          (("2" (ASSERT)
                            (("2"
                              (USE
                               "list_map_member[[BoolExpr, Stmt], [nat, nat]]")
                              (("2" (ASSERT)
                                (("2" (EXPAND "member")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|sum_geq_than_elements| FORMULA-DECL NIL |listsum| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|list_map_member| FORMULA-DECL NIL |list_map_funcs| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (|sum| DEF-DECL "nat" |listsum| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL))
   491 490 T NIL))
 (|var_names_TCC19| 0
  (|var_names_TCC19-1| NIL 3397378010 3401690240 ("" (TCC) NIL NIL) PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|sum| DEF-DECL "nat" |listsum| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   426 423 T NIL))
 (|var_names_TCC20| 0
  (|var_names_TCC20-1| NIL 3397378010 3401690244 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|sum| DEF-DECL "nat" |listsum| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL))
   389 386 NIL NIL))
 (|var_names_TCC21| 0
  (|var_names_TCC21-1| NIL 3397378010 3401690245 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   158 157 NIL NIL))
 (|var_names_TCC22| 0
  (|var_names_TCC22-1| NIL 3397378010 3401690247 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   139 138 NIL NIL))
 (|var_names_TCC23| 0
  (|var_names_TCC23-1| NIL 3397378010 3401690248 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   118 118 NIL NIL))
 (|var_names_TCC24| 0
  (|var_names_TCC24-1| NIL 3397378010 3401690249 ("" (GRIND) NIL NIL) PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   132 132 T NIL))
 (|var_names_TCC25| 0
  (|var_names_TCC25-1| NIL 3397378010 3401690250 ("" (GRIND) NIL NIL) PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   113 113 T NIL))
 (|var_names_TCC26| 0
  (|var_names_TCC26-1| NIL 3397380658 3401690252 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   128 129 NIL NIL))
 (|var_names_TCC27| 0
  (|var_names_TCC27-1| NIL 3397380658 3401690253 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   113 113 NIL NIL))
 (|var_names_TCC28| 0
  (|var_names_TCC28-1| NIL 3397380658 3401690254 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   161 160 NIL NIL))
 (|var_names_TCC29| 0
  (|var_names_TCC29-1| NIL 3397380658 3401690256 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   118 119 NIL NIL))
 (|var_names_TCC30| 0
  (|var_names_TCC30-1| NIL 3397380658 3401690257 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   140 138 NIL NIL))
 (|var_names_TCC31| 0
  (|var_names_TCC31-1| NIL 3397380658 3401690258 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   113 113 NIL NIL))
 (|var_names_TCC32| 0
  (|var_names_TCC32-1| NIL 3397380658 3401690260
   ("" (SKOSIMP*)
    (("" (EXPAND "size")
      (("" (EXPAND "reduce_nat" 1 2)
        (("" (ASSERT) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   PROVED
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL))
   200 200 T NIL))
 (|var_names_TCC33| 0
  (|var_names_TCC33-2| NIL 3397556068 3401690261
   ("" (SKOSIMP*)
    (("" (EXPAND "size")
      (("" (EXPAND "reduce_nat" 1 2) (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   PROVED
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|size| CONST-DECL "nat" |ProgramFunctions| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reduce_nat| ADT-DEF-DECL "[Body -> nat]" |Body_adt| NIL))
   94 94 T NIL)
  (|var_names_TCC33-1| NIL 3397380658 3397555915
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        ((""
          (INST 1 "N!1"
           "LAMBDA (n : ({n: Name | EXISTS (l : LocalVarDecl): ls!1(l) AND name(l) = n})) :
                      f!1(choose({l : LocalVarDecl | ls!1(l) AND name(l) = n}))")
          (("1" (EXPAND "injective?")
            (("1" (SKOSIMP)
              (("1" (INST?)
                (("1" (ASSERT) NIL NIL)
                 ("2" (TYPEPRED "x2!1")
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (TYPEPRED "x1!1")
                  (("3" (REWRITE "nonempty_exists")
                    (("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOLEM!)
            (("2" (TYPEPRED "n!1")
              (("2" (REWRITE "nonempty_exists")
                (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   169 170 T NIL))
 (|var_names_TCC34| 0
  (|var_names_TCC34-2| NIL 3398059737 3401690263
   (";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
    (SKOSIMP*)
    ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
      (TYPEPRED "fs!1")
      ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
        (EXPAND "is_finite")
        ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
          (SKOSIMP*)
          ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
            (INST 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (f: FieldDecl): fs!1(f) AND name(f) = n})) :
                            f!1(choose({f : FieldDecl | fs!1(f) AND name(f) = n}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT) NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (REWRITE "nonempty_exists")
                      (("2" (SKOLEM!) (("2" (INST?) NIL)))))))
                   ("3" (TYPEPRED "x1!1")
                    (("3" (REWRITE "nonempty_exists")
                      (("3" (SKOLEM!) (("3" (INST?) NIL)))))))))))))
             ("2" (SKOLEM!)
              (("2" (TYPEPRED "n!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOLEM!) (("2" (INST?) NIL))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|f!2| SKOLEM-CONST-DECL "FieldDecl[Name]" |ProgramFunctions| NIL)
    (|n!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     |ProgramFunctions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     |ProgramFunctions| NIL)
    (|x1!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     |ProgramFunctions| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|f!2| SKOLEM-CONST-DECL "FieldDecl[Name]" |ProgramFunctions| NIL)
    (|f!2| SKOLEM-CONST-DECL "FieldDecl[Name]" |ProgramFunctions| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fs!1| SKOLEM-CONST-DECL "finite_set[FieldDecl[Name]]" |ProgramFunctions|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   242 241 NIL NIL)
  (|var_names_TCC34-1| NIL 3398058896 3398058943 ("" (SUBTYPE-TCC) NIL NIL)
   UNFINISHED NIL 610 608 NIL NIL))
 (|var_names_TCC35| 0
  (|var_names_TCC35-2| NIL 3398059757 3401690266
   (";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
    (SKOSIMP*)
    ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
      (TYPEPRED "ls!1")
      ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
        (EXPAND "is_finite")
        ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
          (SKOSIMP*)
          ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
            (INST 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (l: LocalVarDecl): ls!1(l) AND name(l) = n})) :
                            f!1(choose({l : LocalVarDecl | ls!1(l) AND name(l) = n}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT) NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (REWRITE "nonempty_exists")
                      (("2" (SKOLEM!) (("2" (INST?) NIL)))))))
                   ("3" (TYPEPRED "x1!1")
                    (("3" (REWRITE "nonempty_exists")
                      (("3" (SKOLEM!) (("3" (INST?) NIL)))))))))))))
             ("2" (SKOLEM!)
              (("2" (TYPEPRED "n!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOLEM!) (("2" (INST?) NIL))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|l!1| SKOLEM-CONST-DECL "LocalVarDecl[Name]" |ProgramFunctions| NIL)
    (|n!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     |ProgramFunctions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     |ProgramFunctions| NIL)
    (|x1!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     |ProgramFunctions| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|l!1| SKOLEM-CONST-DECL "LocalVarDecl[Name]" |ProgramFunctions| NIL)
    (|l!1| SKOLEM-CONST-DECL "LocalVarDecl[Name]" |ProgramFunctions| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ls!1| SKOLEM-CONST-DECL "finite_set[LocalVarDecl[Name]]"
     |ProgramFunctions| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   223 223 NIL NIL)
  (|var_names_TCC35-1| NIL 3398058896 3398058950 ("" (SUBTYPE-TCC) NIL NIL)
   UNFINISHED NIL 629 627 NIL NIL))
 (|var_names_union| 0
  (|var_names_union-1| NIL 3396846432 3401690269
   ("" (SKOSIMP*)
    (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL)
   PROVED
   ((|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   313 312 T SHOSTAK))
 (|var_names_CaseJML_set2list| 0
  (|var_names_CaseJML_set2list-1| NIL 3401699638 NIL
   (";;; Proof for formula AnnotateProgramProperties.var_names_CaseJML_set2list"
    (SKOLEM 1 (_ "n!1"))
    ((";;; Proof for formula AnnotateProgramProperties.var_names_CaseJML_set2list"
      (USE
       "wf_induction[finite_set[[BoolExpr, Stmt]], LAMBDA(x, y : finite_set[[BoolExpr, Stmt]]) : card(x) < card(y)]")
      (("1" (SPLIT -1)
        (("1" (PROPAX) NIL)
         ("2" (HIDE 2)
          (("2" (SKOSIMP*)
            (("2" (REWRITE "set2list" 1)
              (("2" (LIFT-IF)
                (("2" (SPLIT 1)
                  (("1" (SKOSIMP*)
                    (("1" (REWRITE "var_names" 1)
                      (("1" (IFF)
                        (("1" (PROP)
                          (("1" (GRIND) NIL)
                           ("2" (SKOSIMP*)
                            (("2" (AUTO-REWRITE "empty?" "member")
                              (("2" (ASSERT)
                                (("2" (INST? -3) NIL)))))))))))))))
                   ("2" (SKOSIMP*)
                    (("2" (REWRITE "var_names" 2)
                      (("2" (AUTO-REWRITE "union" "member")
                        (("2" (ASSERT)
                          (("2" (INST?)
                            (("2" (ASSERT)
                              (("2" (REWRITE "card_remove")
                                (("2" (ASSERT)
                                  (("2" (REPLACE -1 :HIDE? T)
                                    (("2" (IFF)
                                      (("2" (SPLIT 2)
                                        (("1" (SKOSIMP*)
                                          (("1"
                                            (CASE
                                                "  var_names(PROJ_1(choose(x!1)))(n!1)")
                                            (("1" (INST?) (("1" (ASSERT) NIL)))
                                             ("2" (ASSERT)
                                              (("2"
                                                (CASE
                                                    "var_names(PROJ_2(choose(x!1)))(n!1)")
                                                (("1" (INST?)
                                                  (("1" (ASSERT) NIL)))
                                                 ("2" (ASSERT)
                                                  (("2" (SKOSIMP*)
                                                    (("2" (INST 3 "x!2")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (REWRITE "remove")
                                                          (("2" (FLATTEN)
                                                            (("2" (ASSERT)
                                                              NIL)))))))))))))))))
                                             ("3" (EXPAND "nonempty?")
                                              (("3" (PROPAX) NIL)))))))
                                         ("2" (SKOSIMP*)
                                          (("2" (INST 3 "x!2")
                                            (("2" (REWRITE "remove")
                                              (("2" (ASSERT)
                                                (("2" (SPLIT 3)
                                                  (("1" (ASSERT) NIL)
                                                   ("2" (PROPAX)
                                                    NIL)))))))))))))))))))))))))))))))))))))))))))))
       ("2" (USE "wf_card[[BoolExpr, Stmt]]") NIL))))
    "")
   UNCHECKED NIL NIL NIL NIL NIL))
 (|getFieldDecls_TCC1| 0
  (|getFieldDecls_TCC1-3| NIL 3391148557 3401690271
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                  EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "fields(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "fields(t!1) = {f : FieldDecl | fields(t!1)(f)}")
                          (("1" (ASSERT)
                            (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND "union")
                      (("2" (EXPAND "add")
                        (("2" (EXPAND "member")
                          (("2" (IFF)
                            (("2" (PROP)
                              (("1" (SKOSIMP*)
                                (("1" (SPLIT -1)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (INST?) NIL NIL)
                               ("3" (SKOSIMP*)
                                (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "finite_set[Class]" |ProgramFunctions| NIL)
    (|t!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   210 209 T NIL)
  (|getFieldDecls_TCC1-2| NIL 3390902649 3391148163
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "fields(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "fields(t!1) = {f : FieldDecl[Name] | fields(t!1)(f)}")
                          (("1" (APPLY-EXTENSIONALITY 1) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND* "union" "add" "member")
                      (("2" (IFF)
                        (("2" (PROP)
                          (("1" (SKOSIMP*)
                            (("1" (SPLIT -1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (INST?) NIL NIL)
                           ("3" (SKOSIMP*)
                            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) NIL
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    NIL (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   412 330 T NIL)
  (|getFieldDecls_TCC1-1| NIL 3390821142 3390894974
   ("" (SKOLEM!)
    (("" (TYPEPRED "classes(p!1)")
      (("" (EXPAND "is_finite") (("" (SKOLEM!) (("" (POSTPONE) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED NIL 5557840 390 T NIL))
 (|getLocalDecls_TCC1| 0
  (|getLocalDecls_TCC1-2| NIL 3390903916 3401690273
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Method]")
      ((""
        (INST -1
         "LAMBDA(M : finite_set[Method]) : is_finite[LocalVarDecl]({l: LocalVarDecl |EXISTS(m : Method) : M(m) AND (lvars(m)(l) OR l = arg(m))})")
        (("" (SPLIT -1)
          (("1" (INST?) NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE "{l: LocalVarDecl |
                                  EXISTS (m: Method):
                                    add(t!1, x!1)(m) AND (lvars(m)(l) OR l = arg(m))} = union(lvars(t!1), union(singleton(arg(t!1)), {l : LocalVarDecl | EXISTS (m: Method): x!1(m) AND (lvars(m)(l) OR l = arg(m))}))"
                 :HIDE? T)
                (("1" (USE "finite_union[LocalVarDecl]")
                  (("1" (USE "finite_union[LocalVarDecl]") NIL NIL)) NIL)
                 ("2" (HIDE -1 2)
                  (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                    (("2" (EXPAND "union")
                      (("2" (EXPAND "add")
                        (("2" (EXPAND "singleton")
                          (("2" (EXPAND "member")
                            (("2" (IFF)
                              (("2" (PROP)
                                (("1" (SKOSIMP*)
                                  (("1" (INST?)
                                    (("1" (SPLIT -1)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)
                                 ("4" (SKOSIMP*)
                                  (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE
                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                (("1" (USE "finite_emptyset[LocalVarDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "finite_set[Method]" |ProgramFunctions| NIL)
    (|t!1| SKOLEM-CONST-DECL "Method[Name]" |ProgramFunctions| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   253 251 T NIL)
  (|getLocalDecls_TCC1-1| NIL 3390821142 3390821234 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED NIL 605 450 NIL NIL))
 (|getLocalDecls_TCC2| 0
  (|getLocalDecls_TCC2-2| NIL 3401620970 3401690276
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[LocalVarDecl]({l : LocalVarDecl | EXISTS (c : Class) : C(c) AND getLocalDecls(c)(l)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " {l: LocalVarDecl |
              EXISTS (c: Class): add(t!1, x!1)(c) AND getLocalDecls(c)(l)}                    = union({l : LocalVarDecl | getLocalDecls(t!1)(l)},{l : LocalVarDecl | EXISTS(c : Class) : x!1(c) AND getLocalDecls(c)(l)})"
                 :HIDE? T)
                (("1" (USE "finite_union[LocalVarDecl]")
                  (("1" (TYPEPRED "getLocalDecls(t!1)")
                    (("1" (ASSERT)
                      (("1" (HIDE -2 2)
                        (("1"
                          (CASE-REPLACE
                           "{l: LocalVarDecl[Name] | getLocalDecls(t!1)(l)} = getLocalDecls(t!1)"
                           :HIDE? T)
                          (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -1 2)
                  (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                    (("2" (AUTO-REWRITE "union" "member" "add" "singleton")
                      (("2" (ASSERT)
                        (("2" (IFF)
                          (("2" (PROP)
                            (("1" (SKOSIMP*)
                              (("1" (SPLIT -1)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (INST?) NIL NIL)
                             ("3" (SKOSIMP*)
                              (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE
                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                (("1" (USE "finite_emptyset[LocalVarDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|t!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (|x!1| SKOLEM-CONST-DECL "finite_set[Class]" |ProgramFunctions| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   233 231 T NIL)
  (|getLocalDecls_TCC2-1| NIL 3401620807 3401620866 ("" (SUBTYPE-TCC) NIL NIL)
   UNFINISHED NIL 249 249 NIL NIL))
 (|arg_in_getLocalDecls| 0
  (|arg_in_getLocalDecls-1| NIL 3398660837 3401690276
   ("" (SKOSIMP*)
    (("" (EXPAND "getLocalDecls")
      (("" (EXPAND "getLocalDecls")
        (("" (APPLY (REPEAT (INST?)))
          (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL))
   5 5 T SHOSTAK))
 (|getGhostDecls_TCC1| 0
  (|getGhostDecls_TCC1-3| NIL 3391148598 3401690278
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                          EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "ghost_vars(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (ASSERT)
                            (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND* "union" "add" "member")
                      (("2" (IFF)
                        (("2" (PROP)
                          (("1" (SKOSIMP*)
                            (("1" (GROUND)
                              (("1" (INST?)
                                (("1" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST?) NIL NIL)
                           ("3" (SKOSIMP*)
                            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "finite_set[Class]" |ProgramFunctions| NIL)
    (|t!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   210 208 T NIL)
  (|getGhostDecls_TCC1-2| NIL 3390903999 3391148164
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "ghost_vars(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (APPLY-EXTENSIONALITY) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND "union")
                      (("2" (EXPAND "add")
                        (("2" (EXPAND "member")
                          (("2" (IFF)
                            (("2" (PROP)
                              (("1" (SKOSIMP*)
                                (("1" (SPLIT -1)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (INST?) NIL NIL)
                               ("3" (SKOSIMP*)
                                (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL))
   436 310 T NIL)
  (|getGhostDecls_TCC1-1| NIL 3390821142 3390821234 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED NIL 474 450 NIL NIL))
 (|declared_var_names_TCC1| 0
  (|declared_var_names_TCC1-1| NIL 3394869665 3401690278
   ("" (SKOSIMP)
    ((""
      (CASE-REPLACE "{n: Name |
              var_names(getFieldDecls(p!1))(n) OR
              var_names(getLocalDecls(p!1))(n) OR
              var_names(getGhostDecls(p!1))(n)} =
              union(union(var_names(getFieldDecls(p!1)), var_names(getLocalDecls(p!1))), var_names(getGhostDecls(p!1)))")
      (("1" (HIDE -1) (("1" (USE "finite_union[Name]") NIL NIL)) NIL)
       ("2" (HIDE 2) (("2" (EXPAND* "union" "member") NIL NIL)) NIL))
      NIL))
    NIL)
   PROVED
   ((|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   31 32 T NIL))
 (|ext_declared_var_names_TCC1| 0
  (|ext_declared_var_names_TCC1-1| NIL 3397554464 3401690279
   ("" (SKOSIMP*)
    (("" (REWRITE "finite_union")
      (("1" (EXPAND "is_finite")
        (("1" (INST 1 "1" "LAMBDA(n : ({n: Name | n = This[Name]})) : 0")
          (("1" (EXPAND "injective?") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (USE "declared_var_names_TCC1") NIL NIL))
      NIL))
    NIL)
   PROVED
   ((|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|declared_var_names_TCC1| SUBTYPE-TCC NIL |ProgramFunctions| NIL))
   84 84 T NIL))
 (|class_names_TCC1| 0
  (|class_names_TCC1-1| NIL 3390821142 3401690282
   ("" (SKOLEM!)
    (("" (TYPEPRED "classes(p!1)")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          ((""
            (INST 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (c : Class): classes(p!1)(c) AND name(c) = n})) :
                      f!1(choose({c : Class | classes(p!1)(c) AND name(c) = n}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (REWRITE "nonempty_exists")
                      (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (REWRITE "nonempty_exists")
                      (("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOLEM!)
              (("2" (TYPEPRED "n!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|c!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (|n!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     |ProgramFunctions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     |ProgramFunctions| NIL)
    (|x1!1| SKOLEM-CONST-DECL
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     |ProgramFunctions| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|c!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (|c!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|p!1| SKOLEM-CONST-DECL "PreProgram[Name]" |ProgramFunctions| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   253 253 T NIL))
 (|method_names_TCC1| 0
  (|method_names_TCC1-1| NIL 3390821142 3401690284
   ("" (SKOSIMP*)
    (("" (TYPEPRED "methods(c!1)")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          ((""
            (INST 1 "N!1"
             "LAMBDA (n: {n: Name | EXISTS (m: Method): classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}):
                     f!1(choose({m : Method | methods(c!1)(m) AND name(m) = n}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (REWRITE "nonempty_exists")
                      (("2" (SKOLEM!)
                        (("2" (INST?) (("2" (PROP) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (REWRITE "nonempty_exists")
                      (("3" (SKOLEM!)
                        (("3" (INST?) (("3" (PROP) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOLEM!)
              (("2" (TYPEPRED "n!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOLEM!) (("2" (INST?) (("2" (PROP) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|n!1| SKOLEM-CONST-DECL "{n: Name |
         EXISTS (m: Method):
           classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}"
     |ProgramFunctions| NIL)
    (|m!1| SKOLEM-CONST-DECL "Method[Name]" |ProgramFunctions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({n: Name |
    EXISTS (m: Method[Name]):
      classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n})"
     |ProgramFunctions| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({n: Name |
    EXISTS (m: Method[Name]):
      classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n})"
     |ProgramFunctions| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|m!1| SKOLEM-CONST-DECL "Method[Name]" |ProgramFunctions| NIL)
    (|m!1| SKOLEM-CONST-DECL "Method[Name]" |ProgramFunctions| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|p!1| SKOLEM-CONST-DECL "PreProgram[Name]" |ProgramFunctions| NIL)
    (|c!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   270 270 T NIL))
 (|methods_TCC1| 0
  (|methods_TCC1-1| NIL 3392356310 3401690291
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1 "LAMBDA(C : finite_set[Class]) : is_finite[Method[Name]]
            ({m: Method[Name] |
                EXISTS (c: Class[Name]): C(c) AND methods(c)(m)})")
        (("" (ASSERT)
          (("" (SPLIT -1)
            (("1" (INST -1 "classes(p!1)") NIL NIL)
             ("2" (HIDE 2)
              (("2" (SKOSIMP*)
                (("2"
                  (CASE-REPLACE "({m: Method[Name] |
                   EXISTS (c: Class[Name]): add(t!1, x!1)(c) AND methods(c)(m)})
     = union({m : Method[Name] | methods(t!1)(m)}, {m : Method[Name] | EXISTS (c : Class[Name]) : x!1(c) AND methods(c)(m)})"
                   :HIDE? T)
                  (("1" (USE "finite_union[Method[Name]]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "methods(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "methods(t!1) = {m : Method[Name] | methods(t!1)(m)}"
                           :HIDE? T)
                          (("1" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -1 2)
                    (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                      (("2" (EXPAND* "union" "add" "member")
                        (("2" (IFF)
                          (("2" (PROP)
                            (("1" (SKOSIMP*)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                             ("2" (INST?) NIL NIL)
                             ("3" (SKOSIMP*)
                              (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (HIDE 2)
              (("3" (EXPAND "emptyset")
                (("3"
                  (CASE-REPLACE
                   "{m: Method[Name] | FALSE} = emptyset[Method[Name]]")
                  (("1" (USE "finite_emptyset[Method[Name]]") NIL NIL)
                   ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "finite_set[Class]" |ProgramFunctions| NIL)
    (|t!1| SKOLEM-CONST-DECL "Class[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   675 674 T NIL))
 (|get_class_TCC1| 0
  (|get_class_TCC1-1| NIL 3390821142 3401690291 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL))
   30 30 NIL NIL))
 (|get_class_in_classes| 0
  (|get_class_in_classes-1| NIL 3400562445 3401690291
   ("" (SKOSIMP*)
    (("" (EXPAND "get_class")
      (("" (LIFT-IF)
        (("" (ASSERT)
          (("" (SPLIT -1)
            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED ((|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)) 7 7 T
   SHOSTAK))
 (|lookup_mthd_TCC1| 0
  (|lookup_mthd_TCC1-1| NIL 3396591590 3401690292 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|method_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL))
   33 32 NIL NIL))
 (|lookup_mthd_TCC2| 0
  (|lookup_mthd_TCC2-1| NIL 3396591590 3401690293
   ("" (SKOSIMP*)
    (("" (EXPAND "every")
      (("" (EXPAND "methods")
        (("" (INST 1 "down[Class[Name]](get_class(p!1)(tgt!1))")
          (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|every| ADT-DEF-DECL "boolean" |lift_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|method_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|methods| CONST-DECL "finite_set[Method]" |ProgramFunctions| NIL))
   113 112 T NIL))
 (|lookup_mthd_in_methods_class| 0
  (|lookup_mthd_in_methods_class-1| NIL 3400562626 3401690293
   ("" (SKOSIMP*)
    (("" (EXPAND "lookup_mthd")
      (("" (LIFT-IF)
        (("" (ASSERT)
          (("" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|lookup_mthd| CONST-DECL "lift[(methods(p))]" |ProgramFunctions| NIL)) 7 6
   T SHOSTAK))
 (|proper_subterm_sequence| 0
  (|proper_subterm_sequence-2| NIL 3397378089 3401690311
   ("" (INDUCT "c3")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "<<" -3)
        (("2" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST?)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKOSIMP*) (("3" (EXPAND "<<") (("3" (PROPAX) NIL NIL)) NIL)) NIL)
     ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
     ("6" (SKOSIMP*)
      (("6" (EXPAND "<<" -2)
        (("6" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKOSIMP*)
      (("7" (EXPAND "<<" -3)
        (("7" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("8" (SKOSIMP*)
      (("8" (EXPAND "<<" -3)
        (("8" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL) ("11" (GRIND) NIL NIL)
     ("12" (SKOSIMP*)
      (("12" (EXPAND "<<" -2)
        (("12" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("13" (SKOSIMP*)
      (("13" (EXPAND "<<" -2)
        (("13" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("14" (SKOSIMP*)
      (("14" (EXPAND "<<" -4)
        (("14" (SPLIT -4)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("15" (SKOSIMP*)
      (("15" (EXPAND "<<" -3)
        (("15" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("16" (SKOSIMP*)
      (("16" (EXPAND "<<" -2)
        (("16" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("17" (SKOSIMP*)
      (("17" (EXPAND "<<" -2)
        (("17" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("18" (SKOSIMP*)
      (("18" (REWRITE "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (EXPAND "<<" -2)
          (("18" (EXPAND "<<" 1)
            (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
                (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
                  (("18" (SKOSIMP*)
                    (("18" (INST?)
                      (("18" (ASSERT)
                        (("18" (FLATTEN)
                          (("18" (SPLIT 1)
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (SPLIT -4)
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (EXPAND "<<" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (INST? -2)
                                    (("2" (ASSERT) (("2" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REPLACE -1 :DIR RL)
                                    (("3" (EXPAND "<<" 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("4" (INST? -3)
                                    (("4" (ASSERT) (("4" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (SPLIT -4)
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (EXPAND "<<" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (INST? -2)
                                    (("2" (ASSERT) (("2" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REPLACE -1 :DIR RL)
                                    (("3" (EXPAND "<<" 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("4" (INST? -3)
                                    (("4" (ASSERT) (("4" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("19" (SKOSIMP*)
      (("19" (EXPAND "<<" -4)
        (("19" (SPLIT -4)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOSIMP*)
      (("20" (EXPAND "<<" -3)
        (("20" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (SKOSIMP*)
      (("21" (EXPAND "<<" -2)
        (("21" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("22" (GRIND) NIL NIL)
     ("23" (SKOSIMP*)
      (("23" (EXPAND "<<" -2)
        (("23" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("24" (GRIND) NIL NIL)
     ("25" (SKOSIMP*)
      (("25" (EXPAND "<<" -4)
        (("25" (SPLIT -4)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("26" (SKOSIMP*)
      (("26" (EXPAND "<<" -3)
        (("26" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("27" (SKOSIMP*)
      (("27" (EXPAND "<<" -2)
        (("27" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|some_is_exists| FORMULA-DECL NIL |listfuncs| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every_is_forall| FORMULA-DECL NIL |listfuncs| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body_induction| FORMULA-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (<< ADT-DEF-DECL "(well_founded?[Body])" |Body_adt| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL))
   1802 1720 T NIL)
  (|proper_subterm_sequence-1| NIL 3396269350 3396593333
   ("" (INDUCT "c3")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "<<" -3)
        (("2" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST?)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKOSIMP*) (("3" (EXPAND "<<") (("3" (PROPAX) NIL NIL)) NIL)) NIL)
     ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
     ("6" (SKOSIMP*)
      (("6" (EXPAND "<<" -2)
        (("6" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKOSIMP*)
      (("7" (EXPAND "<<" -3)
        (("7" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("8" (SKOSIMP*)
      (("8" (EXPAND "<<" -3)
        (("8" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL) ("11" (GRIND) NIL NIL)
     ("12" (SKOSIMP*)
      (("12" (EXPAND "<<" -2)
        (("12" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("13" (SKOSIMP*)
      (("13" (EXPAND "<<" -2)
        (("13" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("14" (SKOSIMP*)
      (("14" (EXPAND "<<" -4)
        (("14" (SPLIT -4)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("15" (SKOSIMP*)
      (("15" (EXPAND "<<" -3)
        (("15" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("16" (SKOSIMP*)
      (("16" (EXPAND "<<" -2)
        (("16" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("17" (SKOSIMP*)
      (("17" (EXPAND "<<" -2)
        (("17" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("18" (SKOSIMP*)
      (("18" (REWRITE "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (EXPAND "<<" -2)
          (("18" (EXPAND "<<" 1)
            (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
                (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
                  (("18" (SKOSIMP*)
                    (("18" (INST?)
                      (("18" (ASSERT)
                        (("18" (FLATTEN)
                          (("18" (SPLIT 1)
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (SPLIT -4)
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (EXPAND "<<" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (INST? -2)
                                    (("2" (ASSERT) (("2" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REPLACE -1 :DIR RL)
                                    (("3" (EXPAND "<<" 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("4" (INST? -3)
                                    (("4" (ASSERT) (("4" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (SPLIT -4)
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (EXPAND "<<" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (INST? -2)
                                    (("2" (ASSERT) (("2" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REPLACE -1 :DIR RL)
                                    (("3" (EXPAND "<<" 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("4" (INST? -3)
                                    (("4" (ASSERT) (("4" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("19" (SKOSIMP*)
      (("19" (EXPAND "<<" -4)
        (("19" (SPLIT -4)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOSIMP*)
      (("20" (EXPAND "<<" -3)
        (("20" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (SKOSIMP*)
      (("21" (EXPAND "<<" -2)
        (("21" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("22" (GRIND) NIL NIL)
     ("23" (SKOSIMP*)
      (("23" (EXPAND "<<" -2)
        (("23" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("24" (GRIND) NIL NIL)
     ("25" (SKOSIMP*)
      (("25" (EXPAND "<<" -4)
        (("25" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("26" (SKOSIMP*)
      (("26" (EXPAND "<<" -3)
        (("26" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNTRIED
   ((|some_is_exists| FORMULA-DECL NIL |listfuncs| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every_is_forall| FORMULA-DECL NIL |listfuncs| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body_induction| FORMULA-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (<< ADT-DEF-DECL "(well_founded?[Body])" |Body_adt| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL))
   1422 1422 T NIL))
 (|proper_subterm_set_clause_sequence| 0
  (|proper_subterm_set_clause_sequence-1| NIL 3396269362 3401690311
   ("" (SKOSIMP*)
    (("" (EXPAND "proper_subterm_set_clause")
      (("" (LEMMA "proper_subterm_sequence")
        (("" (INST-CP - "c1!1" "c2!1" "pre_set(m!1)")
          (("" (INST-CP - "c1!1" "c2!1" "post_set(m!1)")
            (("" (INST - "c1!1" "c2!1" "exc_set(m!1)") (("" (GROUND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|proper_subterm_set_clause| CONST-DECL "boolean" |ProgramFunctions| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|proper_subterm_sequence| FORMULA-DECL NIL |ProgramFunctions| NIL))
   14 14 T NIL))
 (|proper_subterm_is_transitive| 0
  (|proper_subterm_is_transitive-1| NIL 3396272071 3401690318
   ("" (INDUCT "c3")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "<<" 1)
        (("2" (EXPAND "<<" -4)
          (("2" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
     ("6" (GRIND) NIL NIL)
     ("7" (SKOSIMP*)
      (("7" (EXPAND "<<" 1)
        (("7" (EXPAND "<<" -4)
          (("7" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("8" (SKOSIMP*)
      (("8" (EXPAND "<<" 1)
        (("8" (EXPAND "<<" -4)
          (("8" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL) ("11" (GRIND) NIL NIL)
     ("12" (GRIND) NIL NIL) ("13" (GRIND) NIL NIL)
     ("14" (SKOSIMP*)
      (("14" (EXPAND "<<" 1)
        (("14" (EXPAND "<<" -5)
          (("14" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL)
             ("5" (INST -4 "c1!1" "c2!1") (("5" (ASSERT) NIL NIL)) NIL)
             ("6" (INST -4 "c1!1" "c2!1") (("6" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("15" (SKOSIMP*)
      (("15" (EXPAND "<<" 1)
        (("15" (EXPAND "<<" -4)
          (("15" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("16" (GRIND) NIL NIL) ("17" (GRIND) NIL NIL)
     ("18" (SKOSIMP*)
      (("18" (REWRITE "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (EXPAND "<<" (-3 1))
          (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
            (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (SKOSIMP*)
                (("18" (INST?)
                  (("18" (ASSERT)
                    (("18" (FLATTEN)
                      (("18" (INST 1 "x!1")
                        (("18" (ASSERT)
                          (("18" (SPLIT -5)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (INST -2 "c1!1" "c2!1")
                              (("2" (ASSERT) NIL NIL)) NIL)
                             ("3" (ASSERT) NIL NIL)
                             ("4" (INST -3 "c1!1" "c2!1")
                              (("4" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("19" (SKOSIMP*)
      (("19" (EXPAND "<<" 1)
        (("19" (EXPAND "<<" -5)
          (("19" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL)
             ("5" (ASSERT) NIL NIL)
             ("6" (INST -4 "c1!1" "c2!1") (("6" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOSIMP*)
      (("20" (EXPAND "<<" 1)
        (("20" (EXPAND "<<" -4)
          (("20" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (GRIND) NIL NIL) ("22" (GRIND) NIL NIL) ("23" (GRIND) NIL NIL)
     ("24" (GRIND) NIL NIL)
     ("25" (SKOSIMP*)
      (("25" (EXPAND "<<" 1)
        (("25" (EXPAND "<<" -5)
          (("25" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL)
             ("5" (ASSERT) NIL NIL)
             ("6" (INST -4 "c1!1" "c2!1") (("6" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("26" (SKOSIMP*)
      (("26" (EXPAND "<<" 1)
        (("26" (EXPAND "<<" -4)
          (("26" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("27" (SKOSIMP*)
      (("27" (EXPAND "<<" 1)
        (("27" (EXPAND "<<" -3)
          (("27" (SPLIT -3)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|some_is_exists| FORMULA-DECL NIL |listfuncs| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every_is_forall| FORMULA-DECL NIL |listfuncs| NIL)
    (|Null?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RefVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RefExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body_induction| FORMULA-DECL NIL |Body_adt| NIL)
    (<< ADT-DEF-DECL "(well_founded?[Body])" |Body_adt| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL))
   726 723 T SHOSTAK))
 (|subterm_subset_varnames| 0
  (|subterm_subset_varnames-1| NIL 3396779500 3401690335
   ("" (AUTO-REWRITE "union" "member" "subset?" "emptyset" "add")
    (("" (INDUCT "b2")
      (("1" (GRIND) NIL NIL)
       ("2"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -3) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT)))
        NIL NIL)
       ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
       ("6" (GRIND) NIL NIL)
       ("7"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -3) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT)))
        NIL NIL)
       ("8"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -3) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT)))
        NIL NIL)
       ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL) ("11" (GRIND) NIL NIL)
       ("12"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -2) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT)))
        NIL NIL)
       ("13"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -2) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT)))
        NIL NIL)
       ("14"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -4) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT) (ASSERT) (INST? -4 :WHERE -1) (ASSERT) (INST? -4)))
        (("14" (ASSERT) NIL NIL)) NIL)
       ("15"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -3) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT) (ASSERT)))
        NIL NIL)
       ("16"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -2) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT)))
        NIL NIL)
       ("17"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -2) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT)))
        NIL NIL)
       ("18" (SKOSIMP*)
        (("18" (EXPAND "var_names" 1 2)
          (("18" (ASSERT)
            (("18" (SKOSIMP*)
              (("18" (SPLIT 1)
                (("1" (EXPAND "<<" -3)
                  (("1" (REWRITE "some_is_exists")
                    (("1" (SKOSIMP*)
                      (("1" (EXPAND "member")
                        (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (REWRITE "every_is_forall")
                    (("2" (EXPAND "<<" -2)
                      (("2" (REWRITE "some_is_exists")
                        (("2" (SKOSIMP*)
                          (("2" (INST -1 "x!2")
                            (("2" (SPLIT -1)
                              (("1"
                                (CASE
                                    "FORALL(l : list[[BoolExpr, Stmt]]) : member(x!2, l) IMPLIES var_names(CaseJML(l))(x!1)")
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1" (SPLIT -2)
                                      (("1" (REPLACE -1)
                                        (("1" (ASSERT)
                                          (("1" (FLATTEN)
                                            (("1" (SPLIT -4)
                                              (("1" (INST -3 "b1!1")
                                                (("1" (ASSERT)
                                                  (("1" (INST? -3)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (INST -4 "b1!1")
                                                (("2" (ASSERT)
                                                  (("2" (INST? -4)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INDUCT "l")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (SKOSIMP*)
                                    (("2" (EXPAND "member" -2)
                                      (("2" (EXPAND "var_names" 1)
                                        (("2" (SPLIT -2)
                                          (("1" (REPLACE -1)
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -6)
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (INST -4 "b1!1")
                                                  (("2" (ASSERT)
                                                    (("2" (INST? -4)
                                                      (("2" (ASSERT)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (ASSERT) NIL NIL)
                                                 ("4" (INST -5 "b1!1")
                                                  (("4" (ASSERT)
                                                    (("4" (INST? -5)
                                                      (("4" (ASSERT)
                                                        (("4" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("19"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -4) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT) (ASSERT) (ASSERT) (INST? -4 :WHERE -1) (ASSERT) (INST? -4)
          (ASSERT)))
        NIL NIL)
       ("20"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -3) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT)))
        NIL NIL)
       ("21"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -2) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT)))
        NIL NIL)
       ("22" (GRIND) NIL NIL)
       ("23"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -2) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT)))
        NIL NIL)
       ("24" (GRIND) NIL NIL)
       ("25"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -4) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT) (ASSERT) (ASSERT) (INST? -4 :WHERE -1) (ASSERT) (INST? -4)
          (ASSERT)))
        NIL NIL)
       ("26"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -3) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT) (ASSERT) (INST? -3 :WHERE -1) (ASSERT) (INST? -3)
          (ASSERT)))
        NIL NIL)
       ("27"
        (APPLY
         (THEN (SKOSIMP*) (EXPAND "var_names" 1 2) (ASSERT) (SKOSIMP*)
          (EXPAND "<<" -2) (SPLIT -) (ASSERT) (INST? -2 :WHERE -1) (ASSERT)
          (INST? -2) (ASSERT)))
        NIL NIL))
      NIL))
    NIL)
   PROVED
   ((|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (<< ADT-DEF-DECL "(well_founded?[Body])" |Body_adt| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|Body_induction| FORMULA-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|CaseJML| ADT-CONSTRUCTOR-DECL "[list[[BoolExpr, Stmt]] -> (CaseJML?)]"
     |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every_is_forall| FORMULA-DECL NIL |listfuncs| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|some_is_exists| FORMULA-DECL NIL |listfuncs| NIL))
   1616 1609 T SHOSTAK))
 (|subterm_subset_of_var| 0
  (|subterm_subset_of_var-1| NIL 3396779041 3401690336
   ("" (SKOSIMP*)
    (("" (USE "subterm_subset_varnames")
      (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   PROVED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|subterm_subset_varnames| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL))
   191 191 T SHOSTAK)))
(|WellFormedProgram|
 (|wf_Body_preserved_by_proper_subterm| 0
  (|wf_Body_preserved_by_proper_subterm-1| NIL 3401450425 3401620922
   ("" (SKOLEM 1 "p!1" _ _)
    (("" (SKOSIMP*)
      (("" (EXPAND "wf_Body")
        (("" (SKOSIMP*)
          (("" (INST?)
            (("" (ASSERT)
              (("" (USE "subterm_subset_varnames")
                (("" (ASSERT)
                  (("" (EXPAND "subset?")
                    (("" (EXPAND "member")
                      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subterm_subset_varnames| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL))
   6 6 T SHOSTAK))
 (|wf_Body_CaseJML| 0
  (|wf_Body_CaseJML-1| NIL 3401607410 3401620923
   ("" (INDUCT "l")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (INST?)
        (("2" (EXPAND "wf_Branches")
          (("2" (EXPAND "wf_Body")
            (("2" (EXPAND "var_names" 1 1)
              (("2" (EXPAND "every" 1)
                (("2" (AUTO-REWRITE "union" "member")
                  (("2" (ASSERT)
                    (("2" (IFF)
                      (("2" (SPLIT 1)
                        (("1" (SKOSIMP*)
                          (("1" (SPLIT -2)
                            (("1" (ASSERT)
                              (("1" (SPLIT 1)
                                (("1" (SKOSIMP*)
                                  (("1" (INST? -3) (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP*)
                                  (("2" (INST? -3) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP*)
                          (("2" (ASSERT)
                            (("2" (SPLIT -4)
                              (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (INST? -3) (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL NIL NIL NIL
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|ext_declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) NIL
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|wf_Branches| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|CaseJML| ADT-CONSTRUCTOR-DECL "[list[[BoolExpr, Stmt]] -> (CaseJML?)]"
     |Body_adt| NIL)
    (|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL))
   148 148 T SHOSTAK))
 (|wf_program_variables_disjoint| 0
  (|wf_program_variables_disjoint-1| NIL 3393587608 3401620923
   ("" (SKOSIMP)
    (("" (TYPEPRED "p!1")
      (("" (EXPAND* "wf_Program" "wf_program_variables_disjoint_def")
        (("" (GROUND) NIL NIL)) NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|wf_program_variables_disjoint_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL))
   2 2 T SHOSTAK))
 (|wf_program_variables_not_reserved_words| 0
  (|wf_program_variables_not_reserved_words-1| NIL 3394987767 3401620923
   ("" (SKOSIMP*)
    (("" (TYPEPRED "p!1")
      (("" (EXPAND "wf_Program")
        (("" (FLATTEN)
          (("" (EXPAND "wf_program_variables_not_reserved_words_def")
            (("" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|wf_program_variables_not_reserved_words_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL))
   2 1 T SHOSTAK))
 (|wf_program_has_unique_class_names| 0
  (|wf_program_has_unique_class_names-1| NIL 3390201065 3401620923
   ("" (SKOSIMP)
    (("" (TYPEPRED "p!1")
      (("" (EXPAND* "wf_Program" "wf_program_has_unique_class_names_def")
        (("" (FLATTEN) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL))
   22 22 T SHOSTAK))
 (|wf_program_has_wf_classes| 0
  (|wf_program_has_wf_classes-1| NIL 3393587755 3401620923
   ("" (SKOSIMP)
    (("" (TYPEPRED "p!1")
      (("" (EXPAND "wf_Program")
        (("" (FLATTEN)
          (("" (EXPAND "wf_Classes") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|wf_Classes| CONST-DECL "boolean" |WellFormedProgram| NIL))
   2 3 T SHOSTAK))
 (|wf_class_has_unique_method_names| 0
  (|wf_class_has_unique_method_names-1| NIL 3393587790 3401620923
   ("" (SKOSIMP*)
    (("" (EXPAND "wf_Class")
      (("" (FLATTEN) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   UNCHECKED
   ((|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL))
   3 3 T SHOSTAK))
 (|wf_program_methods_only_in_one_class| 0
  (|wf_program_methods_only_in_one_class-1| NIL 3401699461 3401699538
   ("" (SKOSIMP*)
    (("" (EXPAND "wf_program_methods_only_in_one_class")
      (("" (TYPEPRED "p!1")
        (("" (EXPAND "wf_Program")
          (("" (SKOSIMP*)
            (("" (EXPAND "wf_Classes")
              (("" (INST-CP -4 "c1!1")
                (("" (INST -4 "c2!1")
                  (("" (ASSERT)
                    (("" (EXPAND "wf_Class")
                      (("" (FLATTEN)
                        (("" (INST -6 "m!1")
                          (("" (INST -10 "m!1")
                            (("" (ASSERT)
                              ((""
                                (EXPAND
                                 "wf_program_has_unique_class_names_def")
                                (("" (INST -3 "c1!1" "c2!1")
                                  (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|wf_program_methods_only_in_one_class| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_Classes| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   7720 91 T SHOSTAK)))

