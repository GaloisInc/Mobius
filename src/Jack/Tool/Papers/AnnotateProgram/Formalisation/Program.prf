(JType)
(Excpt)
(Body)
(Program
 (reserved_words_TCC1 0
  (reserved_words_TCC1-2 nil 3394869706 3404451398
   ("" (expand "is_finite")
    ((""
      (inst 1 "6"
       "LAMBDA (n : {n: Name | n = This OR n = Super OR n = rsIf OR n = rsThen OR n = rsElse}) :
                         IF n = This THEN 1
                         ELSIF n = Super THEN 2
                         ELSIF n = rsIf THEN 3
                         ELSIF n = rsThen THEN 4
                         ELSIF n = rsElse THEN 5
                         ELSE 0 ENDIF")
      (("" (expand "injective?")
        (("" (skosimp)
          (("" (lift-if)
            (("" (assert)
              (("" (grind)
                (("" (typepred "x1!1") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Program nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (This const-decl "Name" Program nil)
    (Super const-decl "Name" Program nil)
    (rsIf const-decl "Name" Program nil)
    (rsThen const-decl "Name" Program nil)
    (rsElse const-decl "Name" Program nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   232 170 nil nil)
  (reserved_words_TCC1-1 nil 3394869664 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil)))
(ProgramFunctions
 (var_names_TCC1 0
  (var_names_TCC1-1 nil 3390821142 3404451398 ("" (grind) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   441 400 t nil))
 (var_names_TCC2 0
  (var_names_TCC2-1 nil 3390821142 3404451399 ("" (grind) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   459 360 t nil))
 (var_names_TCC3 0
  (var_names_TCC3-1 nil 3397378010 3404451399
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   387 340 nil nil))
 (var_names_TCC4 0
  (var_names_TCC4-1 nil 3397378010 3404451399
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   422 380 t nil))
 (var_names_TCC5 0
  (var_names_TCC5-1 nil 3397378010 3404451400
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   416 370 nil nil))
 (var_names_TCC6 0
  (var_names_TCC6-1 nil 3397378010 3404451400
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   430 390 nil nil))
 (var_names_TCC7 0
  (var_names_TCC7-1 nil 3397378010 3404451401
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   399 370 nil nil))
 (var_names_TCC8 0
  (var_names_TCC8-1 nil 3397378010 3404451401
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   361 340 nil nil))
 (var_names_TCC9 0
  (var_names_TCC9-1 nil 3397378010 3404451401
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   363 330 nil nil))
 (var_names_TCC10 0
  (var_names_TCC10-1 nil 3397378010 3404451402
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   452 410 nil nil))
 (var_names_TCC11 0
  (var_names_TCC11-1 nil 3397378010 3404451402
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   445 420 nil nil))
 (var_names_TCC12 0
  (var_names_TCC12-1 nil 3397378010 3404451403
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   446 420 nil nil))
 (var_names_TCC13 0
  (var_names_TCC13-1 nil 3397378010 3404451403
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   427 390 nil nil))
 (var_names_TCC14 0
  (var_names_TCC14-1 nil 3397378010 3404451403
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   405 380 nil nil))
 (var_names_TCC15 0
  (var_names_TCC15-1 nil 3397378010 3404451404
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   360 340 nil nil))
 (var_names_TCC16 0
  (var_names_TCC16-1 nil 3397378010 3404451404
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   359 350 nil nil))
 (var_names_TCC17 0
  (var_names_TCC17-2 "" 3397383573 3404451404
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "reduce_nat" 1 2)
        (("" (assert)
          ((""
            (name-replace "s" "reduce_nat(LAMBDA (i: int): 1,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1, 1,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1,
                                      LAMBDA (n: Name): 1,
                                      LAMBDA (nm: Name, n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1: nat, nm: Name, n2: nat):
                                        1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (l: list[[nat, nat]]):
                                        1 +
                                         sum(map[[nat, nat], nat]
                                                 (LAMBDA (n1, n2: nat):
                                                    1 + n1 + n2)
                                                 (l)),
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (nm: Name, n: nat): 1 + n, 1,
                                      LAMBDA (n: nat): 1 + n, 1,
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n)")
            ((""
              (use "sum_geq_than_elements"
                   ("x" "s(proj_1(x!1)) + s(proj_2(x!1)) + 1"))
              (("" (split -1)
                (("1" (assert) nil nil)
                 ("2" (rewrite "map_list_composition")
                  (("2" (expand "o")
                    (("2" (replace -1)
                      (("2" (assert)
                        (("2"
                          (use "list_map_member[[BoolExpr, Stmt], nat]")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil 20 20 t shostak)
  (var_names_TCC17-1 nil 3397378010 3397383381
   ("" (termination-tcc) nil nil) unfinished nil 79 79 t nil))
 (var_names_TCC18 0
  (var_names_TCC18-1 nil 3397378010 3404451492
   ("" (skosimp*)
    (("" (expand "size")
      (("" (replace -1)
        (("" (expand "reduce_nat" 2 2)
          ((""
            (name-replace "s" "reduce_nat(LAMBDA (i: int): 1,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1, 1,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1,
                                      LAMBDA (n: Name): 1,
                                      LAMBDA (nm: Name, n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1: nat, nm: Name, n2: nat):
                                        1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (l: list[[nat, nat]]):
                                        1 +
                                         sum(map[[nat, nat], nat]
                                                 (LAMBDA (n1, n2: nat):
                                                    1 + n1 + n2)
                                                 (l)),
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (nm: Name, n: nat): 1 + n, 1,
                                      LAMBDA (n: nat): 1 + n, 1,
                                      LAMBDA (n1 : nat, e : Excpt, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n)")
            (("" (lemma "sum_geq_than_elements")
              ((""
                (inst -1 _
                 "1 + s(PROJ_1(car[[BoolExpr[Name], Stmt[Name]]](branches!1))) + s(PROJ_2(car[[BoolExpr[Name], Stmt[Name]]](branches!1)))")
                (("" (inst?)
                  (("" (assert)
                    (("" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (use "list_map_member[[nat, nat], nat]")
                        (("2"
                          (inst -1
                           "(s(PROJ_1(car[[BoolExpr[Name], Stmt[Name]]](branches!1))), s(PROJ_2(car[[BoolExpr[Name], Stmt[Name]]](branches!1))))")
                          (("2" (assert)
                            (("2"
                              (use "list_map_member[[BoolExpr, Stmt], [nat, nat]]")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" ProgramFunctions nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (sum_geq_than_elements formula-decl nil listsum nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (list_map_member formula-decl nil list_map_funcs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sum def-decl "nat" listsum nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Excpt type-decl nil Excpt_adt nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil))
   35891 830 t nil))
 (var_names_TCC19 0
  (var_names_TCC19-1 nil 3397378010 3404451406 ("" (tcc) nil nil)
   unchecked
   ((sum def-decl "nat" listsum nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1578 1500 t nil))
 (var_names_TCC20 0
  (var_names_TCC20-1 nil 3397378010 3404451408
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum def-decl "nat" listsum nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1708 1620 nil nil))
 (var_names_TCC21 0
  (var_names_TCC21-1 nil 3397378010 3404451408
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   446 440 nil nil))
 (var_names_TCC22 0
  (var_names_TCC22-1 nil 3397378010 3404451409
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   447 430 nil nil))
 (var_names_TCC23 0
  (var_names_TCC23-1 nil 3397378010 3404451409
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   469 430 nil nil))
 (var_names_TCC24 0
  (var_names_TCC24-1 nil 3397378010 3404451410 ("" (grind) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   411 390 t nil))
 (var_names_TCC25 0
  (var_names_TCC25-1 nil 3397378010 3404451410 ("" (grind) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   411 380 t nil))
 (var_names_TCC26 0
  (var_names_TCC26-1 nil 3397380658 3404451410
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   367 350 nil nil))
 (var_names_TCC27 0
  (var_names_TCC27-1 nil 3397380658 3404451411
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   350 350 nil nil))
 (var_names_TCC28 0
  (var_names_TCC28-1 nil 3397380658 3404451411
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   477 430 nil nil))
 (var_names_TCC29 0
  (var_names_TCC29-1 nil 3397380658 3404451412
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   453 430 nil nil))
 (var_names_TCC30 0
  (var_names_TCC30-1 nil 3397380658 3404451412
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   459 440 nil nil))
 (var_names_TCC31 0
  (var_names_TCC31-1 nil 3397380658 3404451412
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (size const-decl "nat" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   407 390 nil nil))
 (var_names_TCC32 0
  (var_names_TCC32-1 nil 3397380658 3404451413
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "reduce_nat" 1 2)
        (("" (assert) (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" ProgramFunctions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil))
   681 640 t nil))
 (var_names_TCC33 0
  (var_names_TCC33-2 nil 3397556068 3404451414
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "reduce_nat" 1 2) (("" (grind) nil nil)) nil)) nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" ProgramFunctions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil))
   419 390 t nil)
  (var_names_TCC33-1 nil 3397380658 3397555915
   ("" (skolem-typepred)
    (("" (expand "is_finite")
      (("" (skolem!)
        ((""
          (inst 1 "N!1"
           "LAMBDA (n : ({n: Name | EXISTS (l : LocalVarDecl): ls!1(l) AND name(l) = n})) :
                      f!1(choose({l : LocalVarDecl | ls!1(l) AND name(l) = n}))")
          (("1" (expand "injective?")
            (("1" (skosimp)
              (("1" (inst?)
                (("1" (assert) nil nil)
                 ("2" (typepred "x2!1")
                  (("2" (rewrite "nonempty_exists")
                    (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                  nil)
                 ("3" (typepred "x1!1")
                  (("3" (rewrite "nonempty_exists")
                    (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem!)
            (("2" (typepred "n!1")
              (("2" (rewrite "nonempty_exists")
                (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   169 170 t nil))
 (var_names_TCC34 0
  (var_names_TCC34-2 nil 3398059737 3404451414
   (";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
    (skosimp*)
    ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
      (typepred "fs!1")
      ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
        (expand "is_finite")
        ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
          (skosimp*)
          ((";;; Proof var_names_TCC32-1 for formula ProgramFunctions.var_names_TCC32"
            (inst 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (f: FieldDecl): fs!1(f) AND name(f) = n})) :
                            f!1(choose({f : FieldDecl | fs!1(f) AND name(f) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!) (("2" (inst?) nil)))))))
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!) (("3" (inst?) nil)))))))))))))
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!) (("2" (inst?) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   161 160 nil nil)
  (var_names_TCC34-1 nil 3398058896 3398058943
   ("" (subtype-tcc) nil nil) unfinished nil 610 608 nil nil))
 (var_names_TCC35 0
  (var_names_TCC35-2 nil 3398059757 3404451414
   (";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
    (skosimp*)
    ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
      (typepred "ls!1")
      ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
        (expand "is_finite")
        ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
          (skosimp*)
          ((";;; Proof var_names_TCC33-2 for formula ProgramFunctions.var_names_TCC33"
            (inst 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (l: LocalVarDecl): ls!1(l) AND name(l) = n})) :
                            f!1(choose({l : LocalVarDecl | ls!1(l) AND name(l) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!) (("2" (inst?) nil)))))))
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!) (("3" (inst?) nil)))))))))))))
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!) (("2" (inst?) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (JType type-decl nil JType_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   172 150 nil nil)
  (var_names_TCC35-1 nil 3398058896 3398058950
   ("" (subtype-tcc) nil nil) unfinished nil 629 627 nil nil))
 (var_names_union 0
  (var_names_union-1 nil 3396846432 3404451414
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil))
   205 180 t shostak))
 (var_names_union2 0
  (var_names_union2-1 nil 3407217494 3407217552
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (auto-rewrite "union" "member")
        (("" (assert)
          (("" (iff)
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (expand "var_names")
                  (("1" (skosimp*)
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (inst? 2) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "var_names")
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (skosimp*)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil))
   57148 120 t shostak))
 (var_names_CaseJML_set2list 0
  (var_names_CaseJML_set2list-1 nil 3401699638 3404451414
   (";;; Proof for formula AnnotateProgramProperties.var_names_CaseJML_set2list"
    (skolem 1 (_ "n!1"))
    ((";;; Proof for formula AnnotateProgramProperties.var_names_CaseJML_set2list"
      (use "wf_induction[finite_set[[BoolExpr, Stmt]], LAMBDA(x, y : finite_set[[BoolExpr, Stmt]]) : card(x) < card(y)]")
      (("1" (split -1)
        (("1" (propax) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "set2list" 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (skosimp*)
                    (("1" (rewrite "var_names" 1)
                      (("1" (iff)
                        (("1" (prop)
                          (("1" (grind) nil)
                           ("2" (skosimp*)
                            (("2" (auto-rewrite "empty?" "member")
                              (("2"
                                (assert)
                                (("2" (inst? -3) nil)))))))))))))))
                   ("2" (skosimp*)
                    (("2" (rewrite "var_names" 2)
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (rewrite "card_remove")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1 :hide? t)
                                    (("2"
                                      (iff)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (case
                                             "  var_names(PROJ_1(choose(x!1)))(n!1)")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil)))
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "var_names(PROJ_2(choose(x!1)))(n!1)")
                                                (("1"
                                                  (inst?)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst 3 "x!2")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "remove")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))
                                             ("3"
                                              (expand "nonempty?")
                                              (("3" (propax) nil)))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst 3 "x!2")
                                            (("2"
                                              (rewrite "remove")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 3)
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (propax)
                                                    nil)))))))))))))))))))))))))))))))))))))))))))))
       ("2" (use "wf_card[[BoolExpr, Stmt]]") nil))))
    "")
   unchecked
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (list type-decl nil list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (wf_card formula-decl nil WF_Card nil))
   365 290 nil nil))
 (getFieldDecls_TCC1 0
  (getFieldDecls_TCC1-3 nil 3391148557 3404451415
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                  EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "fields(t!1)")
                        (("1"
                          (case-replace
                           "fields(t!1) = {f : FieldDecl | fields(t!1)(f)}")
                          (("1" (assert)
                            (("1" (apply-extensionality :hide? t) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand "union")
                      (("2" (expand "add")
                        (("2" (expand "member")
                          (("2" (iff)
                            (("2" (prop)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   188 160 t nil)
  (getFieldDecls_TCC1-2 nil 3390902649 3391148163
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "fields(t!1)")
                        (("1"
                          (case-replace
                           "fields(t!1) = {f : FieldDecl[Name] | fields(t!1)(f)}")
                          (("1" (apply-extensionality 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand* "union" "add" "member")
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil)
                           ("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   412 330 t nil)
  (getFieldDecls_TCC1-1 nil 3390821142 3390894974
   ("" (skolem!)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite")
        (("" (skolem!) (("" (postpone) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked nil 5557840 390 t nil))
 (getLocalDecls_TCC1 0
  (getLocalDecls_TCC1-2 nil 3390903916 3404451415
   ("" (skosimp*)
    (("" (use "finite_set_induction[Method]")
      ((""
        (inst -1
         "LAMBDA(M : finite_set[Method]) : is_finite[LocalVarDecl]({l: LocalVarDecl |EXISTS(m : Method) : M(m) AND (lvars(m)(l) OR l = arg(m))})")
        (("" (split -1)
          (("1" (inst?) nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace "{l: LocalVarDecl |
                                  EXISTS (m: Method):
                                    add(t!1, x!1)(m) AND (lvars(m)(l) OR l = arg(m))} = union(lvars(t!1), union(singleton(arg(t!1)), {l : LocalVarDecl | EXISTS (m: Method): x!1(m) AND (lvars(m)(l) OR l = arg(m))}))"
                 :hide? t)
                (("1" (use "finite_union[LocalVarDecl]")
                  (("1" (use "finite_union[LocalVarDecl]") nil nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (expand "union")
                      (("2" (expand "add")
                        (("2" (expand "singleton")
                          (("2" (expand "member")
                            (("2" (iff)
                              (("2"
                                (prop)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (split -1)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil)
                                 ("4"
                                  (skosimp*)
                                  (("4"
                                    (inst?)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                (("1" (use "finite_emptyset[LocalVarDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   207 160 t nil)
  (getLocalDecls_TCC1-1 nil 3390821142 3390821234
   ("" (subtype-tcc) nil nil) unchecked nil 605 450 nil nil))
 (getLocalDecls_TCC2 0
  (getLocalDecls_TCC2-2 nil 3401620970 3404451415
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[LocalVarDecl]({l : LocalVarDecl | EXISTS (c : Class) : C(c) AND getLocalDecls(c)(l)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " {l: LocalVarDecl |
              EXISTS (c: Class): add(t!1, x!1)(c) AND getLocalDecls(c)(l)}                    = union({l : LocalVarDecl | getLocalDecls(t!1)(l)},{l : LocalVarDecl | EXISTS(c : Class) : x!1(c) AND getLocalDecls(c)(l)})"
                 :hide? t)
                (("1" (use "finite_union[LocalVarDecl]")
                  (("1" (typepred "getLocalDecls(t!1)")
                    (("1" (assert)
                      (("1" (hide -2 2)
                        (("1"
                          (case-replace
                           "{l: LocalVarDecl[Name] | getLocalDecls(t!1)(l)} = getLocalDecls(t!1)"
                           :hide? t)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (apply-extensionality :hide? t)
                    (("2"
                      (auto-rewrite "union" "member" "add" "singleton")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (skosimp*)
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?) nil nil)
                             ("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                (("1" (use "finite_emptyset[LocalVarDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   186 150 t nil)
  (getLocalDecls_TCC2-1 nil 3401620807 3401620866
   ("" (subtype-tcc) nil nil) unfinished nil 249 249 nil nil))
 (arg_in_getLocalDecls 0
  (arg_in_getLocalDecls-1 nil 3398660837 3404451415
   ("" (skosimp*)
    (("" (expand "getLocalDecls")
      (("" (expand "getLocalDecls")
        (("" (apply (repeat (inst?)))
          (("" (assert) (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil))
   17 10 t shostak))
 (getGhostDecls_TCC1 0
  (getGhostDecls_TCC1-3 nil 3391148598 3404451415
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                          EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "ghost_vars(t!1)")
                        (("1"
                          (case-replace
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (assert)
                            (("1" (apply-extensionality :hide? t) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand* "union" "add" "member")
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (ground)
                              (("1"
                                (inst?)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil)
                           ("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   182 160 t nil)
  (getGhostDecls_TCC1-2 nil 3390903999 3391148164
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "ghost_vars(t!1)")
                        (("1"
                          (case-replace
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (apply-extensionality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand "union")
                      (("2" (expand "add")
                        (("2" (expand "member")
                          (("2" (iff)
                            (("2" (prop)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   436 310 t nil)
  (getGhostDecls_TCC1-1 nil 3390821142 3390821234
   ("" (subtype-tcc) nil nil) unchecked nil 474 450 nil nil))
 (declared_var_names_TCC1 0
  (declared_var_names_TCC1-1 nil 3394869665 3404451415
   ("" (skosimp)
    ((""
      (case-replace "{n: Name |
              var_names(getFieldDecls(p!1))(n) OR
              var_names(getLocalDecls(p!1))(n) OR
              var_names(getGhostDecls(p!1))(n)} =
              union(union(var_names(getFieldDecls(p!1)), var_names(getLocalDecls(p!1))), var_names(getGhostDecls(p!1)))")
      (("1" (hide -1) (("1" (use "finite_union[Name]") nil nil)) nil)
       ("2" (hide 2) (("2" (expand* "union" "member") nil nil)) nil))
      nil))
    nil)
   unchecked
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil))
   29 30 t nil))
 (ext_declared_var_names_TCC1 0
  (ext_declared_var_names_TCC1-1 nil 3397554464 3404451415
   ("" (skosimp*)
    (("" (rewrite "finite_union")
      (("1" (expand "is_finite")
        (("1"
          (inst 1 "1" "LAMBDA(n : ({n: Name | n = This[Name]})) : 0")
          (("1" (expand "injective?") (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (use "declared_var_names_TCC1") nil nil))
      nil))
    nil)
   unchecked
   ((finite_union judgement-tcc nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (This const-decl "Name" Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (declared_var_names_TCC1 subtype-tcc nil ProgramFunctions nil))
   88 70 t nil))
 (class_names_TCC1 0
  (class_names_TCC1-1 nil 3390821142 3404451416
   ("" (skolem!)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite")
        (("" (skolem!)
          ((""
            (inst 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (c : Class): classes(p!1)(c) AND name(c) = n})) :
                      f!1(choose({c : Class | classes(p!1)(c) AND name(c) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!) (("3" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((PreProgram type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   156 150 t nil))
 (method_names_TCC1 0
  (method_names_TCC1-1 nil 3390821142 3404451416
   ("" (skosimp*)
    (("" (typepred "methods(c!1)")
      (("" (expand "is_finite")
        (("" (skolem!)
          ((""
            (inst 1 "N!1"
             "LAMBDA (n: {n: Name | EXISTS (m: Method): classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}):
                     f!1(choose({m : Method | methods(c!1)(m) AND name(m) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!)
                        (("2" (inst?) (("2" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!)
                        (("3" (inst?) (("3" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!)
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PreProgram type-eq-decl nil Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   181 160 t nil))
 (methods_TCC1 0
  (methods_TCC1-1 nil 3392356310 3404451416
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[Method[Name]]
            ({m: Method[Name] |
                EXISTS (c: Class[Name]): C(c) AND methods(c)(m)})")
        (("" (assert)
          (("" (split -1)
            (("1" (inst -1 "classes(p!1)") nil nil)
             ("2" (hide 2)
              (("2" (skosimp*)
                (("2"
                  (case-replace "({m: Method[Name] |
                   EXISTS (c: Class[Name]): add(t!1, x!1)(c) AND methods(c)(m)})
     = union({m : Method[Name] | methods(t!1)(m)}, {m : Method[Name] | EXISTS (c : Class[Name]) : x!1(c) AND methods(c)(m)})"
                   :hide? t)
                  (("1" (use "finite_union[Method[Name]]")
                    (("1" (hide -1 2)
                      (("1" (typepred "methods(t!1)")
                        (("1"
                          (case-replace
                           "methods(t!1) = {m : Method[Name] | methods(t!1)(m)}"
                           :hide? t)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (expand* "union" "add" "member")
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (skosimp*)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (inst?) nil nil)
                             ("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (expand "emptyset")
                (("3"
                  (case-replace
                   "{m: Method[Name] | FALSE} = emptyset[Method[Name]]")
                  (("1" (use "finite_emptyset[Method[Name]]") nil nil)
                   ("2" (apply-extensionality :hide? t)
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   491 450 t nil))
 (get_class_TCC1 0
  (get_class_TCC1-1 nil 3390821142 3404451416
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   40 40 nil nil))
 (get_class_in_classes 0
  (get_class_in_classes-1 nil 3400562445 3404451416
   ("" (skosimp*)
    (("" (expand "get_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((get_class const-decl "lift[Class]" ProgramFunctions nil)) 35 30 t
   shostak))
 (lookup_mthd_TCC1 0
  (lookup_mthd_TCC1-1 nil 3396591590 3404451416
   ("" (subtype-tcc) nil nil) unchecked
   ((Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   76 60 nil nil))
 (lookup_mthd_TCC2 0
  (lookup_mthd_TCC2-1 nil 3396591590 3404451416
   ("" (skosimp*)
    (("" (expand "every")
      (("" (expand "methods")
        (("" (inst 1 "down[Class[Name]](get_class(p!1)(tgt!1))")
          (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil))
   61 60 t nil))
 (lookup_mthd_in_methods_class 0
  (lookup_mthd_in_methods_class-1 nil 3400562626 3404451416
   ("" (skosimp*)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (assert)
          (("" (split -2)
            (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil))
   28 30 t shostak))
 (proper_subterm_sequence 0
  (proper_subterm_sequence-2 nil 3397378089 3404451420
   ("" (induct "c3")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "<<" -3)
        (("2" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst?)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) (("3" (expand "<<") (("3" (propax) nil nil)) nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skosimp*)
      (("6" (expand "<<" -2)
        (("6" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp*)
      (("7" (expand "<<" -3)
        (("7" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*)
      (("8" (expand "<<" -3)
        (("8" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (grind) nil nil)
     ("12" (skosimp*)
      (("12" (expand "<<" -2)
        (("12" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (skosimp*)
      (("13" (expand "<<" -2)
        (("13" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp*)
      (("14" (expand "<<" -4)
        (("14" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (skosimp*)
      (("15" (expand "<<" -3)
        (("15" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (skosimp*)
      (("16" (expand "<<" -2)
        (("16" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (skosimp*)
      (("17" (expand "<<" -2)
        (("17" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (skosimp*)
      (("18" (rewrite "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (expand "<<" -2)
          (("18" (expand "<<" 1)
            (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
                (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
                  (("18" (skosimp*)
                    (("18" (inst?)
                      (("18" (assert)
                        (("18" (flatten)
                          (("18" (split 1)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (split -4)
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (expand "<<" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst? -2)
                                    (("2"
                                      (assert)
                                      (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (replace -1 :dir rl)
                                    (("3"
                                      (expand "<<" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (inst? -3)
                                    (("4"
                                      (assert)
                                      (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (split -4)
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (expand "<<" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst? -2)
                                    (("2"
                                      (assert)
                                      (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (replace -1 :dir rl)
                                    (("3"
                                      (expand "<<" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (inst? -3)
                                    (("4"
                                      (assert)
                                      (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (skosimp*)
      (("19" (expand "<<" -4)
        (("19" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (skosimp*)
      (("20" (expand "<<" -3)
        (("20" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (skosimp*)
      (("21" (expand "<<" -2)
        (("21" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("22" (grind) nil nil)
     ("23" (skosimp*)
      (("23" (expand "<<" -2)
        (("23" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (grind) nil nil)
     ("25" (skosimp*)
      (("25" (expand "<<" -4)
        (("25" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("26" (skosimp*)
      (("26" (expand "<<" -3)
        (("26" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("27" (skosimp*)
      (("27" (expand "<<" -2)
        (("27" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   3828 3480 t nil)
  (proper_subterm_sequence-1 nil 3396269350 3396593333
   ("" (induct "c3")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "<<" -3)
        (("2" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst?)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) (("3" (expand "<<") (("3" (propax) nil nil)) nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skosimp*)
      (("6" (expand "<<" -2)
        (("6" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp*)
      (("7" (expand "<<" -3)
        (("7" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*)
      (("8" (expand "<<" -3)
        (("8" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (grind) nil nil)
     ("12" (skosimp*)
      (("12" (expand "<<" -2)
        (("12" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (skosimp*)
      (("13" (expand "<<" -2)
        (("13" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp*)
      (("14" (expand "<<" -4)
        (("14" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (skosimp*)
      (("15" (expand "<<" -3)
        (("15" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (skosimp*)
      (("16" (expand "<<" -2)
        (("16" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (skosimp*)
      (("17" (expand "<<" -2)
        (("17" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (skosimp*)
      (("18" (rewrite "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (expand "<<" -2)
          (("18" (expand "<<" 1)
            (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
                (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
                  (("18" (skosimp*)
                    (("18" (inst?)
                      (("18" (assert)
                        (("18" (flatten)
                          (("18" (split 1)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (split -4)
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (expand "<<" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst? -2)
                                    (("2"
                                      (assert)
                                      (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (replace -1 :dir rl)
                                    (("3"
                                      (expand "<<" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (inst? -3)
                                    (("4"
                                      (assert)
                                      (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (split -4)
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (expand "<<" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst? -2)
                                    (("2"
                                      (assert)
                                      (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (replace -1 :dir rl)
                                    (("3"
                                      (expand "<<" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (inst? -3)
                                    (("4"
                                      (assert)
                                      (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (skosimp*)
      (("19" (expand "<<" -4)
        (("19" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (skosimp*)
      (("20" (expand "<<" -3)
        (("20" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (skosimp*)
      (("21" (expand "<<" -2)
        (("21" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("22" (grind) nil nil)
     ("23" (skosimp*)
      (("23" (expand "<<" -2)
        (("23" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (grind) nil nil)
     ("25" (skosimp*)
      (("25" (expand "<<" -4)
        (("25" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("26" (skosimp*)
      (("26" (expand "<<" -3)
        (("26" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((some_is_exists formula-decl nil listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1422 1422 t nil))
 (proper_subterm_set_clause_sequence 0
  (proper_subterm_set_clause_sequence-1 nil 3396269362 3404451420
   ("" (skosimp*)
    (("" (expand "proper_subterm_set_clause")
      (("" (lemma "proper_subterm_sequence")
        (("" (inst-cp - "c1!1" "c2!1" "pre_set(m!1)")
          (("" (inst-cp - "c1!1" "c2!1" "post_set(m!1)")
            (("" (inst - "c1!1" "c2!1" "exc_set(m!1)")
              (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (proper_subterm_sequence formula-decl nil ProgramFunctions nil))
   58 30 t nil))
 (proper_subterm_is_transitive 0
  (proper_subterm_is_transitive-1 nil 3396272071 3404451422
   ("" (induct "c3")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "<<" 1)
        (("2" (expand "<<" -4)
          (("2" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil)
     ("7" (skosimp*)
      (("7" (expand "<<" 1)
        (("7" (expand "<<" -4)
          (("7" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*)
      (("8" (expand "<<" 1)
        (("8" (expand "<<" -4)
          (("8" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (grind) nil nil) ("12" (grind) nil nil)
     ("13" (grind) nil nil)
     ("14" (skosimp*)
      (("14" (expand "<<" 1)
        (("14" (expand "<<" -5)
          (("14" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil)
             ("5" (inst -4 "c1!1" "c2!1") (("5" (assert) nil nil)) nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (skosimp*)
      (("15" (expand "<<" 1)
        (("15" (expand "<<" -4)
          (("15" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (grind) nil nil) ("17" (grind) nil nil)
     ("18" (skosimp*)
      (("18" (rewrite "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (expand "<<" (-3 1))
          (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
            (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (skosimp*)
                (("18" (inst?)
                  (("18" (assert)
                    (("18" (flatten)
                      (("18" (inst 1 "x!1")
                        (("18" (assert)
                          (("18" (split -5)
                            (("1" (assert) nil nil)
                             ("2" (inst -2 "c1!1" "c2!1")
                              (("2" (assert) nil nil)) nil)
                             ("3" (assert) nil nil)
                             ("4" (inst -3 "c1!1" "c2!1")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (skosimp*)
      (("19" (expand "<<" 1)
        (("19" (expand "<<" -5)
          (("19" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil)
             ("5" (assert) nil nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (skosimp*)
      (("20" (expand "<<" 1)
        (("20" (expand "<<" -4)
          (("20" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (grind) nil nil) ("22" (grind) nil nil)
     ("23" (grind) nil nil) ("24" (grind) nil nil)
     ("25" (skosimp*)
      (("25" (expand "<<" 1)
        (("25" (expand "<<" -5)
          (("25" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil)
             ("5" (assert) nil nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("26" (skosimp*)
      (("26" (expand "<<" 1)
        (("26" (expand "<<" -4)
          (("26" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("27" (skosimp*)
      (("27" (expand "<<" 1)
        (("27" (expand "<<" -3)
          (("27" (split -3)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((some_is_exists formula-decl nil listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   1610 1410 t shostak))
 (subterm_subset_varnames 0
  (subterm_subset_varnames-1 nil 3396779500 3404451425
   ("" (auto-rewrite "union" "member" "subset?" "emptyset" "add")
    (("" (induct "b2")
      (("1" (grind) nil nil)
       ("2"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -3) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert)))
        nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil)
       ("7"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -3) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert)))
        nil nil)
       ("8"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -3) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert)))
        nil nil)
       ("9" (grind) nil nil) ("10" (grind) nil nil)
       ("11" (grind) nil nil)
       ("12"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -2) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)))
        nil nil)
       ("13"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -2) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)))
        nil nil)
       ("14"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -4) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert) (assert) (inst? -4 :where -1) (assert)
                (inst? -4)))
        (("14" (assert) nil nil)) nil)
       ("15"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -3) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert) (assert)))
        nil nil)
       ("16"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -2) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)))
        nil nil)
       ("17"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -2) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)))
        nil nil)
       ("18" (skosimp*)
        (("18" (expand "var_names" 1 2)
          (("18" (assert)
            (("18" (skosimp*)
              (("18" (split 1)
                (("1" (expand "<<" -3)
                  (("1" (rewrite "some_is_exists")
                    (("1" (skosimp*)
                      (("1" (expand "member")
                        (("1" (lift-if) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (rewrite "every_is_forall")
                    (("2" (expand "<<" -2)
                      (("2" (rewrite "some_is_exists")
                        (("2" (skosimp*)
                          (("2" (inst -1 "x!2")
                            (("2" (split -1)
                              (("1"
                                (case
                                 "FORALL(l : list[[BoolExpr, Stmt]]) : member(x!2, l) IMPLIES var_names(CaseJML(l))(x!1)")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst -3 "b1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst? -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -4 "b1!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst? -4)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (induct "l")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (expand "member" -2)
                                      (("2"
                                        (expand "var_names" 1)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -6)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (inst -4 "b1!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst? -4)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (assert) nil nil)
                                                 ("4"
                                                  (inst -5 "b1!1")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (inst? -5)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("19"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -4) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert) (assert) (assert) (inst? -4 :where -1)
                (assert) (inst? -4) (assert)))
        nil nil)
       ("20"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -3) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert)))
        nil nil)
       ("21"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -2) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)))
        nil nil)
       ("22" (grind) nil nil)
       ("23"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -2) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)))
        nil nil)
       ("24" (grind) nil nil)
       ("25"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -4) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert) (assert) (assert) (inst? -4 :where -1)
                (assert) (inst? -4) (assert)))
        nil nil)
       ("26"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -3) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)
                (assert) (inst? -3 :where -1) (assert) (inst? -3)
                (assert)))
        nil nil)
       ("27"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert)
                (skosimp*) (expand "<<" -2) (split -) (assert)
                (inst? -2 :where -1) (assert) (inst? -2) (assert)))
        nil nil))
      nil))
    nil)
   unchecked
   ((Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body_induction formula-decl nil Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (some_is_exists formula-decl nil listfuncs nil))
   3488 1940 t shostak))
 (subterm_subset_of_var 0
  (subterm_subset_of_var-1 nil 3396779041 3404451426
   ("" (skosimp*)
    (("" (use "subterm_subset_varnames")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   unchecked
   ((subterm_subset_varnames formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   222 220 t shostak))
 (proper_subterm_implies_subterm 0
  (proper_subterm_implies_subterm-1 nil 3403263109 3404451427
   ("" (induct "b2")
    (("1" (apply (then (expand* "<<" "subterm") (assert))) nil nil)
     ("2"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten)))
      (("2" (assert) nil nil)) nil)
     ("3" (skosimp*) (("3" (expand "<<") (("3" (propax) nil nil)) nil))
      nil)
     ("4" (apply (then (skosimp*) (expand* "<<" "subterm") (assert)))
      nil nil)
     ("5" (apply (then (skosimp*) (expand* "<<" "subterm") (assert)))
      nil nil)
     ("6"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("7"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("8"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("9"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      (("9" (expand "<<") (("9" (propax) nil nil)) nil)) nil)
     ("10" (apply (then (skosimp*) (expand* "<<" "subterm") (assert)))
      nil nil)
     ("11" (apply (then (skosimp*) (expand* "<<" "subterm") (assert)))
      nil nil)
     ("12"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("13"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("14"
      (apply (then (skosimp*) (expand "<<" -4) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("15"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("16"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("17"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("18" (induct "CaseJML1_var")
      (("1" (skosimp*)
        (("1" (expand "<<" -2)
          (("1" (rewrite "some_is_exists")
            (("1" (expand "member") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "every" -2)
          (("2" (flatten)
            (("2" (expand "<<" -5)
              (("2" (expand "subterm" 1)
                (("2" (rewrite "some_is_exists")
                  (("2" (rewrite "some_is_exists")
                    (("2" (flatten)
                      (("2" (skosimp*)
                        (("2" (inst 2 "x!1")
                          (("2" (assert)
                            (("2" (rewrite "every_is_forall")
                              (("2"
                                (expand "member" -5)
                                (("2"
                                  (inst -2 "b1!1")
                                  (("2"
                                    (inst -3 "b1!1")
                                    (("2"
                                      (inst -4 "x!1")
                                      (("2"
                                        (split -6)
                                        (("1"
                                          (expand "subterm")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (split -6)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst? -6)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "subterm")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (split -6)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst? -7)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19"
      (apply (then (skosimp*) (expand "<<" -4) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("20"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("21"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("22" (apply (then (skosimp*) (expand* "<<" "subterm") (assert)))
      nil nil)
     ("23"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("24" (apply (then (skosimp*) (expand* "<<" "subterm") (assert)))
      nil nil)
     ("25"
      (apply (then (skosimp*) (expand "<<" -4) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("26"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil)
     ("27"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1)
              (assert) (flatten) (repeat (inst?)) (assert)
              (expand "subterm") (flatten) (assert)))
      nil nil))
    nil)
   unchecked
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   1172 1000 t shostak))
 (subterm_transitive 0
  (subterm_transitive-2 nil 3403264428 3404451429
   ("" (induct "b3")
    (("1" (grind) nil nil)
     ("2"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -4) (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("3" (apply (then (skosimp*) (expand "subterm") (assert))) nil
      nil)
     ("4" (apply (then (skosimp*) (expand "subterm") (assert))) nil
      nil)
     ("5" (apply (then (skosimp*) (expand "subterm") (assert))) nil
      nil)
     ("6"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("7"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -4) (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("8"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -4) (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("9" (apply (then (skosimp*) (expand "subterm") (assert))) nil
      nil)
     ("10" (apply (then (skosimp*) (expand "subterm") (assert))) nil
      nil)
     ("11" (apply (then (skosimp*) (expand "subterm") (assert))) nil
      nil)
     ("12"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("13"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("14"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -5) (flatten)
              (branch (split -5)
               ((then (expand "subterm" -5) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))
                (then (inst -4 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("15"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -4) (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("16"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("17"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("18" (induct "CaseJML1_var")
      (("1" (skosimp*)
        (("1" (expand "subterm" -3)
          (("1" (rewrite "some_is_exists")
            (("1" (expand "member")
              (("1" (replace -3) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "subterm" -4)
          (("2" (expand "subterm" 1)
            (("2" (expand "every" -2)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (rewrite "some_is_exists")
                    (("2" (rewrite "some_is_exists")
                      (("2" (split -6)
                        (("1" (replace -1)
                          (("1" (expand "subterm" -6)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst 2 "x!1")
                            (("2" (assert)
                              (("2"
                                (expand "member" -1)
                                (("2"
                                  (inst -3 "b1!1" "b2!1")
                                  (("2"
                                    (inst -4 "b1!1" "b2!1")
                                    (("2"
                                      (inst -5 "b1!1" "b2!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (split -2)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (rewrite
                                               "every_is_forall")
                                              (("2"
                                                (inst -6 "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -6
                                                       "b1!1"
                                                       "b2!1")
                                                      (("2"
                                                        (inst
                                                         -7
                                                         "b1!1"
                                                         "b2!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -5) (flatten)
              (branch (split -5)
               ((then (expand "subterm" -5) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))
                (then (inst -4 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("20"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -4) (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("21"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("22" (apply (then (skosimp*) (expand "subterm")))
      (("22" (assert) nil nil)) nil)
     ("23"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("24" (apply (then (skosimp*) (expand "subterm")))
      (("24" (assert) nil nil)) nil)
     ("25"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -5) (flatten)
              (branch (split -5)
               ((then (expand "subterm" -5) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))
                (then (inst -4 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("26"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -4) (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("27"
      (apply (then (skosimp*) (expand "subterm" 1)
              (expand "subterm" -3) (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1)
                 (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil))
    nil)
   unchecked
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (pred type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   2419 2160 t nil)
  (subterm_transitive-1 nil 3403264410 nil
   (";;; Proof proper_subterm_is_transitive-1 for formula ProgramFunctions.proper_subterm_is_transitive"
    (induct "c3")
    (("1" (grind) nil)
     ("2" (skosimp*)
      (("2" (expand "<<" 1)
        (("2" (expand "<<" -4)
          (("2" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("3" (grind) nil) ("4" (grind) nil) ("5" (grind) nil)
     ("6" (grind) nil)
     ("7" (skosimp*)
      (("7" (expand "<<" 1)
        (("7" (expand "<<" -4)
          (("7" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("8" (skosimp*)
      (("8" (expand "<<" 1)
        (("8" (expand "<<" -4)
          (("8" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("9" (grind) nil) ("10" (grind) nil) ("11" (grind) nil)
     ("12" (grind) nil) ("13" (grind) nil)
     ("14" (skosimp*)
      (("14" (expand "<<" 1)
        (("14" (expand "<<" -5)
          (("14" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))
             ("5" (inst -4 "c1!1" "c2!1") (("5" (assert) nil)))
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil)))))))))))
     ("15" (skosimp*)
      (("15" (expand "<<" 1)
        (("15" (expand "<<" -4)
          (("15" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("16" (grind) nil) ("17" (grind) nil)
     ("18" (skosimp*)
      (("18" (rewrite "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (expand "<<" (-3 1))
          (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
            (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (skosimp*)
                (("18" (inst?)
                  (("18" (assert)
                    (("18" (flatten)
                      (("18" (inst 1 "x!1")
                        (("18" (assert)
                          (("18" (split -5)
                            (("1" (assert) nil)
                             ("2" (inst -2 "c1!1" "c2!1")
                              (("2" (assert) nil)))
                             ("3" (assert) nil)
                             ("4" (inst -3 "c1!1" "c2!1")
                              (("4"
                                (assert)
                                nil)))))))))))))))))))))))))))
     ("19" (skosimp*)
      (("19" (expand "<<" 1)
        (("19" (expand "<<" -5)
          (("19" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))
             ("5" (assert) nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil)))))))))))
     ("20" (skosimp*)
      (("20" (expand "<<" 1)
        (("20" (expand "<<" -4)
          (("20" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("21" (grind) nil) ("22" (grind) nil) ("23" (grind) nil)
     ("24" (grind) nil)
     ("25" (skosimp*)
      (("25" (expand "<<" 1)
        (("25" (expand "<<" -5)
          (("25" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))
             ("5" (assert) nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil)))))))))))
     ("26" (skosimp*)
      (("26" (expand "<<" 1)
        (("26" (expand "<<" -4)
          (("26" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("27" (skosimp*)
      (("27" (expand "<<" 1)
        (("27" (expand "<<" -3)
          (("27" (split -3)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1")
              (("2" (assert) nil))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked nil nil nil nil nil))
 (subterm_CaseJML_set2list 0
  (subterm_CaseJML_set2list-1 nil 3403594428 3404451430
   ("" (skolem 1 (_ "b!1"))
    ((""
      (use "wf_induction[finite_set[[BoolExpr, Stmt]], LAMBDA(x, y : finite_set[[BoolExpr, Stmt]]) : card(x) < card(y)]")
      (("1" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "set2list" 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (skosimp*)
                    (("1" (expand "subterm" 1 1)
                      (("1" (assert)
                        (("1" (rewrite "some_is_exists")
                          (("1" (expand "member")
                            (("1" (skosimp*)
                              (("1"
                                (expand "empty?")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "subterm" 2)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (assert) nil nil)
                           ("2" (rewrite "some_is_exists")
                            (("2" (skosimp*)
                              (("2"
                                (expand "member" -1)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "choose(x!1)")
                                        (("1"
                                          (replace -2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     -3
                                     "remove(choose(x!1), x!1)")
                                    (("2"
                                      (rewrite "card_remove")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subterm" -3 1)
                                          (("2"
                                            (rewrite "some_is_exists")
                                            (("2"
                                              (iff)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (split -3)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (expand
                                                             "remove")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (rewrite "some_is_exists")
                              (("3"
                                (inst 2 "x!2")
                                (("3"
                                  (assert)
                                  (("3"
                                    (split 2)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (use
                                         "choose_rest[[BoolExpr, Stmt]]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 -2 :dir rl)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand* "add" "rest")
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "set2list_same_elements")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_card[[BoolExpr, Stmt]]") nil nil))
      nil))
    nil)
   unchecked
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (list type-decl nil list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil)
    (remove const-decl "set" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (add const-decl "(nonempty?)" sets nil)
    (rest const-decl "set" sets nil)
    (choose_rest formula-decl nil sets_lemmas nil)
    (wf_card formula-decl nil WF_Card nil))
   465 410 t shostak)))
(ProgramRestriction)
(WellFormedProgram
 (wf_Body_TCC1 0
  (wf_Body_TCC1-1 nil 3403260982 3405927499 ("" (subtype-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil))
   212 160 nil nil))
 (wf_Body_preserved_by_proper_subterm 0
  (wf_Body_preserved_by_proper_subterm-1 nil 3401450425 3405927499
   ("" (skolem 1 "p!1" _ _)
    (("" (skosimp*)
      (("" (expand "wf_Body")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (use "subterm_subset_varnames")
                  (("1" (assert)
                    (("1" (expand "subset?")
                      (("1" (expand "member")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -4)
              (("2" (assert)
                (("2" (lemma "proper_subterm_implies_subterm")
                  (("2" (inst? -1 :where -5)
                    (("2" (assert)
                      (("2" (lemma "subterm_transitive")
                        (("2" (inst -1 "b1!2" "b2!1" "b1!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (subterm_subset_varnames formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (proper_subterm_implies_subterm formula-decl nil ProgramFunctions
     nil)
    (subterm_transitive formula-decl nil ProgramFunctions nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   66 70 t shostak))
 (wf_Body_CaseJML 0
  (wf_Body_CaseJML-1 nil 3401607410 3405927500
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "wf_Branches")
          (("2" (expand "wf_Body")
            (("2" (expand "var_names" 1 1)
              (("2" (expand "subterm" 1 1)
                (("2" (expand "every" 1)
                  (("2" (auto-rewrite "union" "member")
                    (("2" (assert)
                      (("2" (iff)
                        (("2" (split 1)
                          (("1" (skosimp*)
                            (("1" (split -3)
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst? -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (inst? -5)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "some_is_exists")
                                          (("2"
                                            (inst? 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3"
                                      (inst? -3)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skosimp*)
                                    (("4"
                                      (inst? -5)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (rewrite "some_is_exists")
                                          (("4"
                                            (inst? 2)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst? -4)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (rewrite "some_is_exists")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "subterm" -2)
                                          (("3"
                                            (rewrite "some_is_exists")
                                            (("3"
                                              (skosimp*)
                                              (("3"
                                                (inst 2 "x!1")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (inst? -2)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst? -4)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (inst? -8)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "some_is_exists")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (split -3)
                                                (("1"
                                                  (inst? -5)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst? -7)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -10)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "subterm"
                                                     2)
                                                    (("2"
                                                      (rewrite
                                                       "some_is_exists")
                                                      (("2"
                                                        (inst? 2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (emptyset const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil) nil nil
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (list type-decl nil list_adt nil))
   1393 1280 t shostak))
 (wf_program_variables_disjoint 0
  (wf_program_variables_disjoint-1 nil 3393587608 3405927500
   ("" (skosimp)
    (("" (typepred "p!1")
      (("" (expand* "wf_Program" "wf_program_variables_disjoint_def")
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil))
   15 20 t shostak))
 (wf_program_variables_not_reserved_words 0
  (wf_program_variables_not_reserved_words-1 nil 3394987767 3405927500
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "wf_program_variables_not_reserved_words_def")
            (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil))
   6 10 t shostak))
 (wf_program_has_unique_class_names 0
  (wf_program_has_unique_class_names-1 nil 3390201065 3405927500
   ("" (skosimp)
    (("" (typepred "p!1")
      ((""
        (expand* "wf_Program" "wf_program_has_unique_class_names_def")
        (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil))
   13 10 t shostak))
 (wf_program_has_wf_classes 0
  (wf_program_has_wf_classes-1 nil 3393587755 3405927500
   ("" (skosimp)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "wf_Classes")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil))
   10 10 t shostak))
 (wf_class_has_unique_method_names 0
  (wf_class_has_unique_method_names-1 nil 3393587790 3405927500
   ("" (skosimp*)
    (("" (expand "wf_Class")
      (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((wf_Class const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil))
   11 10 t shostak))
 (wf_program_methods_only_in_one_class 0
  (wf_program_methods_only_in_one_class-1 nil 3401699461 3405927592
   ("" (skosimp*)
    (("" (expand "wf_program_methods_only_in_one_class")
      (("" (typepred "p!1")
        (("" (expand "wf_Program")
          (("" (skosimp*)
            (("" (expand "wf_Classes")
              (("" (inst-cp -4 "c1!1")
                (("" (inst -4 "c2!1")
                  (("" (assert)
                    (("" (expand "wf_Class")
                      (("" (flatten)
                        (("" (inst -5 "m!1")
                          (("" (inst -7 "m!1")
                            (("" (assert)
                              ((""
                                (expand
                                 "wf_program_has_unique_class_names_def")
                                ((""
                                  (inst -3 "c1!1" "c2!1")
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil))
   72154 80 t shostak))
 (wf_program_var_names_declared 0
  (wf_program_var_names_declared-1 nil 3403602252 3405927927
   ("" (skosimp*)
    (("" (expand "var_names")
      (("" (expand "Union")
        (("" (skosimp*)
          (("" (typepred "a!1")
            (("" (skosimp*)
              (("" (replace -2 :hide? t)
                (("" (expand "var_names")
                  (("" (auto-rewrite "union" "member")
                    (("" (assert)
                      (("" (split -2)
                        (("1" (expand "Union")
                          (("1" (skosimp*)
                            (("1" (typepred "a!2")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2 :hide? t)
                                  (("1"
                                    (expand "var_names")
                                    (("1"
                                      (expand "Union")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (typepred "a!3")
                                          (("1"
                                            (typepred "p!1")
                                            (("1"
                                              (expand "wf_Program")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "program_pred")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "method_pred")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst? -6)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "wf_Body")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (split
                                                                     -21)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (inst?
                                                                         -8)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (inst?
                                                                         -10)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (replace
                                                                       -1)
                                                                      (("3"
                                                                        (inst?
                                                                         -12)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (replace
                                                                       -1)
                                                                      (("4"
                                                                        (inst?
                                                                         -14)
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (replace
                                                                       -1)
                                                                      (("5"
                                                                        (inst?
                                                                         -16)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("6"
                                                                      (replace
                                                                       -1)
                                                                      (("6"
                                                                        (inst?
                                                                         -18)
                                                                        (("6"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("7"
                                                                      (replace
                                                                       -1)
                                                                      (("7"
                                                                        (expand
                                                                         "ext_declared_var_names")
                                                                        (("7"
                                                                          (assert)
                                                                          (("7"
                                                                            (flatten)
                                                                            (("7"
                                                                              (expand
                                                                               "var_names"
                                                                               2)
                                                                              (("7"
                                                                                (expand
                                                                                 "var_names"
                                                                                 -23)
                                                                                (("7"
                                                                                  (skosimp*)
                                                                                  (("7"
                                                                                    (inst?
                                                                                     2)
                                                                                    (("7"
                                                                                      (expand
                                                                                       "getLocalDecls")
                                                                                      (("7"
                                                                                        (assert)
                                                                                        (("7"
                                                                                          (inst?
                                                                                           2)
                                                                                          (("7"
                                                                                            (assert)
                                                                                            (("7"
                                                                                              (expand
                                                                                               "getLocalDecls")
                                                                                              (("7"
                                                                                                (inst?
                                                                                                 2)
                                                                                                (("7"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("8"
                                                                      (replace
                                                                       -1)
                                                                      (("8"
                                                                        (inst?
                                                                         -20)
                                                                        (("8"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("9"
                                                                      (expand
                                                                       "singleton")
                                                                      (("9"
                                                                        (replace
                                                                         -1)
                                                                        (("9"
                                                                          (assert)
                                                                          (("9"
                                                                            (expand
                                                                             "ext_declared_var_names")
                                                                            (("9"
                                                                              (assert)
                                                                              (("9"
                                                                                (flatten)
                                                                                (("9"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   2)
                                                                                  (("9"
                                                                                    (inst?
                                                                                     2)
                                                                                    (("9"
                                                                                      (expand
                                                                                       "getLocalDecls")
                                                                                      (("9"
                                                                                        (inst?
                                                                                         2)
                                                                                        (("9"
                                                                                          (assert)
                                                                                          (("9"
                                                                                            (expand
                                                                                             "getLocalDecls")
                                                                                            (("9"
                                                                                              (inst?
                                                                                               2)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "ext_declared_var_names")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand "var_names" (-1 1))
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "getFieldDecls")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "ext_declared_var_names")
                          (("3" (assert)
                            (("3" (flatten)
                              (("3"
                                (expand "var_names" (-1 3))
                                (("3"
                                  (skosimp*)
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "getGhostDecls")
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred "p!1")
                          (("4" (expand "wf_Program")
                            (("4" (flatten)
                              (("4"
                                (expand "program_pred")
                                (("4"
                                  (inst?)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (expand "wf_Body")
                                        (("4"
                                          (flatten)
                                          (("4"
                                            (inst? -5)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil) nil
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (program_pred const-decl "bool" ProgramRestriction nil) nil nil
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (Union const-decl "set" sets nil))
   330473 2630 t shostak)))

