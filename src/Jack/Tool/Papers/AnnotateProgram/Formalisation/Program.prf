(Body)
(BodyFunctions)
(Program
 (reserved_words_TCC1 0
  (reserved_words_TCC1-2 nil 3394869706 3428166024
   ("" (expand "is_finite")
    ((""
      (inst 1 "6"
       "LAMBDA (n : {n: Name | n = This OR n = Super OR n = rsIf OR n = rsThen OR n = rsElse}) :
                         IF n = This THEN 1
                         ELSIF n = Super THEN 2
                         ELSIF n = rsIf THEN 3
                         ELSIF n = rsThen THEN 4
                         ELSIF n = rsElse THEN 5
                         ELSE 0 ENDIF")
      (("" (expand "injective?")
        (("" (skosimp)
          (("" (lift-if)
            (("" (assert)
              (("" (grind)
                (("" (typepred "x1!1") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Program nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (This const-decl "Name" Program nil) (Super const-decl "Name" Program nil)
    (rsIf const-decl "Name" Program nil)
    (rsThen const-decl "Name" Program nil)
    (rsElse const-decl "Name" Program nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   1257 150 nil nil)
  (reserved_words_TCC1-1 nil 3394869664 nil ("" (subtype-tcc) nil nil) nil nil
   nil nil nil nil)))
(ProgramFunctions
 (var_names_TCC1 0
  (var_names_TCC1-1 nil 3390821142 3428166024 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   406 360 t nil))
 (var_names_TCC2 0
  (var_names_TCC2-1 nil 3390821142 3428166024 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   387 350 t nil))
 (var_names_TCC3 0
  (var_names_TCC3-1 nil 3397378010 3428166025 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   350 310 nil nil))
 (var_names_TCC4 0
  (var_names_TCC4-1 nil 3397378010 3428166025 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   413 380 t nil))
 (var_names_TCC5 0
  (var_names_TCC5-1 nil 3397378010 3428166026 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   372 350 nil nil))
 (var_names_TCC6 0
  (var_names_TCC6-1 nil 3397378010 3428166026 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   369 350 nil nil))
 (var_names_TCC7 0
  (var_names_TCC7-1 nil 3397378010 3428166026 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   366 360 nil nil))
 (var_names_TCC8 0
  (var_names_TCC8-1 nil 3397378010 3428166027 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   335 310 nil nil))
 (var_names_TCC9 0
  (var_names_TCC9-1 nil 3397378010 3428166027 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   424 400 nil nil))
 (var_names_TCC10 0
  (var_names_TCC10-1 nil 3397378010 3428166027 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   407 380 nil nil))
 (var_names_TCC11 0
  (var_names_TCC11-1 nil 3397378010 3428166028 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   407 400 nil nil))
 (var_names_TCC12 0
  (var_names_TCC12-1 nil 3397378010 3428166028 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   371 350 nil nil))
 (var_names_TCC13 0
  (var_names_TCC13-1 nil 3397378010 3428166029 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   382 360 nil nil))
 (var_names_TCC14 0
  (var_names_TCC14-1 nil 3397378010 3428166029 ("" (termination-tcc) nil nil)
   proved nil 38 40 nil nil))
 (var_names_TCC15 0
  (var_names_TCC15-1 nil 3397378010 3428166030 ("" (termination-tcc) nil nil)
   proved
   ((reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (sum def-decl "nat" listsum nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   1449 1390 nil nil))
 (var_names_TCC16 0
  (var_names_TCC16-1 nil 3397378010 3428166032 ("" (termination-tcc) nil nil)
   proved
   ((reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (sum def-decl "nat" listsum nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   1450 1390 nil nil))
 (var_names_TCC17 0
  (var_names_TCC17-3 "" 3412067977 3428166032
   ("" (skosimp*)
    (("" (expand "size")
      (("" (replace -1 :hide? t)
        (("" (expand "reduce_nat")
          (("" (assert)
            ((""
              (name-replace "s" "reduce_nat(LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n: Name): 1,
                                    LAMBDA (n: nat): 1 + n,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n: Name): 1,
                                    LAMBDA (n: Name): 1,
                                    LAMBDA (nm: Name, n: nat): 1 + n,
                                    LAMBDA
                                    (n1, n2, n3: nat):
                                    1 + n1 + n2 + n3,
                                    LAMBDA
                                    (n1: nat, nm: Name, n2: nat):
                                    1 + n1 + n2,
                                    LAMBDA (v: (defined?)): 1,
                                    LAMBDA
                                    (l: list[[nat, nat]]):
                                    1
                                    +
                                    sum
                                    (map[[nat, nat], nat]
                                     (LAMBDA (n1, n2: nat): 1 + n1 + n2)
                                     (l)),
                                    LAMBDA
                                    (n1, n2, n3: nat):
                                    1 + n1 + n2 + n3,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (nm: Name, n: nat): 1 + n,
                                    1,
                                    LAMBDA (n: nat): 1 + n,
                                    LAMBDA (e: Excpt): 1,
                                    LAMBDA
                                    (n1: nat, e: Excpt, n2, n3: nat):
                                    1 + n1 + n2 + n3,
                                    LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                    LAMBDA (n: nat): 1 + n)")
              ((""
                (name-replace "f" "
                    (LAMBDA (t: [Expr[Name], Stmt[Name]]): (s(t`1), s(t`2)))")
                (("" (expand "map" 2 4)
                  (("" (expand "map" 2 3)
                    (("" (expand "sum" 2 2) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (size const-decl "nat" BodyFunctions nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (list type-decl nil list_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sum def-decl "nat" listsum nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   581 510 t nil)
  (var_names_TCC17-2 "" 3397383573 3412067922
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "reduce_nat" 1 2)
        (("" (assert)
          ((""
            (name-replace "s" "reduce_nat(LAMBDA (i: int): 1,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1, 1,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: Name): 1, 1,
                                      LAMBDA (n: Name): 1,
                                      LAMBDA (nm: Name, n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1: nat, nm: Name, n2: nat):
                                        1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (n: nat): 1 + n,
                                      LAMBDA (l: list[[nat, nat]]):
                                        1 +
                                         sum(map[[nat, nat], nat]
                                                 (LAMBDA (n1, n2: nat):
                                                    1 + n1 + n2)
                                                 (l)),
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (nm: Name, n: nat): 1 + n, 1,
                                      LAMBDA (n: nat): 1 + n, 1,
                                      LAMBDA (n1, n2, n3: nat):
                                        1 + n1 + n2 + n3,
                                      LAMBDA (n1, n2: nat): 1 + n1 + n2,
                                      LAMBDA (n: nat): 1 + n)")
            ((""
              (use "sum_geq_than_elements"
                   ("x" "s(proj_1(x!1)) + s(proj_2(x!1)) + 1"))
              (("" (split -1)
                (("1" (assert) nil nil)
                 ("2" (rewrite "map_list_composition")
                  (("2" (expand "o")
                    (("2" (replace -1)
                      (("2" (assert)
                        (("2" (use "list_map_member[[BoolExpr, Stmt], nat]")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 489 460 t shostak)
  (var_names_TCC17-1 nil 3397378010 3397383381 ("" (termination-tcc) nil nil)
   unfinished nil 79 79 t nil))
 (var_names_TCC18 0
  (var_names_TCC18-1 nil 3397378010 3428166032
   ("" (skosimp*)
    (("" (replace -1)
      (("" (expand "size")
        (("" (expand "reduce_nat" 1 2) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   333 320 t nil))
 (var_names_TCC19 0
  (var_names_TCC19-1 nil 3397378010 3428166033 ("" (tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   413 390 t nil))
 (var_names_TCC20 0
  (var_names_TCC20-1 nil 3397378010 3428166033 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   412 390 nil nil))
 (var_names_TCC21 0
  (var_names_TCC21-1 nil 3397378010 3428166034 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   376 350 nil nil))
 (var_names_TCC22 0
  (var_names_TCC22-1 nil 3397378010 3428166034 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   370 350 nil nil))
 (var_names_TCC23 0
  (var_names_TCC23-1 nil 3397378010 3428166034 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   339 320 nil nil))
 (var_names_TCC24 0
  (var_names_TCC24-1 nil 3397378010 3428166035 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   337 330 t nil))
 (var_names_TCC25 0
  (var_names_TCC25-1 nil 3397378010 3428166035 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   431 390 t nil))
 (var_names_TCC26 0
  (var_names_TCC26-1 nil 3397380658 3428166036 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   414 400 nil nil))
 (var_names_TCC27 0
  (var_names_TCC27-1 nil 3397380658 3428166036 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   412 390 nil nil))
 (var_names_TCC28 0
  (var_names_TCC28-1 nil 3397380658 3428166036 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   374 360 nil nil))
 (var_names_TCC29 0
  (var_names_TCC29-1 nil 3397380658 3428166037 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   376 350 nil nil))
 (var_names_TCC30 0
  (var_names_TCC30-1 nil 3397380658 3428166037 ("" (termination-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[Body -> nat]" Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (size const-decl "nat" BodyFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   337 320 nil nil))
 (var_names_TCC31 0
  (var_names_TCC31-1 nil 3397380658 3428166038
   ("" (skosimp*)
    (("" (typepred "fs!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (f: Decl): fs!1(f) AND name(f) = n})) :
                              f!1(choose({f : Decl | fs!1(f) AND name(f) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (n!1 skolem-const-decl
     "({n: Name | EXISTS (f: Decl[Name]): fs!1(f) AND name(f) = n})"
     ProgramFunctions nil)
    (f!2 skolem-const-decl "Decl[Name]" ProgramFunctions nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl
     "({n: Name | EXISTS (f: Decl[Name]): fs!1(f) AND name(f) = n})"
     ProgramFunctions nil)
    (x2!1 skolem-const-decl
     "({n: Name | EXISTS (f: Decl[Name]): fs!1(f) AND name(f) = n})"
     ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (f!2 skolem-const-decl "Decl[Name]" ProgramFunctions nil)
    (f!2 skolem-const-decl "Decl[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (fs!1 skolem-const-decl "finite_set[Decl[Name]]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   461 440 t nil))
 (var_names_TCC32 0
  (var_names_TCC32-1 nil 3397380658 3428166038
   ("" (skosimp*) (("" (expand "defined?") (("" (propax) nil nil)) nil)) nil)
   proved ((defined? const-decl "boolean" ValProp nil)) 20 20 t nil))
 (var_names_union 0
  (var_names_union-1 nil 3396846432 3428166038
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil)
   proved
   ((Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil))
   583 560 t shostak))
 (var_names_CaseJML_set2list 0
  (var_names_CaseJML_set2list-1 nil 3401699638 3428166039
   ("" (skolem 1 (_ "n!1"))
    ((""
      (use "wf_induction[finite_set[[Expr, Stmt]], LAMBDA(x, y : finite_set[[Expr, Stmt]]) : card(x) < card(y)]")
      (("1" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "set2list" 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (skosimp*)
                    (("1" (rewrite "var_names" 1)
                      (("1" (iff)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (skosimp*)
                            (("2" (auto-rewrite "empty?" "member")
                              (("2" (assert) (("2" (inst? -3) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "var_names" 2)
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (use "card_remove[[Expr, Stmt]]")
                                (("2" (assert)
                                  (("2" (hide -1)
                                    (("2" (replace -1 :hide? t)
                                      (("2"
                                        (iff)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (case
                                               "var_names(Proj_1(choose(x!1)))(n!1)")
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "var_names(Proj_2(choose(x!1)))(n!1)")
                                                  (("1"
                                                    (inst?)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst 3 "x!2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite "remove")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "nonempty?")
                                                (("3" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst 3 "x!2")
                                              (("2"
                                                (rewrite "remove")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 3)
                                                    (("1" (assert) nil nil)
                                                     ("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_card[[Expr, Stmt]]") nil nil))
      nil))
    nil)
   proved
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (list type-decl nil list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil) (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (remove const-decl "set" sets nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (wf_card formula-decl nil WF_Card nil))
   525 470 t nil))
 (var_names_CaseJML_branches 0
  (var_names_CaseJML_branches-1 nil 3410179983 3428166039
   ("" (induct "branches")
    (("1" (skosimp*) (("1" (grind) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "var_names" 1)
        (("2" (expand "member" -2)
          (("2" (auto-rewrite "union" "member")
            (("2" (assert)
              (("2" (split -2)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (inst?)
                  (("2" (assert)
                    (("2" (split -2)
                      (("1" (flatten) nil nil) ("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   141 130 t shostak))
 (getFieldDecls_TCC1 0
  (getFieldDecls_TCC1-3 nil 3391148557 3428166117
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[Decl]({f : Decl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (expand "emptyset")
              (("2" (case-replace "{f : Decl | FALSE} = emptyset[Decl]")
                (("1" (use "finite_emptyset[Decl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3"
                (case-replace "({f: Decl |
    EXISTS (c: Class): add(e!1, S!1)(c) AND fields(c)(f)}) = union({f : Decl | fields(e!1)(f)}, {f : Decl | EXISTS (c : Class) : S!1(c) AND fields(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[Decl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "fields(e!1)")
                        (("1"
                          (case-replace
                           "fields(e!1) = {f : Decl | fields(e!1)(f)}")
                          (("1" (assert) nil nil)
                           ("2" (apply-extensionality :hide? t) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (expand* "union" "add" "member")
                    (("2" (apply-extensionality :hide? t)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil)
                           ("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (e!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (S!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set[Class]"
     ProgramFunctions nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (finite_set_induction formula-decl nil finite_sets_inductions
     "finite_sets/"))
   5041 380 t nil)
  (getDecls_TCC1-2 nil 3390902649 3391148163
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[Decl]({f : Decl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: Decl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : Decl | fields(t!1)(f)}, {f : Decl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[Decl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "fields(t!1)")
                        (("1"
                          (case-replace
                           "fields(t!1) = {f : Decl[Name] | fields(t!1)(f)}")
                          (("1" (apply-extensionality 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand* "union" "add" "member")
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil)
                           ("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3" (case-replace "{f : Decl | FALSE} = emptyset[Decl]")
                (("1" (use "finite_emptyset[Decl]") nil nil)
                 ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   412 330 t nil)
  (getFieldDecls_TCC1-1 nil 3390821142 3390894974
   ("" (skolem!)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite") (("" (skolem!) (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked nil 5557840 390 t nil))
 (getLocalDecls_TCC1 0
  (getLocalDecls_TCC1-2 nil 3390903916 3428166040
   ("" (skosimp*)
    (("" (use "finite_set_induction[Method]")
      ((""
        (inst -1
         "LAMBDA(M : finite_set[Method]) : is_finite[Decl]({l: Decl |EXISTS(m : Method) : M(m) AND (lvars(m)(l) OR l = arg(m))})")
        (("" (split -1)
          (("1" (inst?) nil nil)
           ("2" (hide 2)
            (("2" (expand "emptyset")
              (("2" (case-replace "{f : Decl | FALSE} = emptyset[Decl]")
                (("1" (use "finite_emptyset[Decl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3"
                (case-replace "{l: Decl | EXISTS (m: Method):
     add(e!1, S!1)(m) AND (lvars(m)(l) OR l = arg(m))} = union(lvars(e!1), union(singleton(arg(e!1)), {l : Decl | EXISTS (m: Method): S!1(m) AND (lvars(m)(l) OR l = arg(m))}))"
                 :hide? t)
                (("1" (use "finite_union[Decl]")
                  (("1" (use "finite_union[Decl]") nil nil)) nil)
                 ("2" (hide -1 2)
                  (("2" (expand* "union" "add" "singleton" "member")
                    (("2" (apply-extensionality :hide? t)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil)
                           ("3" (inst?) (("3" (assert) nil nil)) nil)
                           ("4" (skosimp*)
                            (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Decl type-eq-decl nil Program nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set[Method]"
     ProgramFunctions nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil) (member const-decl "bool" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (S!1 skolem-const-decl "finite_set[Method]" ProgramFunctions nil)
    (e!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   393 380 t nil)
  (getLocalDecls_TCC1-1 nil 3390821142 3390821234 ("" (subtype-tcc) nil nil)
   unchecked nil 605 450 nil nil))
 (getLocalDecls_TCC2 0
  (getLocalDecls_TCC2-2 nil 3401620970 3428166040
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[Decl]({l : Decl | EXISTS (c : Class) : C(c) AND getLocalDecls(c)(l)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (expand "emptyset")
              (("2" (case-replace "{f : Decl | FALSE} = emptyset[Decl]")
                (("1" (use "finite_emptyset[Decl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3"
                (case-replace
                 " {l: Decl | EXISTS (c: Class): add(e!1, S!1)(c) AND getLocalDecls(c)(l)}                    = union({l : Decl | getLocalDecls(e!1)(l)},{l : Decl | EXISTS(c : Class) : S!1(c) AND getLocalDecls(c)(l)})"
                 :hide? t)
                (("1" (use "finite_union[Decl]")
                  (("1" (typepred "getLocalDecls(e!1)")
                    (("1" (assert)
                      (("1" (hide -2 2)
                        (("1"
                          (case-replace
                           "{l: Decl[Name] | getLocalDecls(e!1)(l)} = getLocalDecls(e!1)"
                           :hide? t)
                          (("1" (apply-extensionality :hide? t) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (auto-rewrite "union" "member" "add" "singleton")
                    (("2" (assert)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (skosimp*)
                              (("1" (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (inst?) nil nil)
                             ("3" (skosimp*)
                              (("3" (inst?) (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set[Class]"
     ProgramFunctions nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FALSE const-decl "bool" booleans nil) (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (e!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (S!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   395 340 t nil)
  (getLocalDecls_TCC2-1 nil 3401620807 3401620866 ("" (subtype-tcc) nil nil)
   unfinished nil 249 249 nil nil))
 (arg_in_getLocalDecls 0
  (arg_in_getLocalDecls-1 nil 3398660837 3428166040
   ("" (skosimp*)
    (("" (expand "getLocalDecls")
      (("" (expand "getLocalDecls")
        (("" (apply (repeat (inst?)))
          (("" (assert) (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil))
   26 20 t shostak))
 (getGhostDecls_TCC1 0
  (getGhostDecls_TCC1-3 nil 3391148598 3428166135
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[Decl]({f : Decl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (expand "emptyset")
              (("2" (case-replace "{f : Decl | FALSE} = emptyset[Decl]")
                (("1" (use "finite_emptyset[Decl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3"
                (case-replace
                 "({f: Decl | EXISTS (c: Class): add(e!1, S!1)(c) AND ghost_vars(c)(f)}) = union({f : Decl | ghost_vars(e!1)(f)}, {f : Decl | EXISTS (c : Class) : S!1(c) AND ghost_vars(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[Decl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "ghost_vars(e!1)")
                        (("1"
                          (case-replace
                           "ghost_vars(e!1) = {f : Decl | ghost_vars(e!1)(f)}")
                          (("1" (assert) nil nil)
                           ("2" (apply-extensionality :hide? t) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (expand* "union" "add" "member")
                    (("2" (apply-extensionality :hide? t)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (ground)
                              (("1" (inst?)
                                (("1" (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil)
                           ("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (e!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (S!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set[Class]"
     ProgramFunctions nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (finite_set_induction formula-decl nil finite_sets_inductions
     "finite_sets/"))
   3473 440 t nil)
  (getGhostDecls_TCC1-2 nil 3390903999 3391148164
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[Decl]({f : Decl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: Decl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : Decl | ghost_vars(t!1)(f)}, {f : Decl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[Decl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "ghost_vars(t!1)")
                        (("1"
                          (case-replace
                           "ghost_vars(t!1) = {f : Decl | ghost_vars(t!1)(f)}")
                          (("1" (apply-extensionality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand "union")
                      (("2" (expand "add")
                        (("2" (expand "member")
                          (("2" (iff)
                            (("2" (prop)
                              (("1" (skosimp*)
                                (("1" (split -1)
                                  (("1" (assert) nil nil)
                                   ("2" (inst?) (("2" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil)
                               ("3" (skosimp*)
                                (("3" (inst?) (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3" (case-replace "{f : Decl | FALSE} = emptyset[Decl]")
                (("1" (use "finite_emptyset[Decl]") nil nil)
                 ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   436 310 t nil)
  (getGhostDecls_TCC1-1 nil 3390821142 3390821234 ("" (subtype-tcc) nil nil)
   unchecked nil 474 450 nil nil))
 (declared_var_names_TCC1 0
  (declared_var_names_TCC1-1 nil 3394869665 3428166040
   ("" (skosimp)
    ((""
      (case-replace "{n: Name |
              var_names(getFieldDecls(p!1))(n) OR
              var_names(getLocalDecls(p!1))(n) OR
              var_names(getGhostDecls(p!1))(n)} =
              union(union(var_names(getFieldDecls(p!1)), var_names(getLocalDecls(p!1))), var_names(getGhostDecls(p!1)))")
      (("1" (hide -1) (("1" (use "finite_union[Name]") nil nil)) nil)
       ("2" (hide 2) (("2" (expand* "union" "member") nil nil)) nil))
      nil))
    nil)
   proved
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil))
   38 40 t nil))
 (ext_declared_var_names_TCC1 0
  (ext_declared_var_names_TCC1-1 nil 3397554464 3428166041
   ("" (skosimp*)
    (("" (use "finite_union[Name]")
      (("1" (expand "is_finite")
        (("1" (inst 1 "1" "LAMBDA(n : ({n: Name | n = This[Name]})) : 0")
          (("1" (expand "injective?") (("1" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (use "declared_var_names_TCC1") nil nil))
      nil))
    nil)
   proved
   ((finite_union judgement-tcc nil finite_sets nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (p!1 skolem-const-decl "PreProgram[Name]" ProgramFunctions nil)
    (This const-decl "Name" Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (declared_var_names_TCC1 subtype-tcc nil ProgramFunctions nil))
   237 220 t nil))
 (class_names_TCC1 0
  (class_names_TCC1-1 nil 3390821142 3428166041
   ("" (skolem!)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite")
        (("" (skolem!)
          ((""
            (inst 2 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (c : Class): classes(p!1)(c) AND name(c) = n})) :
                        f!1(choose({c : Class | classes(p!1)(c) AND name(c) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((empty? const-decl "bool" sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (n!1 skolem-const-decl
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     ProgramFunctions nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     ProgramFunctions nil)
    (x2!1 skolem-const-decl
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "PreProgram[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   465 450 t nil))
 (method_names_TCC1 0
  (method_names_TCC1-1 nil 3390821142 3428166042
   ("" (skosimp*)
    (("" (typepred "methods(c!1)")
      (("" (expand "is_finite")
        (("" (skolem!)
          ((""
            (inst 1 "N!1"
             "LAMBDA (n: {n: Name | EXISTS (m: Method): classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}):
                     f!1(choose({m : Method | methods(c!1)(m) AND name(m) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!)
                        (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!)
                        (("3" (inst?) (("3" (prop) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!) (("2" (inst?) (("2" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (n!1 skolem-const-decl "{n: Name |
         EXISTS (m: Method):
           classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}"
     ProgramFunctions nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({n: Name |
    EXISTS (m: Method[Name]):
      classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n})"
     ProgramFunctions nil)
    (x2!1 skolem-const-decl "({n: Name |
    EXISTS (m: Method[Name]):
      classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n})"
     ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (m!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (m!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (p!1 skolem-const-decl "PreProgram[Name]" ProgramFunctions nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   468 450 t nil))
 (methods_TCC1 0
  (methods_TCC1-1 nil 3392356310 3428166042
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1 "LAMBDA(C : finite_set[Class]) : is_finite[Method[Name]]
                ({m: Method[Name] |
                    EXISTS (c: Class[Name]): C(c) AND methods(c)(m)})")
        (("" (assert)
          (("" (split -1)
            (("1" (inst -1 "classes(p!1)") nil nil)
             ("2" (hide 2)
              (("2" (expand "emptyset")
                (("2"
                  (case-replace
                   "{m: Method[Name] | FALSE} = emptyset[Method[Name]]")
                  (("1" (use "finite_emptyset[Method[Name]]") nil nil)
                   ("2" (apply-extensionality :hide? t)
                    (("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skosimp*)
                (("3"
                  (case-replace
                   "({m: Method[Name] | EXISTS (c: Class[Name]): add(e!1, S!1)(c) AND methods(c)(m)})
             = union({m : Method[Name] | methods(e!1)(m)}, {m : Method[Name] | EXISTS (c : Class[Name]) : S!1(c) AND methods(c)(m)})"
                   :hide? t)
                  (("1" (use "finite_union[Method[Name]]")
                    (("1" (hide -1 2)
                      (("1" (typepred "methods(e!1)")
                        (("1"
                          (case-replace
                           "methods(e!1) = {m : Method[Name] | methods(e!1)(m)}"
                           :hide? t)
                          (("1" (grind) nil nil)
                           ("2" (hide -1 2)
                            (("2" (grind)
                              (("2" (apply-extensionality :hide? t) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand* "union" "add" "member")
                      (("2" (apply-extensionality :hide? t)
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (skosimp*)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (inst?) nil nil)
                             ("3" (skosimp*)
                              (("3" (inst?) (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set[Class]"
     ProgramFunctions nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) (union const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (e!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_emptyset name-judgement "finite_set[Method]" ProgramFunctions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   412 380 t nil))
 (get_class_TCC1 0
  (get_class_TCC1-1 nil 3390821142 3428166042 ("" (subtype-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   53 60 nil nil))
 (get_class_in_classes 0
  (get_class_in_classes-1 nil 3400562445 3428166042
   ("" (skosimp*)
    (("" (expand "get_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved ((get_class const-decl "lift[Class]" ProgramFunctions nil)) 65 40 t
   shostak))
 (lookup_mthd_TCC1 0
  (lookup_mthd_TCC1-1 nil 3396591590 3428166042 ("" (subtype-tcc) nil nil)
   proved
   ((Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   74 70 nil nil))
 (lookup_mthd_TCC2 0
  (lookup_mthd_TCC2-1 nil 3396591590 3428166042
   ("" (skosimp*)
    (("" (expand "every")
      (("" (expand "methods")
        (("" (inst 1 "down[Class[Name]](get_class(p!1)(tgt!1))")
          (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil))
   73 80 t nil))
 (lookup_mthd_in_methods_class 0
  (lookup_mthd_in_methods_class-1 nil 3400562626 3428166042
   ("" (skosimp*)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (assert)
          (("" (split -2) (("1" (assert) nil nil) ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved ((lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil))
   60 40 t shostak))
 (lookup_inv_TCC1 0
  (lookup_inv_TCC1-1 nil 3412066954 3428166042 ("" (subtype-tcc) nil nil)
   proved
   ((class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil))
   31 30 nil nil))
 (var_lookup_TCC1 0
  (var_lookup_TCC1-1 nil 3410864328 3428166042 ("" (subtype-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil))
   21 30 nil nil))
 (proper_subterm_sequence 0
  (proper_subterm_sequence-2 nil 3397378089 3428166045
   ("" (induct "c3")
    (("1" (skosimp*)
      (("1" (expand "<<" -3)
        (("1" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst?)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*) (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil)
     ("3" (skosimp*)
      (("3" (expand "<<" -2)
        (("3" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "<<" -3)
        (("4" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "<<" -3)
        (("5" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil)
     ("8" (skosimp*)
      (("8" (expand "<<" -2)
        (("8" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp*)
      (("9" (expand "<<" -4)
        (("9" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil)) nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp*)
      (("10" (expand "<<" -3)
        (("10" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp*) (("11" (expand "<<") (("11" (propax) nil nil)) nil))
      nil)
     ("12" (skosimp*)
      (("12" (rewrite "every_is_forall[[Expr, Stmt]]")
        (("12" (expand "<<" -2)
          (("12" (expand "<<" 1)
            (("12" (rewrite "some_is_exists[[Expr, Stmt]]")
              (("12" (rewrite "some_is_exists[[Expr, Stmt]]")
                (("12" (rewrite "some_is_exists[[Expr, Stmt]]")
                  (("12" (skosimp*)
                    (("12" (inst?)
                      (("12" (assert)
                        (("12" (flatten)
                          (("12" (split 1)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (split -4)
                                  (("1" (replace -1 :dir rl)
                                    (("1" (expand "<<" 1)
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (inst? -2)
                                    (("2" (assert) (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3" (replace -1 :dir rl)
                                    (("3" (expand "<<" 1)
                                      (("3" (propax) nil nil)) nil))
                                    nil)
                                   ("4" (inst? -3)
                                    (("4" (assert) (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?)
                              (("2" (assert)
                                (("2" (split -4)
                                  (("1" (replace -1 :dir rl)
                                    (("1" (expand "<<" 1)
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (inst? -2)
                                    (("2" (assert) (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3" (replace -1 :dir rl)
                                    (("3" (expand "<<" 1)
                                      (("3" (propax) nil nil)) nil))
                                    nil)
                                   ("4" (inst? -3)
                                    (("4" (assert) (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (skosimp*)
      (("13" (expand "<<" -4)
        (("13" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil)) nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp*)
      (("14" (expand "<<" -3)
        (("14" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (skosimp*)
      (("15" (expand "<<" -2)
        (("15" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (grind) nil nil)
     ("17" (skosimp*)
      (("17" (expand "<<" -2)
        (("17" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (grind) nil nil)
     ("19" (skosimp*)
      (("19" (expand "<<" -4)
        (("19" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil)) nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (skosimp*)
      (("20" (expand "<<" -3)
        (("20" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (skosimp*)
      (("21" (expand "<<" -2)
        (("21" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]" Body_adt
     nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   2068 1830 t nil)
  (proper_subterm_sequence-1 nil 3396269350 3396593333
   ("" (induct "c3")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "<<" -3)
        (("2" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst?)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) (("3" (expand "<<") (("3" (propax) nil nil)) nil)) nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skosimp*)
      (("6" (expand "<<" -2)
        (("6" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp*)
      (("7" (expand "<<" -3)
        (("7" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*)
      (("8" (expand "<<" -3)
        (("8" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (grind) nil nil) ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (skosimp*)
      (("12" (expand "<<" -2)
        (("12" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (skosimp*)
      (("13" (expand "<<" -2)
        (("13" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp*)
      (("14" (expand "<<" -4)
        (("14" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil)) nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (skosimp*)
      (("15" (expand "<<" -3)
        (("15" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (skosimp*)
      (("16" (expand "<<" -2)
        (("16" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (skosimp*)
      (("17" (expand "<<" -2)
        (("17" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (skosimp*)
      (("18" (rewrite "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (expand "<<" -2)
          (("18" (expand "<<" 1)
            (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
                (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
                  (("18" (skosimp*)
                    (("18" (inst?)
                      (("18" (assert)
                        (("18" (flatten)
                          (("18" (split 1)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (split -4)
                                  (("1" (replace -1 :dir rl)
                                    (("1" (expand "<<" 1)
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (inst? -2)
                                    (("2" (assert) (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3" (replace -1 :dir rl)
                                    (("3" (expand "<<" 1)
                                      (("3" (propax) nil nil)) nil))
                                    nil)
                                   ("4" (inst? -3)
                                    (("4" (assert) (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?)
                              (("2" (assert)
                                (("2" (split -4)
                                  (("1" (replace -1 :dir rl)
                                    (("1" (expand "<<" 1)
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (inst? -2)
                                    (("2" (assert) (("2" (flatten) nil nil))
                                      nil))
                                    nil)
                                   ("3" (replace -1 :dir rl)
                                    (("3" (expand "<<" 1)
                                      (("3" (propax) nil nil)) nil))
                                    nil)
                                   ("4" (inst? -3)
                                    (("4" (assert) (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (skosimp*)
      (("19" (expand "<<" -4)
        (("19" (split -4)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil)) nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (skosimp*)
      (("20" (expand "<<" -3)
        (("20" (split -3)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (skosimp*)
      (("21" (expand "<<" -2)
        (("21" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("22" (grind) nil nil)
     ("23" (skosimp*)
      (("23" (expand "<<" -2)
        (("23" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (grind) nil nil)
     ("25" (skosimp*)
      (("25" (expand "<<" -4)
        (("25" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (replace -1 :dir rl)
            (("5" (expand "<<" 1)
              (("5" (expand "<<" 1) (("5" (propax) nil nil)) nil)) nil))
            nil)
           ("6" (inst? -4)
            (("6" (assert)
              (("6" (flatten)
                (("6" (expand "<<" 1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("26" (skosimp*)
      (("26" (expand "<<" -3)
        (("26" (split -)
          (("1" (replace -1 :dir rl)
            (("1" (expand "<<" 1)
              (("1" (expand "<<" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (inst? -2)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "<<" 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (replace -1 :dir rl)
            (("3" (expand "<<" 1)
              (("3" (expand "<<" 1) (("3" (propax) nil nil)) nil)) nil))
            nil)
           ("4" (inst? -3)
            (("4" (assert)
              (("4" (flatten)
                (("4" (expand "<<" 1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((some_is_exists formula-decl nil listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1422 1422 t nil))
 (proper_subterm_set_clause_sequence 0
  (proper_subterm_set_clause_sequence-2 nil 3410548822 3428166045
   ("" (skosimp*)
    (("" (expand "proper_subterm_set_clause")
      (("" (lemma "proper_subterm_sequence")
        (("" (inst-cp - "c1!1" "c2!1" "pre_set(m!1)(Const(Unit))")
          (("1" (inst-cp - "c1!1" "c2!1" "post_set(m!1)(Const(Unit))")
            (("1" (inst - "c1!1" "c2!1" "exc_set(m!1)(Throwable)")
              (("1" (ground) nil nil)) nil)
             ("2" (expand "defined?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (expand "defined?") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((proper_subterm_set_clause const-decl "boolean" ProgramFunctions nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil) (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (proper_subterm_sequence formula-decl nil ProgramFunctions nil))
   53 60 t nil)
  (proper_subterm_set_clause_sequence-1 nil 3396269362 3410548730
   ("" (skosimp*)
    (("" (expand "proper_subterm_set_clause")
      (("" (lemma "proper_subterm_sequence")
        (("" (inst-cp - "c1!1" "c2!1" "pre_set(m!1)(Unit)")
          (("1" (inst-cp - "c1!1" "c2!1" "post_set(m!1)(Unit)")
            (("1" (inst - "c1!1" "c2!1" "exc_set(m!1)(Throwable)")
              (("1" (ground) nil nil)) nil)
             ("2" (expand "defined?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (expand "defined?") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((proper_subterm_set_clause const-decl "boolean" ProgramFunctions nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil) (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (proper_subterm_sequence formula-decl nil ProgramFunctions nil))
   75 50 t nil))
 (proper_subterm_is_transitive 0
  (proper_subterm_is_transitive-1 nil 3396272071 3428166046
   ("" (induct "c3")
    (("1" (skosimp*)
      (("1" (expand "<<" 1)
        (("1" (expand "<<" -4)
          (("1" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skosimp*)
      (("4" (expand "<<" 1)
        (("4" (expand "<<" -4)
          (("4" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "<<" 1)
        (("5" (expand "<<" -4)
          (("5" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (skosimp*)
      (("9" (expand "<<" 1)
        (("9" (expand "<<" -5)
          (("9" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil)
             ("5" (inst -4 "c1!1" "c2!1") (("5" (assert) nil nil)) nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp*)
      (("10" (expand "<<" 1)
        (("10" (expand "<<" -4)
          (("10" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (grind) nil nil)
     ("12" (skosimp*)
      (("12" (rewrite "every_is_forall[[Expr, Stmt]]")
        (("12" (expand "<<" (-3 1))
          (("12" (rewrite "some_is_exists[[Expr, Stmt]]")
            (("12" (rewrite "some_is_exists[[Expr, Stmt]]")
              (("12" (skosimp*)
                (("12" (inst?)
                  (("12" (assert)
                    (("12" (flatten)
                      (("12" (inst 1 "x!1")
                        (("12" (assert)
                          (("12" (split -5)
                            (("1" (assert) nil nil)
                             ("2" (inst -2 "c1!1" "c2!1")
                              (("2" (assert) nil nil)) nil)
                             ("3" (assert) nil nil)
                             ("4" (inst -3 "c1!1" "c2!1")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (skosimp*)
      (("13" (expand "<<" 1)
        (("13" (expand "<<" -5)
          (("13" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil)
             ("5" (assert) nil nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp*)
      (("14" (expand "<<" 1)
        (("14" (expand "<<" -4)
          (("14" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (grind) nil nil) ("16" (grind) nil nil) ("17" (grind) nil nil)
     ("18" (grind) nil nil)
     ("19" (skosimp*)
      (("19" (expand "<<" 1)
        (("19" (expand "<<" -5)
          (("19" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil)
             ("5" (assert) nil nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (skosimp*)
      (("20" (expand "<<" 1)
        (("20" (expand "<<" -4)
          (("20" (split -)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil)
             ("3" (assert) nil nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (skosimp*)
      (("21" (expand "<<" 1)
        (("21" (expand "<<" -3)
          (("21" (split -3)
            (("1" (assert) nil nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((some_is_exists formula-decl nil listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   1211 1020 t shostak))
 (subterm_subset_varnames 0
  (subterm_subset_varnames-1 nil 3396779500 3428166050
   ("" (auto-rewrite "union" "member" "subset?" "emptyset" "add")
    (("" (induct "b2")
      (("1"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -3) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert)))
        nil nil)
       ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -3) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert)))
        nil nil)
       ("5"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -3) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert)))
        nil nil)
       ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
       ("9"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -4) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert) (assert) (inst? -4 :where -1)
                (assert) (inst? -4)))
        (("9" (assert) nil nil)) nil)
       ("10"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -3) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert) (assert)))
        nil nil)
       ("11" (grind) nil nil)
       ("12" (skosimp*)
        (("12" (expand "var_names" 1 2)
          (("12" (assert)
            (("12" (skosimp*)
              (("12" (split 1)
                (("1" (expand "<<" -3)
                  (("1" (rewrite "some_is_exists")
                    (("1" (skosimp*)
                      (("1" (expand "member")
                        (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (rewrite "every_is_forall")
                    (("2" (expand "<<" -2)
                      (("2" (rewrite "some_is_exists")
                        (("2" (skosimp*)
                          (("2" (inst -1 "x!2")
                            (("2" (split -1)
                              (("1"
                                (case "FORALL(l : list[[Expr, Stmt]]) : member(x!2, l) IMPLIES var_names(CaseJML(l))(x!1)")
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (split -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst -3 "b1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst? -3)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -4 "b1!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst? -4)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (induct "l")
                                  (("1" (grind) nil nil)
                                   ("2" (skosimp*)
                                    (("2" (expand "member" -2)
                                      (("2"
                                        (expand "var_names" 1)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -6)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (inst -4 "b1!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst? -4)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (assert) nil nil)
                                                 ("4"
                                                  (inst -5 "b1!1")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (inst? -5)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("13"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -4) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert) (assert) (assert)
                (inst? -4 :where -1) (assert) (inst? -4) (assert)))
        nil nil)
       ("14"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -3) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert)))
        nil nil)
       ("15"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -2) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert)))
        nil nil)
       ("16" (grind) nil nil)
       ("17"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -2) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert)))
        nil nil)
       ("18" (grind) nil nil)
       ("19"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -4) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert) (assert) (assert)
                (inst? -4 :where -1) (assert) (inst? -4) (assert)))
        nil nil)
       ("20"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -3) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert) (assert) (inst? -3 :where -1)
                (assert) (inst? -3) (assert)))
        nil nil)
       ("21"
        (apply (then (skosimp*) (expand "var_names" 1 2) (assert) (skosimp*)
                (expand "<<" -2) (split -) (assert) (inst? -2 :where -1)
                (assert) (inst? -2) (assert)))
        nil nil))
      nil))
    nil)
   proved
   ((Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body_induction formula-decl nil Body_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (some_is_exists formula-decl nil listfuncs nil))
   4023 3780 t shostak))
 (subterm_subset_varnames2 0
  (subterm_subset_varnames2-1 nil 3410178763 3428166051
   ("" (auto-rewrite "union" "member" "subset?" "emptyset" "add")
    (("" (induct "b2")
      (("1" (skosimp*)
        (("1" (expand "var_names" 1 2)
          (("1" (assert)
            (("1" (skosimp*)
              (("1" (expand "subterm" -3)
                (("1" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -4)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst? -2 :where -1)
                    (("2" (assert)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil)
       ("3" (skosimp*)
        (("3" (expand "var_names" 1 2)
          (("3" (expand "subterm" -2)
            (("3" (split -2)
              (("1" (replace -1)
                (("1" (expand "var_names" 1 1)
                  (("1" (assert) (("1" (skosimp*) nil nil)) nil)) nil))
                nil)
               ("2" (inst?) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skosimp*)
        (("4" (expand "var_names" 1 2)
          (("4" (assert)
            (("4" (skosimp*)
              (("4" (expand "subterm" -3)
                (("4" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -4)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst? -2 :where -1)
                    (("2" (assert)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skosimp*)
        (("5" (expand "var_names" 1 2)
          (("5" (assert)
            (("5" (skosimp*)
              (("5" (expand "subterm" -3)
                (("5" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -4)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst? -2 :where -1)
                    (("2" (assert)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (grind) nil nil) ("7" (grind) nil nil)
       ("8" (skosimp*)
        (("8" (expand "var_names" 1 2)
          (("8" (assert)
            (("8" (skosimp*)
              (("8" (expand "subterm" -2)
                (("8" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -3)
                      (("1" (expand "add")
                        (("1" (split -3)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst? -2 :where -1)
                    (("2" (assert)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skosimp*)
        (("9" (expand "var_names" 1 2)
          (("9" (assert)
            (("9" (skosimp*)
              (("9" (expand "subterm" -4)
                (("9" (split -)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (expand "var_names" -5) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst? -2 :where -1)
                    (("2" (assert)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("4" (assert)
                    (("4" (inst? -4 :where -1)
                      (("4" (assert)
                        (("4" (inst? -4) (("4" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skosimp*)
        (("10" (expand "var_names" 1 2)
          (("10" (assert)
            (("10" (skosimp*)
              (("10" (expand "subterm" -3)
                (("10" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -4)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst? -2 :where -1)
                      (("2" (assert)
                        (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("11" (grind) nil nil)
       ("12" (skosimp*)
        (("12" (expand "subterm" -2)
          (("12" (split -2)
            (("1" (replace -1) (("1" (assert) (("1" (skosimp*) nil nil)) nil))
              nil)
             ("2" (rewrite "some_is_exists")
              (("2" (skosimp*)
                (("2" (rewrite "every_is_forall")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (split -2)
                          (("1" (inst -3 "b1!1")
                            (("1" (assert)
                              (("1" (skosimp*)
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (use "var_names_CaseJML_branches")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -4 "b1!1")
                            (("2" (assert)
                              (("2" (skosimp*)
                                (("2" (inst? -4)
                                  (("2" (assert)
                                    (("2" (use "var_names_CaseJML_branches")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("13" (skosimp*)
        (("13" (expand "var_names" 1 2)
          (("13" (assert)
            (("13" (skosimp*)
              (("13" (expand "subterm" -4)
                (("13" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -5)
                      (("1" (assert)
                        (("1" (split -5)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst? -2 :where -1)
                      (("2" (assert)
                        (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("4" (assert)
                    (("4" (inst? -4 :where -1)
                      (("4" (assert)
                        (("4" (inst? -4) (("4" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("14" (skosimp*)
        (("14" (expand "var_names" 1 2)
          (("14" (assert)
            (("14" (skosimp*)
              (("14" (expand "subterm" -3)
                (("14" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -4)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst? -2 :where -1)
                    (("2" (assert)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("15" (skosimp*)
        (("15" (expand "var_names" 1 2)
          (("15" (assert)
            (("15" (skosimp*)
              (("15" (expand "subterm" -2)
                (("15" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -3)
                      (("1" (assert)
                        (("1" (split -3)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst? -2 :where -1)
                      (("2" (assert)
                        (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("16" (grind) nil nil)
       ("17" (skosimp*)
        (("17" (expand "var_names" 1 2)
          (("17" (assert)
            (("17" (skosimp*)
              (("17" (expand "subterm" -2)
                (("17" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -3) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst? -2 :where -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("18" (grind) nil nil)
       ("19" (skosimp*)
        (("19" (expand "var_names" 1 2)
          (("19" (assert)
            (("19" (skosimp*)
              (("19" (expand "subterm" -4)
                (("19" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -5)
                      (("1" (assert)
                        (("1" (split -5)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst? -2 :where -1)
                      (("2" (assert)
                        (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("4" (assert)
                    (("4" (inst? -4 :where -1)
                      (("4" (assert)
                        (("4" (inst? -4) (("4" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("20" (skosimp*)
        (("20" (expand "var_names" 1 2)
          (("20" (assert)
            (("20" (skosimp*)
              (("20" (expand "subterm" -3)
                (("20" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -4)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst? -2 :where -1)
                      (("2" (assert)
                        (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (inst? -3 :where -1)
                      (("3" (assert)
                        (("3" (inst? -3) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("21" (skosimp*)
        (("21" (expand "var_names" 1 2)
          (("21" (assert)
            (("21" (skosimp*)
              (("21" (expand "subterm" -2)
                (("21" (split -)
                  (("1" (replace -1)
                    (("1" (expand "var_names" -3) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst? -2 :where -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body_induction formula-decl nil Body_adt nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (var_names_CaseJML_branches formula-decl nil ProgramFunctions nil))
   1474 1290 t shostak))
 (subterm_subset_of_var 0
  (subterm_subset_of_var-1 nil 3396779041 3428166053
   ("" (skosimp*)
    (("" (use "subterm_subset_varnames")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   proved
   ((subterm_subset_varnames formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   1338 400 t shostak))
 (proper_subterm_implies_subterm 0
  (proper_subterm_implies_subterm-1 nil 3403263109 3428166054
   ("" (induct "b2")
    (("1"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm")
              (flatten)))
      (("1" (assert) nil nil)) nil)
     ("2" (skosimp*) (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil)
     ("3"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("4"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("5"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("6"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      (("6" (expand "<<") (("6" (propax) nil nil)) nil)) nil)
     ("7" (apply (then (skosimp*) (expand* "<<" "subterm") (assert))) nil nil)
     ("8"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("9"
      (apply (then (skosimp*) (expand "<<" -4) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("10"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("11" (grind) nil nil)
     ("12" (induct "CaseJML1_var")
      (("1" (skosimp*)
        (("1" (expand "<<" -2)
          (("1" (rewrite "some_is_exists")
            (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "every" -2)
          (("2" (flatten)
            (("2" (expand "<<" -5)
              (("2" (expand "subterm" 1)
                (("2" (rewrite "some_is_exists")
                  (("2" (rewrite "some_is_exists")
                    (("2" (flatten)
                      (("2" (skosimp*)
                        (("2" (inst 2 "x!1")
                          (("2" (assert)
                            (("2" (rewrite "every_is_forall")
                              (("2" (expand "member" -5)
                                (("2" (inst -2 "b1!1")
                                  (("2" (inst -3 "b1!1")
                                    (("2" (inst -4 "x!1")
                                      (("2"
                                        (split -6)
                                        (("1"
                                          (expand "subterm")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (split -6)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst? -6)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "subterm")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (split -6)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst? -7)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13"
      (apply (then (skosimp*) (expand "<<" -4) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("14"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("15"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("16" (apply (then (skosimp*) (expand* "<<" "subterm") (assert))) nil
      nil)
     ("17"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("18" (apply (then (skosimp*) (expand* "<<" "subterm") (assert))) nil
      nil)
     ("19"
      (apply (then (skosimp*) (expand "<<" -4) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("20"
      (apply (then (skosimp*) (expand "<<" -3) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil)
     ("21"
      (apply (then (skosimp*) (expand "<<" -2) (expand "subterm" 1) (assert)
              (flatten) (repeat (inst?)) (assert) (expand "subterm") (flatten)
              (assert)))
      nil nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   1039 900 t shostak))
 (subterm_transitive 0
  (subterm_transitive-2 nil 3403264428 3428166055
   ("" (induct "b3")
    (("1"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -4)
              (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("2" (apply (then (skosimp*) (expand "subterm") (assert))) nil nil)
     ("3"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -3)
              (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("4"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -4)
              (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("5"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -4)
              (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("6" (apply (then (skosimp*) (expand "subterm") (assert))) nil nil)
     ("7" (apply (then (skosimp*) (expand "subterm") (assert))) nil nil)
     ("8"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -3)
              (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("9"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -5)
              (flatten)
              (branch (split -5)
               ((then (expand "subterm" -5) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))
                (then (inst -4 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("10"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -4)
              (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("11" (grind) nil nil)
     ("12" (induct "CaseJML1_var")
      (("1" (skosimp*)
        (("1" (expand "subterm" -3)
          (("1" (rewrite "some_is_exists")
            (("1" (expand "member")
              (("1" (replace -3) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "subterm" -4)
          (("2" (expand "subterm" 1)
            (("2" (expand "every" -2)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (rewrite "some_is_exists")
                    (("2" (rewrite "some_is_exists")
                      (("2" (split -6)
                        (("1" (replace -1)
                          (("1" (expand "subterm" -6) (("1" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst 2 "x!1")
                            (("2" (assert)
                              (("2" (expand "member" -1)
                                (("2" (inst -3 "b1!1" "b2!1")
                                  (("2" (inst -4 "b1!1" "b2!1")
                                    (("2" (inst -5 "b1!1" "b2!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (split -2)
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (rewrite "every_is_forall")
                                              (("2"
                                                (inst -6 "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -6 "b1!1" "b2!1")
                                                      (("2"
                                                        (inst
                                                         -7
                                                         "b1!1"
                                                         "b2!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -5)
              (flatten)
              (branch (split -5)
               ((then (expand "subterm" -5) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))
                (then (inst -4 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("14"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -4)
              (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("15"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -3)
              (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("16" (apply (then (skosimp*) (expand "subterm")))
      (("16" (assert) nil nil)) nil)
     ("17"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -3)
              (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("18" (apply (then (skosimp*) (expand "subterm")))
      (("18" (assert) nil nil)) nil)
     ("19"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -5)
              (flatten)
              (branch (split -5)
               ((then (expand "subterm" -5) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))
                (then (inst -4 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("20"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -4)
              (flatten)
              (branch (split -4)
               ((then (expand "subterm" -4) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))
                (then (inst -3 "b1!1" "b2!1") (assert))))))
      nil nil)
     ("21"
      (apply (then (skosimp*) (expand "subterm" 1) (expand "subterm" -3)
              (flatten)
              (branch (split -3)
               ((then (expand "subterm" -3) (assert) (replace -1) (assert))
                (then (inst -2 "b1!1" "b2!1") (assert))))))
      nil nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (pred type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Body_induction formula-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil))
   1295 1090 t nil)
  (subterm_transitive-1 nil 3403264410 nil
   (";;; Proof proper_subterm_is_transitive-1 for formula ProgramFunctions.proper_subterm_is_transitive"
    (induct "c3")
    (("1" (grind) nil)
     ("2" (skosimp*)
      (("2" (expand "<<" 1)
        (("2" (expand "<<" -4)
          (("2" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("3" (grind) nil) ("4" (grind) nil) ("5" (grind) nil) ("6" (grind) nil)
     ("7" (skosimp*)
      (("7" (expand "<<" 1)
        (("7" (expand "<<" -4)
          (("7" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("8" (skosimp*)
      (("8" (expand "<<" 1)
        (("8" (expand "<<" -4)
          (("8" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("9" (grind) nil) ("10" (grind) nil) ("11" (grind) nil)
     ("12" (grind) nil) ("13" (grind) nil)
     ("14" (skosimp*)
      (("14" (expand "<<" 1)
        (("14" (expand "<<" -5)
          (("14" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))
             ("5" (inst -4 "c1!1" "c2!1") (("5" (assert) nil)))
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil)))))))))))
     ("15" (skosimp*)
      (("15" (expand "<<" 1)
        (("15" (expand "<<" -4)
          (("15" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("16" (grind) nil) ("17" (grind) nil)
     ("18" (skosimp*)
      (("18" (rewrite "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (expand "<<" (-3 1))
          (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
            (("18" (rewrite "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (skosimp*)
                (("18" (inst?)
                  (("18" (assert)
                    (("18" (flatten)
                      (("18" (inst 1 "x!1")
                        (("18" (assert)
                          (("18" (split -5)
                            (("1" (assert) nil)
                             ("2" (inst -2 "c1!1" "c2!1")
                              (("2" (assert) nil)))
                             ("3" (assert) nil)
                             ("4" (inst -3 "c1!1" "c2!1")
                              (("4" (assert) nil)))))))))))))))))))))))))))
     ("19" (skosimp*)
      (("19" (expand "<<" 1)
        (("19" (expand "<<" -5)
          (("19" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))
             ("5" (assert) nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil)))))))))))
     ("20" (skosimp*)
      (("20" (expand "<<" 1)
        (("20" (expand "<<" -4)
          (("20" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("21" (grind) nil) ("22" (grind) nil) ("23" (grind) nil)
     ("24" (grind) nil)
     ("25" (skosimp*)
      (("25" (expand "<<" 1)
        (("25" (expand "<<" -5)
          (("25" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))
             ("5" (assert) nil)
             ("6" (inst -4 "c1!1" "c2!1") (("6" (assert) nil)))))))))))
     ("26" (skosimp*)
      (("26" (expand "<<" 1)
        (("26" (expand "<<" -4)
          (("26" (split -)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil)))
             ("3" (assert) nil)
             ("4" (inst -3 "c1!1" "c2!1") (("4" (assert) nil)))))))))))
     ("27" (skosimp*)
      (("27" (expand "<<" 1)
        (("27" (expand "<<" -3)
          (("27" (split -3)
            (("1" (assert) nil)
             ("2" (inst -2 "c1!1" "c2!1") (("2" (assert) nil))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked nil nil nil nil nil))
 (subterm_CaseJML_set2list 0
  (subterm_CaseJML_set2list-2 nil 3412067886 3428166056
   ("" (skolem 1 (_ "b!1"))
    ((""
      (use "wf_induction[finite_set[[Expr, Stmt]], LAMBDA(x, y : finite_set[[Expr, Stmt]]) : card(x) < card(y)]")
      (("1" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "set2list" 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (skosimp*)
                    (("1" (expand "subterm" 1 1)
                      (("1" (assert)
                        (("1" (rewrite "some_is_exists")
                          (("1" (expand "member")
                            (("1" (skosimp*)
                              (("1" (expand "empty?")
                                (("1" (inst?)
                                  (("1" (expand "member")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "subterm" 2)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (assert) nil nil)
                           ("2" (rewrite "some_is_exists")
                            (("2" (skosimp*)
                              (("2" (expand "member" -1)
                                (("2" (split -1)
                                  (("1" (inst?)
                                    (("1" (assert)
                                      (("1"
                                        (typepred "choose(x!1)")
                                        (("1"
                                          (replace -2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (inst - "remove(choose(x!1), x!1)")
                                    (("2" (use "card_remove[[Expr, Stmt]]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "subterm" -3 1)
                                            (("2"
                                              (rewrite "some_is_exists")
                                              (("2"
                                                (iff)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -3)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (expand
                                                               "remove")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst?)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (rewrite "some_is_exists")
                              (("3" (inst 2 "x!2")
                                (("3" (assert)
                                  (("3" (split 2)
                                    (("1" (expand "member")
                                      (("1"
                                        (use "choose_rest[[Expr, Stmt]]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 -2 :dir rl)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand* "add" "rest")
                                                (("1"
                                                  (split -2)
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (use
                                                     "set2list_same_elements")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_card[[Expr, Stmt]]") nil nil))
      nil))
    nil)
   proved
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (list type-decl nil list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil) (remove const-decl "set" sets nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (add const-decl "(nonempty?)" sets nil) (rest const-decl "set" sets nil)
    (choose_rest formula-decl nil sets_lemmas nil)
    (wf_card formula-decl nil WF_Card nil))
   812 760 t nil)
  (subterm_CaseJML_set2list-1 nil 3403594428 3410548747
   ("" (skolem 1 (_ "b!1"))
    ((""
      (use "wf_induction[finite_set[[BoolExpr, Stmt]], LAMBDA(x, y : finite_set[[BoolExpr, Stmt]]) : card(x) < card(y)]")
      (("1" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "set2list" 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (skosimp*)
                    (("1" (expand "subterm" 1 1)
                      (("1" (assert)
                        (("1" (rewrite "some_is_exists")
                          (("1" (expand "member")
                            (("1" (skosimp*)
                              (("1" (expand "empty?")
                                (("1" (inst?)
                                  (("1" (expand "member")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "subterm" 2)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (assert) nil nil)
                           ("2" (rewrite "some_is_exists")
                            (("2" (skosimp*)
                              (("2" (expand "member" -1)
                                (("2" (split -1)
                                  (("1" (inst?)
                                    (("1" (assert)
                                      (("1"
                                        (typepred "choose(x!1)")
                                        (("1"
                                          (replace -2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (inst - "remove(choose(x!1), x!1)")
                                    (("2"
                                      (use "card_remove[[BoolExpr, Stmt]]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "subterm" -3 1)
                                            (("2"
                                              (rewrite "some_is_exists")
                                              (("2"
                                                (iff)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -3)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (expand
                                                               "remove")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst?)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (rewrite "some_is_exists")
                              (("3" (inst 2 "x!2")
                                (("3" (assert)
                                  (("3" (split 2)
                                    (("1" (expand "member")
                                      (("1"
                                        (use "choose_rest[[BoolExpr, Stmt]]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 -2 :dir rl)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand* "add" "rest")
                                                (("1"
                                                  (split -2)
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (use
                                                     "set2list_same_elements")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_card[[BoolExpr, Stmt]]") nil nil))
      nil))
    nil)
   untried
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (list type-decl nil list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil) (remove const-decl "set" sets nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (add const-decl "(nonempty?)" sets nil) (rest const-decl "set" sets nil)
    (choose_rest formula-decl nil sets_lemmas nil)
    (wf_card formula-decl nil WF_Card nil))
   911 820 t shostak)))
(ProgramRestriction)
(WellFormedProgram
 (wf_Body_TCC1 0
  (wf_Body_TCC1-1 nil 3403260982 3428166056 ("" (subtype-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil))
   220 200 nil nil))
 (wf_Body_preserved_by_proper_subterm 0
  (wf_Body_preserved_by_proper_subterm-1 nil 3401450425 3428166056
   ("" (skolem 1 "p!1" _ _)
    (("" (skosimp*)
      (("" (expand "wf_Body")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (use "subterm_subset_varnames")
                  (("1" (assert)
                    (("1" (expand "subset?")
                      (("1" (expand "member")
                        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -4)
              (("2" (assert)
                (("2" (lemma "proper_subterm_implies_subterm")
                  (("2" (inst? -1 :where -5)
                    (("2" (assert)
                      (("2" (lemma "subterm_transitive")
                        (("2" (inst -1 "b1!2" "b2!1" "b1!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (subterm_subset_varnames formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil) (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (proper_subterm_implies_subterm formula-decl nil ProgramFunctions nil)
    (subterm_transitive formula-decl nil ProgramFunctions nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   122 100 t shostak))
 (wf_Body_CaseJML 0
  (wf_Body_CaseJML-1 nil 3401607410 3428166057
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "wf_Branches")
          (("2" (expand "wf_Body")
            (("2" (expand "var_names" 1 1)
              (("2" (expand "subterm" 1 1)
                (("2" (expand "every" 1)
                  (("2" (auto-rewrite "union" "member")
                    (("2" (assert)
                      (("2" (iff)
                        (("2" (split 1)
                          (("1" (skosimp*)
                            (("1" (split -3)
                              (("1" (assert)
                                (("1" (split 1)
                                  (("1" (skosimp*)
                                    (("1" (inst? -3) (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp*)
                                    (("2" (inst? -5)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "some_is_exists")
                                          (("2"
                                            (inst? 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (skosimp*)
                                    (("3" (inst? -3) (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4" (skosimp*)
                                    (("4" (inst? -5)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (rewrite "some_is_exists")
                                          (("4"
                                            (inst? 2)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil)
                               ("3" (skosimp*)
                                (("3" (inst? -4)
                                  (("3" (assert)
                                    (("3" (rewrite "some_is_exists")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "subterm" -2)
                                          (("3"
                                            (rewrite "some_is_exists")
                                            (("3"
                                              (skosimp*)
                                              (("3"
                                                (inst 2 "x!1")
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (assert)
                              (("2" (flatten)
                                (("2" (assert)
                                  (("2" (split 1)
                                    (("1" (skosimp*)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (inst? -2)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst? -4)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (inst? -8)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp*)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "some_is_exists")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (split -3)
                                                (("1"
                                                  (inst? -5)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (inst? -7)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -10)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "subterm" 2)
                                                    (("2"
                                                      (rewrite
                                                       "some_is_exists")
                                                      (("2"
                                                        (inst? 2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (emptyset const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (some adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (list type-decl nil list_adt nil))
   1325 1200 t shostak))
 (wf_Body_While_TCC1 0
  (wf_Body_While_TCC1-1 nil 3413719135 3428166058 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   123 120 nil nil))
 (wf_Body_While_TCC2 0
  (wf_Body_While_TCC2-1 nil 3413719135 3428166058 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   180 150 nil nil))
 (wf_Body_While 0
  (wf_Body_While-1 nil 3413719135 3428166058
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (flatten)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (hide -3)
                (("1" (auto-rewrite "union" "member" "emptyset")
                  (("1" (rewrite "var_names" -1)
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "var_names" 2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst?) (("2" (assert) nil nil)) nil)
                         ("3" (expand "var_names" -1) (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (hide -3)
                (("2" (expand "subterm" -2)
                  (("2" (split -2)
                    (("1" (assert) nil nil)
                     ("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst?) (("3" (assert) nil nil)) nil)
                     ("4" (expand "subterm" -1) (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil))
   191 170 t shostak))
 (wf_Body_CaseJML_branches_TCC1 0
  (wf_Body_CaseJML_branches_TCC1-1 nil 3413719135 3428166058
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil))
   137 140 nil nil))
 (wf_Body_CaseJML_branches 0
  (wf_Body_CaseJML_branches-1 nil 3413719307 3428166059
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (rewrite "var_names" -1)
              (("1" (auto-rewrite "union" "member")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "var_names" 2) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "var_names" 2) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst?)
                      (("3" (assert)
                        (("3" (expand "var_names" 2) (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "subterm" -2)
              (("2" (assert)
                (("2" (lemma "subterm_transitive" ("b1" "b1!1" "b3" "b!1"))
                  (("2" (hide -4)
                    (("2" (split -3)
                      (("1" (inst? -4)
                        (("1" (assert)
                          (("1" (inst -2 "proj_1(car(branches(b!1)))")
                            (("1" (assert)
                              (("1" (expand "subterm" 1)
                                (("1" (rewrite "some_is_exists")
                                  (("1" (inst 1 "car(branches(b!1))")
                                    (("1" (expand "member")
                                      (("1"
                                        (expand "subterm")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst? -4)
                        (("2" (assert)
                          (("2" (inst -2 "proj_2(car(branches(b!1)))")
                            (("2" (assert)
                              (("2" (expand "subterm" 1)
                                (("2" (rewrite "some_is_exists")
                                  (("2" (inst 1 "car(branches(b!1))")
                                    (("2" (expand "member")
                                      (("2"
                                        (expand "subterm")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "subterm" -1)
                        (("3" (rewrite "some_is_exists")
                          (("3" (skosimp*)
                            (("3" (split -2)
                              (("1" (inst? -5)
                                (("1" (assert)
                                  (("1" (inst -3 "x!1`1")
                                    (("1" (assert)
                                      (("1"
                                        (expand "subterm" 1)
                                        (("1"
                                          (rewrite "some_is_exists")
                                          (("1"
                                            (inst 1 "x!1")
                                            (("1"
                                              (expand "member" 1)
                                              (("1"
                                                (expand "subterm")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst? -5)
                                (("2" (assert)
                                  (("2" (inst -3 "x!1`2")
                                    (("2" (assert)
                                      (("2"
                                        (expand "subterm" 1)
                                        (("2"
                                          (rewrite "some_is_exists")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (expand "member" 1)
                                              (("2"
                                                (expand "subterm")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (subterm_transitive formula-decl nil ProgramFunctions nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (pred type-eq-decl nil defined_types nil)
    (member def-decl "bool" list_props nil))
   620 560 t shostak))
 (wf_program_variables_disjoint 0
  (wf_program_variables_disjoint-1 nil 3393587608 3428166059
   ("" (skosimp)
    (("" (typepred "p!1")
      (("" (expand* "wf_Program" "wf_program_variables_disjoint_def")
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_program_variables_disjoint_def const-decl "boolean" WellFormedProgram
     nil))
   30 30 t shostak))
 (wf_program_variables_not_reserved_words 0
  (wf_program_variables_not_reserved_words-1 nil 3394987767 3428166059
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "wf_program_variables_not_reserved_words_def")
            (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil))
   20 20 t shostak))
 (wf_program_has_unique_class_names 0
  (wf_program_has_unique_class_names-1 nil 3390201065 3428166059
   ("" (skosimp)
    (("" (typepred "p!1")
      (("" (expand* "wf_Program" "wf_program_has_unique_class_names_def")
        (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil))
   26 20 t shostak))
 (wf_program_has_wf_classes 0
  (wf_program_has_wf_classes-1 nil 3393587755 3428166059
   ("" (skosimp)
    (("" (typepred "p!1")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "wf_Classes")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil))
   43 20 t shostak))
 (wf_class_has_unique_method_names 0
  (wf_class_has_unique_method_names-1 nil 3393587790 3428166059
   ("" (skosimp*)
    (("" (expand "wf_Class")
      (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
    nil)
   proved
   ((wf_Class const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Decl type-eq-decl nil Program nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil))
   25 30 t shostak))
 (wf_program_methods_only_in_one_class 0
  (wf_program_methods_only_in_one_class-1 nil 3401699461 3428166059
   ("" (skosimp*)
    (("" (expand "wf_program_methods_only_in_one_class")
      (("" (typepred "p!1")
        (("" (expand "wf_Program")
          (("" (skosimp*)
            (("" (expand "wf_Classes")
              (("" (inst-cp -4 "c1!1")
                (("" (inst -4 "c2!1")
                  (("" (assert)
                    (("" (expand "wf_Class")
                      (("" (flatten)
                        (("" (inst -5 "m!1")
                          (("" (inst -7 "m!1")
                            (("" (assert)
                              ((""
                                (expand "wf_program_has_unique_class_names_def")
                                (("" (inst -3 "c1!1" "c2!1")
                                  (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil))
   44 50 t shostak))
 (wf_program_var_names_declared 0
  (wf_program_var_names_declared-1 nil 3403602252 3428166060
   ("" (skosimp*)
    (("" (expand "var_names")
      (("" (expand "Union")
        (("" (skosimp*)
          (("" (typepred "a!1")
            (("" (skosimp*)
              (("" (replace -2 :hide? t)
                (("" (expand "var_names")
                  (("" (auto-rewrite "union" "member")
                    (("" (assert)
                      (("" (split -2)
                        (("1" (expand "Union")
                          (("1" (skosimp*)
                            (("1" (typepred "a!2")
                              (("1" (skosimp*)
                                (("1" (replace -2 :hide? t)
                                  (("1" (expand "var_names")
                                    (("1" (expand "Union")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (typepred "a!3")
                                          (("1"
                                            (typepred "p!1")
                                            (("1"
                                              (expand "wf_Program")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "program_pred")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "method_pred")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst? -6)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "wf_Body")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst? -7)
                                                                    (("1"
                                                                      (inst?
                                                                       -8)
                                                                      (("1"
                                                                        (inst?
                                                                         -11)
                                                                        (("1"
                                                                          (inst?
                                                                           -12)
                                                                          (("1"
                                                                            (inst?
                                                                             -13)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (split
                                                                                 -21)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -8)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     -10)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("3"
                                                                                    (inst?
                                                                                     -12)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("4"
                                                                                    (inst?
                                                                                     -14)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("5"
                                                                                    (inst?
                                                                                     -16)
                                                                                    (("5"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("6"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("6"
                                                                                    (inst?
                                                                                     -18)
                                                                                    (("6"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("7"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("7"
                                                                                    (expand
                                                                                     "ext_declared_var_names")
                                                                                    (("7"
                                                                                      (assert)
                                                                                      (("7"
                                                                                        (flatten)
                                                                                        (("7"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           2)
                                                                                          (("7"
                                                                                            (expand
                                                                                             "var_names"
                                                                                             -23)
                                                                                            (("7"
                                                                                              (skosimp*)
                                                                                              (("7"
                                                                                                (inst?
                                                                                                 2)
                                                                                                (("7"
                                                                                                  (expand
                                                                                                   "getLocalDecls")
                                                                                                  (("7"
                                                                                                    (assert)
                                                                                                    (("7"
                                                                                                      (inst?
                                                                                                       2)
                                                                                                      (("7"
                                                                                                        (assert)
                                                                                                        (("7"
                                                                                                          (expand
                                                                                                           "getLocalDecls")
                                                                                                          (("7"
                                                                                                            (inst?
                                                                                                             2)
                                                                                                            (("7"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("8"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("8"
                                                                                    (inst?
                                                                                     -20)
                                                                                    (("8"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("9"
                                                                                  (expand
                                                                                   "singleton")
                                                                                  (("9"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("9"
                                                                                      (assert)
                                                                                      (("9"
                                                                                        (expand
                                                                                         "ext_declared_var_names")
                                                                                        (("9"
                                                                                          (assert)
                                                                                          (("9"
                                                                                            (flatten)
                                                                                            (("9"
                                                                                              (expand
                                                                                               "var_names"
                                                                                               2)
                                                                                              (("9"
                                                                                                (inst?
                                                                                                 2)
                                                                                                (("9"
                                                                                                  (expand
                                                                                                   "getLocalDecls")
                                                                                                  (("9"
                                                                                                    (inst?
                                                                                                     2)
                                                                                                    (("9"
                                                                                                      (assert)
                                                                                                      (("9"
                                                                                                        (expand
                                                                                                         "getLocalDecls")
                                                                                                        (("9"
                                                                                                          (inst?
                                                                                                           2)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "defined?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "defined?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "defined?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "defined?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "ext_declared_var_names")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2" (expand "var_names" (-1 1))
                                (("2" (skosimp*)
                                  (("2" (inst?)
                                    (("2" (expand "getFieldDecls")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "ext_declared_var_names")
                          (("3" (assert)
                            (("3" (flatten)
                              (("3" (expand "var_names" (-1 3))
                                (("3" (skosimp*)
                                  (("3" (inst?)
                                    (("3" (assert)
                                      (("3"
                                        (expand "getGhostDecls")
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred "p!1")
                          (("4" (expand "wf_Program")
                            (("4" (flatten)
                              (("4" (expand "program_pred")
                                (("4" (inst?)
                                  (("4" (assert)
                                    (("4" (flatten)
                                      (("4"
                                        (expand "wf_Body")
                                        (("4"
                                          (flatten)
                                          (("4"
                                            (inst? -5)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((var_names const-decl "set[Name]" ProgramFunctions nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (Union const-decl "set" sets nil))
   1352 1270 t shostak)))

