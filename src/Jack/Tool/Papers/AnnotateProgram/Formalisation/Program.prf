(JType)
(Excpt)
(NumExpr)
(BoolExpr)
(RefExpr)
(Expr)
(Stmt)
(Program)
(ProgramFunctions
 (getFieldDecls_TCC1 0
  (getFieldDecls_TCC1-3 nil 3391148557 3393585169
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                  EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "fields(t!1)")
                        (("1"
                          (case-replace
                           "fields(t!1) = {f : FieldDecl | fields(t!1)(f)}")
                          (("1" (assert)
                            (("1" (apply-extensionality :hide? t) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand "union")
                      (("2" (expand "add")
                        (("2" (expand "member")
                          (("2" (iff)
                            (("2" (prop)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (Program type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (t!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   780 590 t nil)
  (getFieldDecls_TCC1-2 nil 3390902649 3391148163
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "fields(t!1)")
                        (("1"
                          (case-replace
                           "fields(t!1) = {f : FieldDecl[Name] | fields(t!1)(f)}")
                          (("1" (apply-extensionality 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand* "union" "add" "member")
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil)
                           ("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (Program type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   412 330 t nil)
  (getFieldDecls_TCC1-1 nil 3390821142 3390894974
   ("" (skolem!)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite")
        (("" (skolem!) (("" (postpone) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked nil 5557840 390 t nil))
 (getLocalDecls_TCC1 0
  (getLocalDecls_TCC1-2 nil 3390903916 3393585172
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[LocalVarDecl]({l : LocalVarDecl | EXISTS (c : Class, m : Method) : C(c) AND methods(c)(m) AND (lvars(m)(l) OR l = arg(m))})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " {l: LocalVarDecl |
                  EXISTS (c: Class, m: Method):
                    add(t!1, x!1)(c) AND
                     methods(c)(m) AND (lvars(m)(l) OR l = arg(m))} = union({l : LocalVarDecl | EXISTS (m : Method) : methods(t!1)(m) AND (lvars(m)(l) OR l = arg(m))}, {l : LocalVarDecl |
                  EXISTS (c: Class, m: Method):
                    x!1(c) AND methods(c)(m) AND (lvars(m)(l) OR l = arg(m))})"
                 :hide? t)
                (("1" (use "finite_union[LocalVarDecl]")
                  (("1" (hide -1 2)
                    (("1" (use "finite_set_induction[Method]")
                      (("1"
                        (inst -1
                         "LAMBDA(M : finite_set[Method]) : is_finite[LocalVarDecl]({l: LocalVarDecl |EXISTS(m : Method) : M(m) AND (lvars(m)(l) OR l = arg(m))})")
                        (("1" (split -1)
                          (("1" (inst?) nil nil)
                           ("2" (hide 2)
                            (("2" (skosimp*)
                              (("2"
                                (case-replace
                                 "{l: LocalVarDecl |
                      EXISTS (m: Method):
                        add(t!2, x!2)(m) AND (lvars(m)(l) OR l = arg(m))} = union(lvars(t!2), union(singleton(arg(t!2)), {l : LocalVarDecl | EXISTS (m: Method): x!2(m) AND (lvars(m)(l) OR l = arg(m))}))"
                                 :hide?
                                 t)
                                (("1"
                                  (use "finite_union[LocalVarDecl]")
                                  (("1"
                                    (use "finite_union[LocalVarDecl]")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand "union")
                                      (("2"
                                        (expand "add")
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (iff)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp*)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "emptyset")
                              (("3"
                                (case-replace
                                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                                (("1"
                                  (use "finite_emptyset[LocalVarDecl]")
                                  nil
                                  nil)
                                 ("2"
                                  (apply-extensionality :hide? t)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand "union")
                      (("2" (expand "add")
                        (("2" (expand "member")
                          (("2" (iff)
                            (("2" (prop)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst? 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                (("1" (use "finite_emptyset[LocalVarDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (Program type-eq-decl nil Program nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (t!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (x!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (x!2 skolem-const-decl "finite_set[Method]" ProgramFunctions nil)
    (t!2 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   1703 1260 t nil)
  (getLocalDecls_TCC1-1 nil 3390821142 3390821234
   ("" (subtype-tcc) nil nil) unchecked nil 605 450 nil nil))
 (getGhostDecls_TCC1 0
  (getGhostDecls_TCC1-3 nil 3391148598 3393585170
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                          EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "ghost_vars(t!1)")
                        (("1"
                          (case-replace
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (assert)
                            (("1" (apply-extensionality :hide? t) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand* "union" "add" "member")
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (skosimp*)
                            (("1" (ground)
                              (("1"
                                (inst?)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil)
                           ("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (Program type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (t!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   778 590 t nil)
  (getGhostDecls_TCC1-2 nil 3390903999 3391148164
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (split -1)
          (("1" (inst -1 "classes(p!1)") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (case-replace " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (hide -1)
                  (("1" (use "finite_union[FieldDecl]")
                    (("1" (hide -1 2)
                      (("1" (typepred "ghost_vars(t!1)")
                        (("1"
                          (case-replace
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (apply-extensionality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (hide -1 2)
                    (("2" (expand "union")
                      (("2" (expand "add")
                        (("2" (expand "member")
                          (("2" (iff)
                            (("2" (prop)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "emptyset")
              (("3"
                (case-replace
                 "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (use "finite_emptyset[FieldDecl]") nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (Program type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (finite_set_induction formula-decl nil FiniteSetInduction nil))
   436 310 t nil)
  (getGhostDecls_TCC1-1 nil 3390821142 3390821234
   ("" (subtype-tcc) nil nil) unchecked nil 474 450 nil nil))
 (class_names_TCC1 0
  (class_names_TCC1-1 nil 3390821142 3393585196
   ("" (skolem!)
    (("" (typepred "classes(p!1)")
      (("" (expand "is_finite")
        (("" (skolem!)
          ((""
            (inst 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (c : Class): classes(p!1)(c) AND name(c) = n})) :
                      f!1(choose({c : Class | classes(p!1)(c) AND name(c) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!) (("3" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (n!1 skolem-const-decl
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     ProgramFunctions nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     ProgramFunctions nil)
    (x2!1 skolem-const-decl
     "({n: Name | EXISTS (c: Class[Name]): classes(p!1)(c) AND name(c) = n})"
     ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "Program[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   767 570 t nil))
 (method_names_TCC1 0
  (method_names_TCC1-1 nil 3390821142 3393585370
   ("" (skosimp*)
    (("" (typepred "methods(c!1)")
      (("" (expand "is_finite")
        (("" (skolem!)
          ((""
            (inst 1 "N!1"
             "LAMBDA (n: {n: Name | EXISTS (m: Method): classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}):
                     f!1(choose({m : Method | methods(c!1)(m) AND name(m) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skolem!)
                        (("2" (inst?) (("2" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skolem!)
                        (("3" (inst?) (("3" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (typepred "n!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skolem!)
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (n!1 skolem-const-decl "{n: Name |
         EXISTS (m: Method):
           classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}"
     ProgramFunctions nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({n: Name |
    EXISTS (m: Method[Name]):
      classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n})"
     ProgramFunctions nil)
    (x2!1 skolem-const-decl "({n: Name |
    EXISTS (m: Method[Name]):
      classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n})"
     ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (m!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (m!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Program type-eq-decl nil Program nil)
    (p!1 skolem-const-decl "Program[Name]" ProgramFunctions nil)
    (c!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   780 620 t nil))
 (methods_TCC1 0
  (methods_TCC1-1 nil 3392356310 3393585373
   ("" (skosimp*)
    (("" (use "finite_set_induction[Class]")
      ((""
        (inst -1
         "LAMBDA(C : finite_set[Class]) : is_finite[Method[Name]]
            ({m: Method[Name] |
                EXISTS (c: Class[Name]): C(c) AND methods(c)(m)})")
        (("" (assert)
          (("" (split -1)
            (("1" (inst -1 "classes(p!1)") nil nil)
             ("2" (hide 2)
              (("2" (skosimp*)
                (("2"
                  (case-replace "({m: Method[Name] |
                   EXISTS (c: Class[Name]): add(t!1, x!1)(c) AND methods(c)(m)})
     = union({m : Method[Name] | methods(t!1)(m)}, {m : Method[Name] | EXISTS (c : Class[Name]) : x!1(c) AND methods(c)(m)})"
                   :hide? t)
                  (("1" (use "finite_union[Method[Name]]")
                    (("1" (hide -1 2)
                      (("1" (typepred "methods(t!1)")
                        (("1"
                          (case-replace
                           "methods(t!1) = {m : Method[Name] | methods(t!1)(m)}"
                           :hide? t)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (expand* "union" "add" "member")
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (skosimp*)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (inst?) nil nil)
                             ("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (expand "emptyset")
                (("3"
                  (case-replace
                   "{m: Method[Name] | FALSE} = emptyset[Method[Name]]")
                  (("1" (use "finite_emptyset[Method[Name]]") nil nil)
                   ("2" (apply-extensionality :hide? t)
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction formula-decl nil FiniteSetInduction nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "finite_set[Class]" ProgramFunctions nil)
    (t!1 skolem-const-decl "Class[Name]" ProgramFunctions nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (Program type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   1936 1590 t nil))
 (get_class_TCC1 0
  (get_class_TCC1-1 nil 3390821142 3393585196
   ("" (subtype-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   271 170 nil nil))
 (lookup_mthd_TCC1 0
  (lookup_mthd_TCC1-1 nil 3390821142 3393585370
   ("" (skosimp)
    (("" (expand "method_names")
      (("" (skosimp)
        (("" (rewrite "nonempty_exists")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (Method type-eq-decl nil Program nil)
    (p!1 skolem-const-decl "Program[Name]" ProgramFunctions nil)
    (tgt!1 skolem-const-decl "Val[Name]" ProgramFunctions nil)
    (m!1 skolem-const-decl "Method[Name]" ProgramFunctions nil)
    (mn!1 skolem-const-decl "Name" ProgramFunctions nil))
   230 230 t nil))
 (lookup_mthd_TCC2 0
  (lookup_mthd_TCC2-1 nil 3392356310 3393585371
   ("" (skosimp*)
    (("" (expand "every")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (expand "methods")
                (("1" (inst?)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((every adt-def-decl "boolean" lift_adt nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (Program type-eq-decl nil Program nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil))
   236 230 t nil))
 (var_names_TCC1 0
  (var_names_TCC1-1 nil 3390821142 3393585174
   ("" (skolem-typepred)
    (("" (expand "is_finite")
      (("" (skolem!)
        ((""
          (inst 1 "N!1"
           "LAMBDA (n : ({n: Name | EXISTS (f: FieldDecl): fs!1(f) AND name(f) = n})) :
                    f!1(choose({f : FieldDecl | fs!1(f) AND name(f) = n}))")
          (("1" (expand "injective?")
            (("1" (skosimp)
              (("1" (inst?)
                (("1" (assert) nil nil)
                 ("2" (typepred "x2!1")
                  (("2" (rewrite "nonempty_exists")
                    (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                  nil)
                 ("3" (typepred "x1!1")
                  (("3" (rewrite "nonempty_exists")
                    (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem!)
            (("2" (typepred "n!1")
              (("2" (rewrite "nonempty_exists")
                (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fs!1 skolem-const-decl "finite_set[FieldDecl[Name]]"
     ProgramFunctions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (choose const-decl "(p)" sets nil)
    (f!2 skolem-const-decl "FieldDecl[Name]" ProgramFunctions nil)
    (f!2 skolem-const-decl "FieldDecl[Name]" ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (x2!1 skolem-const-decl
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     ProgramFunctions nil)
    (x1!1 skolem-const-decl
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     ProgramFunctions nil)
    (injective? const-decl "bool" functions nil)
    (f!2 skolem-const-decl "FieldDecl[Name]" ProgramFunctions nil)
    (n!1 skolem-const-decl
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     ProgramFunctions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   756 560 t nil))
 (var_names_TCC2 0
  (var_names_TCC2-1 nil 3390821142 3393585174
   ("" (skolem-typepred)
    (("" (expand "is_finite")
      (("" (skolem!)
        ((""
          (inst 1 "N!1"
           "LAMBDA (n : ({n: Name | EXISTS (l: LocalVarDecl): ls!1(l) AND name(l) = n})) :
                      f!1(choose({l : LocalVarDecl | ls!1(l) AND name(l) = n}))")
          (("1" (expand "injective?")
            (("1" (skosimp)
              (("1" (inst?)
                (("1" (assert) nil nil)
                 ("2" (typepred "x2!1")
                  (("2" (rewrite "nonempty_exists")
                    (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
                  nil)
                 ("3" (typepred "x1!1")
                  (("3" (rewrite "nonempty_exists")
                    (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem!)
            (("2" (typepred "n!1")
              (("2" (rewrite "nonempty_exists")
                (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ls!1 skolem-const-decl "finite_set[LocalVarDecl[Name]]"
     ProgramFunctions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (choose const-decl "(p)" sets nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]" ProgramFunctions nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]" ProgramFunctions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (x2!1 skolem-const-decl
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     ProgramFunctions nil)
    (x1!1 skolem-const-decl
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     ProgramFunctions nil)
    (injective? const-decl "bool" functions nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]" ProgramFunctions nil)
    (n!1 skolem-const-decl
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     ProgramFunctions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil ProgramFunctions nil)
    (JType type-decl nil JType_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   647 560 t nil)))
(WellFormedProgram
 (wf_program_variables_disjoint 0
  (wf_program_variables_disjoint-1 nil 3393587608 3393587659
   ("" (skosimp)
    (("" (expand* "wf_Program" "wf_program_variables_disjoint_def")
      (("" (ground) nil nil)) nil))
    nil)
   proved
   ((wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil))
   51062 70 t shostak))
 (wf_program_variables_not_this 0
  (wf_program_variables_not_this-1 nil 3393587670 3393587689
   ("" (skosimp)
    (("" (expand* "wf_Program" "wf_program_variables_not_this_def")
      (("" (ground) nil nil)) nil))
    nil)
   proved
   ((wf_program_variables_not_this_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil))
   18623 30 t shostak))
 (wf_program_has_unique_class_names 0
  (wf_program_has_unique_class_names-1 nil 3390201065 3393587743
   ("" (skosimp)
    (("" (expand* "wf_Program" "wf_program_has_unique_class_names_def")
      (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil))
   39116 50 t shostak))
 (wf_program_has_wf_classes 0
  (wf_program_has_wf_classes-1 nil 3393587755 3393587779
   ("" (skosimp)
    (("" (expand "wf_Program")
      (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((wf_Program const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil))
   24602 40 t shostak))
 (wf_class_has_unique_method_names 0
  (wf_class_has_unique_method_names-1 nil 3393587790 3393587809
   ("" (skosimp)
    (("" (expand "wf_Class") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   proved
   ((wf_Class const-decl "boolean" WellFormedProgram nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil))
   19203 30 t shostak))
 (wf_program_target_of_set_declared 0
  (wf_program_target_of_set_declared-1 nil 3393587815 3393587842
   ("" (skosimp)
    (("" (expand "wf_Program")
      (("" (flatten) (("" (inst? -5) nil nil)) nil)) nil))
    nil)
   proved
   ((wf_Program const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil))
   27252 10 t shostak)))
(WellTypedProgram)

