(|JType|)
(|Excpt|)
(|Body|)
(|Program|
 (|reserved_words_TCC1| 0
  (|reserved_words_TCC1-2| NIL 3394869706 3396593262
   ("" (EXPAND "is_finite")
    ((""
      (INST 1 "6"
       "LAMBDA (n : {n: Name | n = This OR n = Super OR n = rsIf OR n = rsThen OR n = rsElse}) :
                         IF n = This THEN 1
                         ELSIF n = Super THEN 2
                         ELSIF n = rsIf THEN 3
                         ELSIF n = rsThen THEN 4
                         ELSIF n = rsElse THEN 5
                         ELSE 0 ENDIF")
      (("" (EXPAND "injective?")
        (("" (SKOSIMP)
          (("" (LIFT-IF)
            (("" (ASSERT)
              (("" (GRIND) (("" (TYPEPRED "x1!1") (("" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |Program| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|Super| CONST-DECL "Name" |Program| NIL)
    (|rsIf| CONST-DECL "Name" |Program| NIL)
    (|rsThen| CONST-DECL "Name" |Program| NIL)
    (|rsElse| CONST-DECL "Name" |Program| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL))
   100 100 NIL NIL)
  (|reserved_words_TCC1-1| NIL 3394869664 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL NIL NIL NIL NIL)))
(|ProgramFunctions|
 (|var_names_TCC1| 0
  (|var_names_TCC1-1| NIL 3390821142 3396593298
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        ((""
          (INST 1 "N!1"
           "LAMBDA (n : ({n: Name | EXISTS (f: FieldDecl): fs!1(f) AND name(f) = n})) :
                    f!1(choose({f : FieldDecl | fs!1(f) AND name(f) = n}))")
          (("1" (EXPAND "injective?")
            (("1" (SKOSIMP)
              (("1" (INST?)
                (("1" (ASSERT) NIL NIL)
                 ("2" (TYPEPRED "x2!1")
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (TYPEPRED "x1!1")
                  (("3" (REWRITE "nonempty_exists")
                    (("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOLEM!)
            (("2" (TYPEPRED "n!1")
              (("2" (REWRITE "nonempty_exists")
                (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   254 254 T NIL))
 (|var_names_TCC2| 0
  (|var_names_TCC2-1| NIL 3390821142 3396593300
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        ((""
          (INST 1 "N!1"
           "LAMBDA (n : ({n: Name | EXISTS (l: LocalVarDecl): ls!1(l) AND name(l) = n})) :
                      f!1(choose({l : LocalVarDecl | ls!1(l) AND name(l) = n}))")
          (("1" (EXPAND "injective?")
            (("1" (SKOSIMP)
              (("1" (INST?)
                (("1" (ASSERT) NIL NIL)
                 ("2" (TYPEPRED "x2!1")
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (TYPEPRED "x1!1")
                  (("3" (REWRITE "nonempty_exists")
                    (("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOLEM!)
            (("2" (TYPEPRED "n!1")
              (("2" (REWRITE "nonempty_exists")
                (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   204 204 T NIL))
 (|var_names_union| 0
  (|var_names_union-1| NIL 3396846432 3396846439
   ("" (SKOSIMP*)
    (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL)
   PROVED
   ((|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   651 271 T SHOSTAK))
 (|getFieldDecls_TCC1| 0
  (|getFieldDecls_TCC1-3| NIL 3391148557 3396593302
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                  EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "fields(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "fields(t!1) = {f : FieldDecl | fields(t!1)(f)}")
                          (("1" (ASSERT)
                            (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND "union")
                      (("2" (EXPAND "add")
                        (("2" (EXPAND "member")
                          (("2" (IFF)
                            (("2" (PROP)
                              (("1" (SKOSIMP*)
                                (("1" (SPLIT -1)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (INST?) NIL NIL)
                               ("3" (SKOSIMP*)
                                (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) NIL NIL
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   189 189 T NIL)
  (|getFieldDecls_TCC1-2| NIL 3390902649 3391148163
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND fields(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND fields(c)(f)}) = union({f : FieldDecl | fields(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND fields(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "fields(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "fields(t!1) = {f : FieldDecl[Name] | fields(t!1)(f)}")
                          (("1" (APPLY-EXTENSIONALITY 1) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND* "union" "add" "member")
                      (("2" (IFF)
                        (("2" (PROP)
                          (("1" (SKOSIMP*)
                            (("1" (SPLIT -1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (INST?) NIL NIL)
                           ("3" (SKOSIMP*)
                            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) NIL
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   412 330 T NIL)
  (|getFieldDecls_TCC1-1| NIL 3390821142 3390894974
   ("" (SKOLEM!)
    (("" (TYPEPRED "classes(p!1)")
      (("" (EXPAND "is_finite") (("" (SKOLEM!) (("" (POSTPONE) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED NIL 5557840 390 T NIL))
 (|getLocalDecls_TCC1| 0
  (|getLocalDecls_TCC1-2| NIL 3390903916 3396593305
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[LocalVarDecl]({l : LocalVarDecl | EXISTS (c : Class, m : Method) : C(c) AND methods(c)(m) AND (lvars(m)(l) OR l = arg(m))})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " {l: LocalVarDecl |
                  EXISTS (c: Class, m: Method):
                    add(t!1, x!1)(c) AND
                     methods(c)(m) AND (lvars(m)(l) OR l = arg(m))} = union({l : LocalVarDecl | EXISTS (m : Method) : methods(t!1)(m) AND (lvars(m)(l) OR l = arg(m))}, {l : LocalVarDecl |
                  EXISTS (c: Class, m: Method):
                    x!1(c) AND methods(c)(m) AND (lvars(m)(l) OR l = arg(m))})"
                 :HIDE? T)
                (("1" (USE "finite_union[LocalVarDecl]")
                  (("1" (HIDE -1 2)
                    (("1" (USE "finite_set_induction[Method]")
                      (("1"
                        (INST -1
                         "LAMBDA(M : finite_set[Method]) : is_finite[LocalVarDecl]({l: LocalVarDecl |EXISTS(m : Method) : M(m) AND (lvars(m)(l) OR l = arg(m))})")
                        (("1" (SPLIT -1)
                          (("1" (INST?) NIL NIL)
                           ("2" (HIDE 2)
                            (("2" (SKOSIMP*)
                              (("2"
                                (CASE-REPLACE "{l: LocalVarDecl |
                      EXISTS (m: Method):
                        add(t!2, x!2)(m) AND (lvars(m)(l) OR l = arg(m))} = union(lvars(t!2), union(singleton(arg(t!2)), {l : LocalVarDecl | EXISTS (m: Method): x!2(m) AND (lvars(m)(l) OR l = arg(m))}))"
                                 :HIDE? T)
                                (("1" (USE "finite_union[LocalVarDecl]")
                                  (("1" (USE "finite_union[LocalVarDecl]") NIL
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -1 2)
                                  (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                    (("2" (EXPAND "union")
                                      (("2" (EXPAND "add")
                                        (("2" (EXPAND "singleton")
                                          (("2" (EXPAND "member")
                                            (("2" (IFF)
                                              (("2" (PROP)
                                                (("1" (SKOSIMP*)
                                                  (("1" (INST?)
                                                    (("1" (SPLIT -1)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST?)
                                                  (("2" (ASSERT) NIL NIL)) NIL)
                                                 ("3" (INST?)
                                                  (("3" (ASSERT) NIL NIL)) NIL)
                                                 ("4" (SKOSIMP*)
                                                  (("4" (INST?)
                                                    (("4" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (EXPAND "emptyset")
                              (("3"
                                (CASE-REPLACE
                                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                                (("1" (USE "finite_emptyset[LocalVarDecl]") NIL
                                  NIL)
                                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND "union")
                      (("2" (EXPAND "add")
                        (("2" (EXPAND "member")
                          (("2" (IFF)
                            (("2" (PROP)
                              (("1" (SKOSIMP*)
                                (("1" (SPLIT -1)
                                  (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (INST? 2) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("3" (SKOSIMP*)
                                (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE
                 "{f : LocalVarDecl | FALSE} = emptyset[LocalVarDecl]")
                (("1" (USE "finite_emptyset[LocalVarDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL) NIL NIL
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   372 371 T NIL)
  (|getLocalDecls_TCC1-1| NIL 3390821142 3390821234 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED NIL 605 450 NIL NIL))
 (|getGhostDecls_TCC1| 0
  (|getGhostDecls_TCC1-3| NIL 3391148598 3396593307
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                          EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "ghost_vars(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (ASSERT)
                            (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND* "union" "add" "member")
                      (("2" (IFF)
                        (("2" (PROP)
                          (("1" (SKOSIMP*)
                            (("1" (GROUND)
                              (("1" (INST?)
                                (("1" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST?) NIL NIL)
                           ("3" (SKOSIMP*)
                            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) NIL NIL
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   208 209 T NIL)
  (|getGhostDecls_TCC1-2| NIL 3390903999 3391148164
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1
         "LAMBDA(C : finite_set[Class]) : is_finite[FieldDecl]({f : FieldDecl | EXISTS (c : Class) : C(c) AND ghost_vars(c)(f)})")
        (("" (SPLIT -1)
          (("1" (INST -1 "classes(p!1)") NIL NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP*)
              (("2"
                (CASE-REPLACE " ({f: FieldDecl |
                      EXISTS (c: Class): add(t!1, x!1)(c) AND ghost_vars(c)(f)}) = union({f : FieldDecl | ghost_vars(t!1)(f)}, {f : FieldDecl | EXISTS (c : Class) : x!1(c) AND ghost_vars(c)(f)})")
                (("1" (HIDE -1)
                  (("1" (USE "finite_union[FieldDecl]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "ghost_vars(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "ghost_vars(t!1) = {f : FieldDecl | ghost_vars(t!1)(f)}")
                          (("1" (APPLY-EXTENSIONALITY) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (HIDE -1 2)
                    (("2" (EXPAND "union")
                      (("2" (EXPAND "add")
                        (("2" (EXPAND "member")
                          (("2" (IFF)
                            (("2" (PROP)
                              (("1" (SKOSIMP*)
                                (("1" (SPLIT -1)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (INST?) NIL NIL)
                               ("3" (SKOSIMP*)
                                (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "emptyset")
              (("3"
                (CASE-REPLACE "{f : FieldDecl | FALSE} = emptyset[FieldDecl]")
                (("1" (USE "finite_emptyset[FieldDecl]") NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL))
   436 310 T NIL)
  (|getGhostDecls_TCC1-1| NIL 3390821142 3390821234 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED NIL 474 450 NIL NIL))
 (|declared_var_names_TCC1| 0
  (|declared_var_names_TCC1-1| NIL 3394869665 3396593308
   ("" (SKOSIMP)
    ((""
      (CASE-REPLACE "{n: Name |
              var_names(getFieldDecls(p!1))(n) OR
              var_names(getLocalDecls(p!1))(n) OR
              var_names(getGhostDecls(p!1))(n)} =
              union(union(var_names(getFieldDecls(p!1)), var_names(getLocalDecls(p!1))), var_names(getGhostDecls(p!1)))")
      (("1" (HIDE -1) (("1" (USE "finite_union[Name]") NIL NIL)) NIL)
       ("2" (HIDE 2) (("2" (EXPAND* "union" "member") NIL NIL)) NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) NIL
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   27 27 T NIL))
 (|class_names_TCC1| 0
  (|class_names_TCC1-1| NIL 3390821142 3396593310
   ("" (SKOLEM!)
    (("" (TYPEPRED "classes(p!1)")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          ((""
            (INST 1 "N!1"
             "LAMBDA (n : ({n: Name | EXISTS (c : Class): classes(p!1)(c) AND name(c) = n})) :
                      f!1(choose({c : Class | classes(p!1)(c) AND name(c) = n}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (REWRITE "nonempty_exists")
                      (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (REWRITE "nonempty_exists")
                      (("3" (SKOLEM!) (("3" (INST?) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOLEM!)
              (("2" (TYPEPRED "n!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   220 219 T NIL))
 (|method_names_TCC1| 0
  (|method_names_TCC1-1| NIL 3390821142 3396593312
   ("" (SKOSIMP*)
    (("" (TYPEPRED "methods(c!1)")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          ((""
            (INST 1 "N!1"
             "LAMBDA (n: {n: Name | EXISTS (m: Method): classes(p!1)(c!1) AND methods(c!1)(m) AND name(m) = n}):
                     f!1(choose({m : Method | methods(c!1)(m) AND name(m) = n}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (REWRITE "nonempty_exists")
                      (("2" (SKOLEM!)
                        (("2" (INST?) (("2" (PROP) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (REWRITE "nonempty_exists")
                      (("3" (SKOLEM!)
                        (("3" (INST?) (("3" (PROP) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOLEM!)
              (("2" (TYPEPRED "n!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOLEM!) (("2" (INST?) (("2" (PROP) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL) NIL NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   231 232 T NIL))
 (|methods_TCC1| 0
  (|methods_TCC1-1| NIL 3392356310 3396593318
   ("" (SKOSIMP*)
    (("" (USE "finite_set_induction[Class]")
      ((""
        (INST -1 "LAMBDA(C : finite_set[Class]) : is_finite[Method[Name]]
            ({m: Method[Name] |
                EXISTS (c: Class[Name]): C(c) AND methods(c)(m)})")
        (("" (ASSERT)
          (("" (SPLIT -1)
            (("1" (INST -1 "classes(p!1)") NIL NIL)
             ("2" (HIDE 2)
              (("2" (SKOSIMP*)
                (("2"
                  (CASE-REPLACE "({m: Method[Name] |
                   EXISTS (c: Class[Name]): add(t!1, x!1)(c) AND methods(c)(m)})
     = union({m : Method[Name] | methods(t!1)(m)}, {m : Method[Name] | EXISTS (c : Class[Name]) : x!1(c) AND methods(c)(m)})"
                   :HIDE? T)
                  (("1" (USE "finite_union[Method[Name]]")
                    (("1" (HIDE -1 2)
                      (("1" (TYPEPRED "methods(t!1)")
                        (("1"
                          (CASE-REPLACE
                           "methods(t!1) = {m : Method[Name] | methods(t!1)(m)}"
                           :HIDE? T)
                          (("1" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -1 2)
                    (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                      (("2" (EXPAND* "union" "add" "member")
                        (("2" (IFF)
                          (("2" (PROP)
                            (("1" (SKOSIMP*)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                             ("2" (INST?) NIL NIL)
                             ("3" (SKOSIMP*)
                              (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (HIDE 2)
              (("3" (EXPAND "emptyset")
                (("3"
                  (CASE-REPLACE
                   "{m: Method[Name] | FALSE} = emptyset[Method[Name]]")
                  (("1" (USE "finite_emptyset[Method[Name]]") NIL NIL)
                   ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_set_induction| FORMULA-DECL NIL |FiniteSetInduction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) NIL NIL
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   612 611 T NIL))
 (|get_class_TCC1| 0
  (|get_class_TCC1-1| NIL 3390821142 3396593318 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL))
   24 25 NIL NIL))
 (|lookup_mthd_TCC1| 0
  (|lookup_mthd_TCC1-1| NIL 3396591590 3396593319 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|method_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL))
   44 43 NIL NIL))
 (|lookup_mthd_TCC2| 0
  (|lookup_mthd_TCC2-1| NIL 3396591590 3396597298
   ("" (SKOSIMP*)
    (("" (EXPAND "every")
      (("" (EXPAND "methods")
        (("" (INST 1 "down[Class[Name]](get_class(p!1)(tgt!1))")
          (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   (NIL (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|method_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|methods| CONST-DECL "finite_set[Method]" |ProgramFunctions| NIL))
   4573 44 T NIL))
 (|proper_subterm_sequence| 0
  (|proper_subterm_sequence-1| NIL 3396269350 3396593333
   ("" (INDUCT "c3")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "<<" -3)
        (("2" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST?)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKOSIMP*) (("3" (EXPAND "<<") (("3" (PROPAX) NIL NIL)) NIL)) NIL)
     ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
     ("6" (SKOSIMP*)
      (("6" (EXPAND "<<" -2)
        (("6" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKOSIMP*)
      (("7" (EXPAND "<<" -3)
        (("7" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("8" (SKOSIMP*)
      (("8" (EXPAND "<<" -3)
        (("8" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL) ("11" (GRIND) NIL NIL)
     ("12" (SKOSIMP*)
      (("12" (EXPAND "<<" -2)
        (("12" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("13" (SKOSIMP*)
      (("13" (EXPAND "<<" -2)
        (("13" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("14" (SKOSIMP*)
      (("14" (EXPAND "<<" -4)
        (("14" (SPLIT -4)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("15" (SKOSIMP*)
      (("15" (EXPAND "<<" -3)
        (("15" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("16" (SKOSIMP*)
      (("16" (EXPAND "<<" -2)
        (("16" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("17" (SKOSIMP*)
      (("17" (EXPAND "<<" -2)
        (("17" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("18" (SKOSIMP*)
      (("18" (REWRITE "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (EXPAND "<<" -2)
          (("18" (EXPAND "<<" 1)
            (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
                (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
                  (("18" (SKOSIMP*)
                    (("18" (INST?)
                      (("18" (ASSERT)
                        (("18" (FLATTEN)
                          (("18" (SPLIT 1)
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (SPLIT -4)
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (EXPAND "<<" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (INST? -2)
                                    (("2" (ASSERT) (("2" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REPLACE -1 :DIR RL)
                                    (("3" (EXPAND "<<" 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("4" (INST? -3)
                                    (("4" (ASSERT) (("4" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (SPLIT -4)
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (EXPAND "<<" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (INST? -2)
                                    (("2" (ASSERT) (("2" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REPLACE -1 :DIR RL)
                                    (("3" (EXPAND "<<" 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("4" (INST? -3)
                                    (("4" (ASSERT) (("4" (FLATTEN) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("19" (SKOSIMP*)
      (("19" (EXPAND "<<" -4)
        (("19" (SPLIT -4)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOSIMP*)
      (("20" (EXPAND "<<" -3)
        (("20" (SPLIT -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (SKOSIMP*)
      (("21" (EXPAND "<<" -2)
        (("21" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("22" (GRIND) NIL NIL)
     ("23" (SKOSIMP*)
      (("23" (EXPAND "<<" -2)
        (("23" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("24" (GRIND) NIL NIL)
     ("25" (SKOSIMP*)
      (("25" (EXPAND "<<" -4)
        (("25" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (REPLACE -1 :DIR RL)
            (("5" (EXPAND "<<" 1)
              (("5" (EXPAND "<<" 1) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("6" (INST? -4)
            (("6" (ASSERT)
              (("6" (FLATTEN)
                (("6" (EXPAND "<<" 1) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("26" (SKOSIMP*)
      (("26" (EXPAND "<<" -3)
        (("26" (SPLIT -)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (EXPAND "<<" 1)
              (("1" (EXPAND "<<" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST? -2)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (REPLACE -1 :DIR RL)
            (("3" (EXPAND "<<" 1)
              (("3" (EXPAND "<<" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("4" (INST? -3)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (EXPAND "<<" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|some_is_exists| FORMULA-DECL NIL |listfuncs| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every_is_forall| FORMULA-DECL NIL |listfuncs| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body_induction| FORMULA-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (<< ADT-DEF-DECL "(well_founded?[Body])" |Body_adt| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL))
   1422 1422 T NIL))
 (|proper_subterm_set_clause_sequence| 0
  (|proper_subterm_set_clause_sequence-1| NIL 3396269362 3396593334
   (";;; Proof proper_subterm_set_clause_sequence-1 for formula APSemanticsProperties.proper_subterm_set_clause_sequence"
    (SKOSIMP*)
    ((";;; Proof proper_subterm_set_clause_sequence-1 for formula APSemanticsProperties.proper_subterm_set_clause_sequence"
      (EXPAND "proper_subterm_set_clause")
      ((";;; Proof proper_subterm_set_clause_sequence-1 for formula APSemanticsProperties.proper_subterm_set_clause_sequence"
        (LEMMA "proper_subterm_sequence")
        ((";;; Proof proper_subterm_set_clause_sequence-1 for formula APSemanticsProperties.proper_subterm_set_clause_sequence"
          (INST-CP - "c1!1" "c2!1" "pre_set(m!1)")
          ((";;; Proof proper_subterm_set_clause_sequence-1 for formula APSemanticsProperties.proper_subterm_set_clause_sequence"
            (INST-CP - "c1!1" "c2!1" "post_set(m!1)")
            ((";;; Proof proper_subterm_set_clause_sequence-1 for formula APSemanticsProperties.proper_subterm_set_clause_sequence"
              (INST - "c1!1" "c2!1" "exc_set(m!1)")
              ((";;; Proof proper_subterm_set_clause_sequence-1 for formula APSemanticsProperties.proper_subterm_set_clause_sequence"
                (GROUND) NIL))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNFINISHED
   ((|proper_subterm_set_clause| CONST-DECL "boolean" |ProgramFunctions| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|proper_subterm_sequence| FORMULA-DECL NIL |ProgramFunctions| NIL))
   48 48 NIL NIL))
 (|proper_subterm_is_transitive| 0
  (|proper_subterm_is_transitive-1| NIL 3396272071 3396593341
   ("" (INDUCT "c3")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "<<" 1)
        (("2" (EXPAND "<<" -4)
          (("2" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
     ("6" (GRIND) NIL NIL)
     ("7" (SKOSIMP*)
      (("7" (EXPAND "<<" 1)
        (("7" (EXPAND "<<" -4)
          (("7" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("8" (SKOSIMP*)
      (("8" (EXPAND "<<" 1)
        (("8" (EXPAND "<<" -4)
          (("8" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL) ("11" (GRIND) NIL NIL)
     ("12" (GRIND) NIL NIL) ("13" (GRIND) NIL NIL)
     ("14" (SKOSIMP*)
      (("14" (EXPAND "<<" 1)
        (("14" (EXPAND "<<" -5)
          (("14" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL)
             ("5" (INST -4 "c1!1" "c2!1") (("5" (ASSERT) NIL NIL)) NIL)
             ("6" (INST -4 "c1!1" "c2!1") (("6" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("15" (SKOSIMP*)
      (("15" (EXPAND "<<" 1)
        (("15" (EXPAND "<<" -4)
          (("15" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("16" (GRIND) NIL NIL) ("17" (GRIND) NIL NIL)
     ("18" (SKOSIMP*)
      (("18" (REWRITE "every_is_forall[[BoolExpr, Stmt]]")
        (("18" (EXPAND "<<" (-3 1))
          (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
            (("18" (REWRITE "some_is_exists[[BoolExpr, Stmt]]")
              (("18" (SKOSIMP*)
                (("18" (INST?)
                  (("18" (ASSERT)
                    (("18" (FLATTEN)
                      (("18" (INST 1 "x!1")
                        (("18" (ASSERT)
                          (("18" (SPLIT -5)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (INST -2 "c1!1" "c2!1")
                              (("2" (ASSERT) NIL NIL)) NIL)
                             ("3" (ASSERT) NIL NIL)
                             ("4" (INST -3 "c1!1" "c2!1")
                              (("4" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("19" (SKOSIMP*)
      (("19" (EXPAND "<<" 1)
        (("19" (EXPAND "<<" -5)
          (("19" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL)
             ("5" (ASSERT) NIL NIL)
             ("6" (INST -4 "c1!1" "c2!1") (("6" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOSIMP*)
      (("20" (EXPAND "<<" 1)
        (("20" (EXPAND "<<" -4)
          (("20" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (GRIND) NIL NIL) ("22" (GRIND) NIL NIL) ("23" (GRIND) NIL NIL)
     ("24" (GRIND) NIL NIL)
     ("25" (SKOSIMP*)
      (("25" (EXPAND "<<" 1)
        (("25" (EXPAND "<<" -5)
          (("25" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL)
             ("5" (ASSERT) NIL NIL)
             ("6" (INST -4 "c1!1" "c2!1") (("6" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("26" (SKOSIMP*)
      (("26" (EXPAND "<<" 1)
        (("26" (EXPAND "<<" -4)
          (("26" (SPLIT -)
            (("1" (ASSERT) NIL NIL)
             ("2" (INST -2 "c1!1" "c2!1") (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (ASSERT) NIL NIL)
             ("4" (INST -3 "c1!1" "c2!1") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|some_is_exists| FORMULA-DECL NIL |listfuncs| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every_is_forall| FORMULA-DECL NIL |listfuncs| NIL)
    (|Null?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RefVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RefExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body_induction| FORMULA-DECL NIL |Body_adt| NIL)
    (<< ADT-DEF-DECL "(well_founded?[Body])" |Body_adt| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL))
   720 720 T SHOSTAK))
 (|subterm_subset_varnames| 0
  (|subterm_subset_varnames-1| NIL 3396779500 3396780295
   ("" (INDUCT "b2")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND* "subset?" "member")
        (("2" (SKOSIMP*)
          (("2" (EXPAND "var_names")
            (("2" (EXPAND "some" 1)
              (("2" (FLATTEN)
                (("2" (EXPAND "<<" -3)
                  (("2" (SPLIT -3)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (INST? -2)
                      (("2" (ASSERT)
                        (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL)
                     ("3" (ASSERT) NIL NIL)
                     ("4" (INST? -3)
                      (("4" (ASSERT)
                        (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
     ("6" (GRIND) NIL NIL)
     ("7" (SKOSIMP*)
      (("7" (EXPAND* "subset?" "member" "var_names")
        (("7" (SKOSIMP*)
          (("7" (EXPAND "<<" -3)
            (("7" (EXPAND "some" 1)
              (("7" (FLATTEN)
                (("7" (SPLIT -3)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (INST?)
                    (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (ASSERT) NIL NIL)
                   ("4" (INST? -3)
                    (("4" (ASSERT)
                      (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("8" (SKOSIMP*)
      (("8" (EXPAND* "subset?" "member" "var_names")
        (("8" (EXPAND "<<" -3)
          (("8" (SKOSIMP*)
            (("8" (EXPAND "some" 1)
              (("8" (SPLIT -3)
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST?)
                  (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL)
                 ("4" (INST? -3)
                  (("4" (ASSERT)
                    (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL) ("11" (GRIND) NIL NIL)
     ("12" (GRIND) NIL NIL) ("13" (GRIND) NIL NIL)
     ("14" (SKOSIMP*)
      (("14" (EXPAND* "subset?" "member" "var_names")
        (("14" (EXPAND "<<" -4)
          (("14" (SKOSIMP*)
            (("14" (EXPAND "some" 1)
              (("14" (SPLIT -4)
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST? -2)
                  (("2" (ASSERT)
                    (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL)
                 ("4" (INST? -3)
                  (("4" (ASSERT)
                    (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("5" (ASSERT) NIL NIL)
                 ("6" (INST? -4)
                  (("6" (ASSERT)
                    (("6" (INST? -4) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("15" (SKOSIMP*)
      (("15" (EXPAND* "subset?" "member" "var_names")
        (("15" (SKOSIMP*)
          (("15" (EXPAND "<<" -3)
            (("15" (EXPAND "some" 1)
              (("15" (SPLIT -3)
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST?)
                  (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL)
                 ("4" (INST? -3)
                  (("4" (ASSERT)
                    (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("16" (GRIND) NIL NIL) ("17" (GRIND) NIL NIL)
     ("18" (SKOSIMP*)
      (("18" (EXPAND* "subset?" "member" "var_names")
        (("18" (SKOSIMP*) (("18" (POSTPONE) NIL NIL)) NIL)) NIL))
      NIL)
     ("19" (SKOSIMP*)
      (("19" (EXPAND* "subset?" "member" "var_names")
        (("19" (SKOSIMP*)
          (("19" (EXPAND "<<" -4)
            (("19" (EXPAND "some" 1)
              (("19" (SPLIT -4)
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST? -2)
                  (("2" (ASSERT)
                    (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL)
                 ("4" (INST? -3)
                  (("4" (ASSERT)
                    (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("5" (ASSERT) NIL NIL)
                 ("6" (INST? -4)
                  (("6" (ASSERT)
                    (("6" (INST? -4) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOSIMP*)
      (("20" (EXPAND* "subset?" "member" "var_names")
        (("20" (SKOSIMP*)
          (("20" (EXPAND "<<" -3)
            (("20" (EXPAND "some" 1)
              (("20" (SPLIT -3)
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST? -2)
                  (("2" (ASSERT)
                    (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL)
                 ("4" (INST? -3)
                  (("4" (ASSERT)
                    (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (SKOSIMP*)
      (("21" (EXPAND* "subset?" "member" "var_names")
        (("21" (SKOSIMP*)
          (("21" (EXPAND "<<" -2)
            (("21" (EXPAND "some" 1) (("21" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("22" (GRIND) NIL NIL) ("23" (GRIND) NIL NIL) ("24" (GRIND) NIL NIL)
     ("25" (SKOSIMP*)
      (("25" (EXPAND* "subset?" "member" "var_names")
        (("25" (SKOSIMP*)
          (("25" (EXPAND "<<" -4)
            (("25" (EXPAND "some" 1)
              (("25" (SPLIT -4)
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST? -2)
                  (("2" (ASSERT)
                    (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL)
                 ("4" (INST? -3)
                  (("4" (ASSERT)
                    (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("5" (ASSERT) NIL NIL)
                 ("6" (INST? -4)
                  (("6" (ASSERT)
                    (("6" (INST? -4) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("26" (SKOSIMP*)
      (("26" (EXPAND* "subset?" "member" "var_names")
        (("26" (SKOSIMP*)
          (("26" (EXPAND "<<" -3)
            (("26" (EXPAND "some" 1)
              (("26" (SPLIT -3)
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST?)
                  (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL)
                 ("4" (INST? -3)
                  (("4" (ASSERT)
                    (("4" (INST? -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 69679 1788 T SHOSTAK))
 (|subterm_subset_of_var| 0
  (|subterm_subset_of_var-1| NIL 3396779041 3396779495
   ("" (SKOSIMP*)
    (("" (USE "subterm_subset_varnames")
      (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|subterm_subset_varnames| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL))
   1711 215 T SHOSTAK))
 (|problem_with_var_names| 0
  (|problem_with_var_names-1| NIL 3396843371 3396843375
   ("" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL) UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |ProgramFunctions| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|CaseJML| ADT-CONSTRUCTOR-DECL "[list[[BoolExpr, Stmt]] -> (CaseJML?)]"
     |Body_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL))
   383 145 T SHOSTAK)))
(|WellFormedProgram|
 (|wf_program_variables_disjoint| 0
  (|wf_program_variables_disjoint-1| NIL 3393587608 3396593295
   ("" (SKOSIMP)
    (("" (EXPAND* "wf_Program" "wf_program_variables_disjoint_def")
      (("" (GROUND) NIL NIL)) NIL))
    NIL)
   UNFINISHED
   ((|wf_program_variables_disjoint_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL))
   20 20 T SHOSTAK))
 (|wf_program_variables_not_reserved_words| 0
  (|wf_program_variables_not_reserved_words-1| NIL 3394987767 3396593295
   ("" (SKOSIMP)
    (("" (EXPAND* "wf_Program" "wf_program_variables_not_reserved_words_def")
      (("" (FLATTEN) NIL NIL)) NIL))
    NIL)
   UNFINISHED
   ((|wf_program_variables_not_reserved_words_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL))
   2 1 T SHOSTAK))
 (|wf_program_has_unique_class_names| 0
  (|wf_program_has_unique_class_names-1| NIL 3390201065 3396593295
   ("" (SKOSIMP)
    (("" (EXPAND* "wf_Program" "wf_program_has_unique_class_names_def")
      (("" (FLATTEN) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   UNFINISHED
   ((|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL))
   2 3 T SHOSTAK))
 (|wf_program_has_wf_classes| 0
  (|wf_program_has_wf_classes-1| NIL 3393587755 3396593295
   ("" (SKOSIMP)
    (("" (EXPAND "wf_Program")
      (("" (FLATTEN)
        (("" (EXPAND "wf_Classes") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_Classes| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL))
   2 2 T SHOSTAK))
 (|wf_class_has_unique_method_names| 0
  (|wf_class_has_unique_method_names-1| NIL 3393587790 3396593295
   ("" (SKOSIMP)
    (("" (EXPAND "wf_Class") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   UNFINISHED
   ((|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL))
   19 20 T SHOSTAK))
 (|wf_program_all_variables_declared| 0
  (|wf_program_all_variables_declared-1| NIL 3395742105 3396593295
   ("" (SKOSIMP*)
    (("" (EXPAND "wf_Program")
      (("" (FLATTEN)
        (("" (EXPAND "wf_program_all_variables_declared")
          (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_program_all_variables_declared| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |WellFormedProgram| NIL))
   3 2 T SHOSTAK)))

