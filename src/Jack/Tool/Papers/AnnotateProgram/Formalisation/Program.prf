(JType)
(NumExpr)
(BoolExpr)
(RefExpr)
(Expr)
(Stmt)
(Program
 (getFieldDecls_TCC1 0
  (getFieldDecls_TCC1-1 nil 3390200268 3390200630
   ("" (subtype-tcc) nil nil) unfinished nil 167185 1620 t nil))
 (getLocalDecls_TCC1 0
  (getLocalDecls_TCC1-1 nil 3390200268 3390200397
   ("" (subtype-tcc) nil nil) unfinished nil 202 90 nil nil))
 (getGhostDecls_TCC1 0
  (getGhostDecls_TCC1-1 nil 3390200268 3390200397
   ("" (subtype-tcc) nil nil) unfinished nil 89 90 nil nil)))
(WellFormedProgram
 (var_names_TCC1 0
  (var_names_TCC1-1 nil 3390200393 3390201317
   ("" (skosimp*)
    (("" (typepred "fs!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(n : ({n: Name |
                     EXISTS (f: FieldDecl[Name]):
                       fs!1(f) AND name(f) = n})) : f!1(choose({f : FieldDecl[Name] | fs!1(f) AND name(f) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists")
                        (("3" (assert) (("3" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "n!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     WellFormedProgram nil)
    (x2!1 skolem-const-decl
     "({n: Name | EXISTS (f: FieldDecl[Name]): fs!1(f) AND name(f) = n})"
     WellFormedProgram nil)
    (f!2 skolem-const-decl "FieldDecl[Name]" WellFormedProgram nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (fs!1 skolem-const-decl "finite_set[FieldDecl[Name]]"
     WellFormedProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   232237 5570 t nil))
 (var_names_TCC2 0
  (var_names_TCC2-3 nil 3390201367 3390201371
   ("" (skosimp*)
    (("" (typepred "ls!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(n : ({n: Name |
                       EXISTS (f: LocalVarDecl[Name]):
                         ls!1(f) AND name(f) = n})) : f!1(choose({f : LocalVarDecl[Name] | ls!1(f) AND name(f) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists")
                        (("3" (assert) (("3" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "n!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ls!1 skolem-const-decl "finite_set[LocalVarDecl[Name]]"
     WellFormedProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (choose const-decl "(p)" sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]" WellFormedProgram nil)
    (x2!1 skolem-const-decl
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     WellFormedProgram nil)
    (x1!1 skolem-const-decl
     "({n: Name | EXISTS (l: LocalVarDecl[Name]): ls!1(l) AND name(l) = n})"
     WellFormedProgram nil)
    (injective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (JType type-decl nil JType_adt nil)
    (Name formal-nonempty-type-decl nil WellFormedProgram nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil))
   2573 300 t nil)
  (var_names_TCC2-2 nil 3390201339 3390201359
   ("" (skosimp*)
    (("" (typepred "fs!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(n : ({n: Name |
                       EXISTS (f: LocalVarDecl[Name]):
                         fs!1(f) AND name(f) = n})) : f!1(choose({f : LocalVarDecl[Name] | fs!1(f) AND name(f) = n}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert) nil)
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists")
                        (("2" (inst?) (("2" (assert) nil)))))))))
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists")
                        (("3" (assert) (("3" (inst?) nil)))))))))))))))
             ("2" (skosimp*)
              (("2" (typepred "n!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (assert)
                      (("2" (inst?) nil))))))))))))))))))))
    nil)
   unfinished nil 18490 180 t nil)
  (var_names_TCC2-1 nil 3390200393 3390200398
   ("" (subtype-tcc) nil nil) unfinished nil 331 210 nil nil))
 (wf_program_has_unique_class_names 0
  (wf_program_has_unique_class_names-1 nil 3390201065 3390201073
   ("" (postpone) nil nil) unfinished nil 7829 160 t shostak)))

