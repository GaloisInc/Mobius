Equivalence[Name : TYPE+, CP: TYPE FROM Name] : THEORY
BEGIN

  IMPORTING Semantics[Name],
            MonitoredProgramSemantics[CP, Name],
            MVASemantics[CP, Name],
            AnnotateProgram[Name, CP]

  cp2val(q: CP): Val =
    Int(unique(q))

  % Says if an MVA state is modeled by a Program state
  % THINK: It may be better to have the automaton and program also as
  % parameters (context)
  MVA_modeled?(sA: AState, sP: PState): boolean =
    cp2val(cp(sA)) = gvs(st(sP))(cp) AND
    (FORALL (n: Name): NOT Bottom?(stA(sA)(n)) IMPLIES
      stA(sA)(n) = gvs(st(sP))(n)) AND
    cp(sA) = halted IMPLIES up?(ex(sP)) AND down(ex(sP)) = JMLExc

  % Says s2P is a "super state" of s1P
  Program_modeled?(s1P, s2P: PState): boolean =
    ex(s1P) = ex(s2P) AND
    fvs(st(s1P)) = fvs(st(s2P)) AND
    lvs(st(s1P)) = lvs(st(s2P)) AND
    FORALL (n: Name): NOT Bottom?(gvs(st(s1P))(n)) IMPLIES
      gvs(st(s1P))(n) = gvs(st(s2P))(n) 

  MP_modeled?(sMP: MState, sP: PState): boolean =
    MVA_modeled?(astate(sMP), sP) AND 
    Program_modeled?(pstate(sMP), sP)


  % TODO: Define
  assertion_breached?(p: Program)(s1, s2: PState, n: nat): boolean

  % JML Exceptions are only generated by annotations
  JMLExc_iff_assertion_breached: LEMMA
    FORALL (p: Program)(s2P: PState, n: nat):
      run_Program(p)(s2P)(n) IMPLIES
      up?(ex(s2P)) IMPLIES 
      down(ex(s2P)) = JMLExc IMPLIES
        assertion_breached?(p)(initial_Program_state(p), s2P, n)


  initial_states_are_equivalent: LEMMA
    FORALL (p: Program, a: MVA):
      LET mp = (# mva := a, program := p #) IN
      wf_MP(mp) IMPLIES
        MP_modeled?(initial_MP_state(mp), initial_Program_state(p))

  % The main result
  % NOTE: Because of the way the semantics are defined, we can use the seme n
  % for both derivations
  correcteness_of_ann_program: THEOREM
    FORALL (p: Program, a: MVA)(n: nat, s2MP: MState, s2AP: PState):
      LET mp = (# mva := a, program := p #),
          ap = ann_program(p, a)
      IN
      wf_MP(mp) IMPLIES
        run_Program(ap)(s2AP)(n) AND
        run_MonitoredProgram(mp)(s2MP)(n) IMPLIES
          MP_modeled?(s2MP, s2AP)

END Equivalence
