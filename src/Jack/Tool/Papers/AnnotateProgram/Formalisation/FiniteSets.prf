(|Finite_Set_Prop1|
 (|get_y_from_x_TCC1| 0
  (|get_y_from_x_TCC1-1| NIL 3381043929 3381486213 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (X FORMAL-TYPE-DECL NIL |Finite_Set_Prop1| NIL)
    (Y FORMAL-TYPE-DECL NIL |Finite_Set_Prop1| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   49 34 NIL NIL))
 (|subset_prop| 0
  (|subset_prop-2| NIL 3381209619 3381486174
   ("" (SKOSIMP)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        ((""
          (INST + "N!1"
           "LAMBDA (x: {x: X | EXISTS (y: Y): P!1(x, y)}): f!1(x, get_y_from_x(P!1, x))")
          (("1" (EXPAND* "get_y_from_x" "injective?")
            (("1" (SKOSIMP)
              (("1" (INST?)
                (("1" (ASSERT) NIL NIL)
                 ("2" (DELETE 2 -1)
                  (("2" (TYPEPRED "x2!1")
                    (("2" (SKOLEM!)
                      (("2" (EXPAND* "nonempty?" "empty?" "member")
                        (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (DELETE 2 -1)
                  (("3" (TYPEPRED "x1!1")
                    (("3" (SKOLEM!)
                      (("3" (EXPAND* "nonempty?" "empty?" "member")
                        (("3" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOLEM!)
            (("2" (EXPAND "get_y_from_x") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|injective?| CONST-DECL "bool" |functions| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({x: X | EXISTS (y: Y): P!1(x, y)})"
     |Finite_Set_Prop1| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({x: X | EXISTS (y: Y): P!1(x, y)})"
     |Finite_Set_Prop1| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (X FORMAL-TYPE-DECL NIL |Finite_Set_Prop1| NIL)
    (Y FORMAL-TYPE-DECL NIL |Finite_Set_Prop1| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (P!1 SKOLEM-CONST-DECL "pred[[X, Y]]" |Finite_Set_Prop1| NIL)
    (|get_y_from_x| CONST-DECL "Y" |Finite_Set_Prop1| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL))
   170 149 T NIL)
  (|subset_prop-1| NIL 3380980760 3381053197
   ("" (SKOSIMP)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        ((""
          (INST + "N!1"
           "LAMBDA (x: {x: X | EXISTS (y: Y): P!1(x, y)}): f!1(x, get_y_from_x(P!1, x))")
          (("1" (EXPAND "get_y_from_x")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (DELETE 2 -1)
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOLEM!)
                        (("2" (EXPAND* "nonempty?" "empty?" "member")
                          (("2" (INST?) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (DELETE 2 -1)
                    (("3" (TYPEPRED "x1!1")
                      (("3" (SKOLEM!)
                        (("3" (EXPAND* "nonempty?" "empty?" "member")
                          (("3" (INST?) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOLEM!)
            (("2" (EXPAND "get_y_from_x") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNTRIED
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|get_y_from_x| CONST-DECL "Y" |Finite_Set_Prop1| NIL) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (Y FORMAL-TYPE-DECL NIL |Finite_Set_Prop1| NIL)
    (X FORMAL-TYPE-DECL NIL |Finite_Set_Prop1| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) NIL NIL
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   96626 120 T SHOSTAK)))
(|Epsilon_Props|
 (|epsilon_singleton| 0
  (|epsilon_singleton-1| NIL 3381486411 3381486420
   ("" (SKOLEM!)
    (("" (LEMMA "epsilon_ax[T]")
      (("" (INST?)
        (("" (EXPAND* "singleton")
          (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST + "x!1") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |Epsilon_Props| NIL)
    (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL))
   694 27 T NIL)))
(|MVA_Finite_Props|
 (|get_t_from_gs_TCC1| 0
  (|get_t_from_gs_TCC1-1| NIL 3381068089 3381486214 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL) (|Store| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   38 38 NIL NIL))
 (|all_guards_finite| 0
  (|all_guards_finite-3| "del" 3381210486 3381486214
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        ((""
          (INST + "N!1"
           "LAMBDA (gs: {p: Guard[CP, Name] | EXISTS (t: Transition[CP, Name]): ts!1(t) AND t`guard = p}): f!1(get_t_from_gs(ts!1, gs))")
          (("1" (EXPAND* "get_t_from_gs" "injective?")
            (("1" (SKOSIMP)
              (("1" (INST?)
                (("1" (ASSERT)
                  (("1" (EXPAND "singleton")
                    (("1" (APPLY-EXTENSIONALITY 1) NIL NIL)) NIL))
                  NIL)
                 ("2" (DELETE -1 2)
                  (("2" (TYPEPRED "x2!1")
                    (("2" (SKOLEM!)
                      (("2" (EXPAND* "nonempty?" "empty?" "member")
                        (("2" (INST?)
                          (("2" (EXPAND "singleton") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (TYPEPRED "x1!1")
                  (("3" (DELETE -2 2)
                    (("3" (SKOLEM!)
                      (("3" (EXPAND* "nonempty?" "empty?" "member")
                        (("3" (INST?)
                          (("3" (EXPAND "singleton") (("3" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOLEM!)
            (("2" (EXPAND "get_t_from_gs") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|get_t_from_gs| CONST-DECL "Transition" |MVA_Finite_Props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL) (|Store| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL) NIL NIL
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   56 51 T NIL)
  (|all_guards_finite-2| "del" 3381210221 3381210221
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        ((""
          (INST + "N!1"
           "LAMBDA (gs: {p: Guard[CP, Name] | EXISTS (t: Transition[CP, Name]): ts!1(t) AND t`guard = p}): f!1(get_t_from_gs(ts!1, gs))")
          (("1" (EXPAND* "get_t_from_gs" "injective?")
            (("1" (SKOLEM-TYPEPRED)
              (("1" (INST?)
                (("1" (ASSERT)
                  (("1" (EXPAND "singleton")
                    (("1" (SKOLEM!)
                      (("1" (SKOLEM-TYPEPRED)
                        (("1" (FLATTEN)
                          (("1" (APPLY-EXTENSIONALITY 1) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (POSTPONE) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 48434 32 T SHOSTAK)
  (|all_guards_finite-1| NIL 3381059758 3381122732
   ("" (SKOLEM!)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          ((""
            (INST + "N!1"
             "LAMBDA (gs: {p: Guard[CP, Name] | EXISTS (t: Transition[CP, Name]): ts!1(t) AND t`guard = p}): f!1(get_t_from_gs(ts!1, gs))")
            (("1" (EXPAND* "get_t_from_gs" "injective?")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (DELETE -2)
                      (("1" (EXPAND "singleton")
                        (("1" (APPLY-EXTENSIONALITY 1) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (DELETE -1 2)
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOLEM!)
                        (("2" (EXPAND* "nonempty?" "empty?" "member")
                          (("2" (INST?)
                            (("2" (SPLIT)
                              (("1" (FLATTEN) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "singleton")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (DELETE -2 2)
                      (("3" (SKOLEM!)
                        (("3" (EXPAND* "nonempty?" "empty?" "member")
                          (("3" (INST?)
                            (("3" (EXPAND "singleton") (("3" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOLEM!)
              (("2" (EXPAND "get_t_from_gs") (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|get_t_from_gs| CONST-DECL "Transition" |MVA_Finite_Props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL) (|Store| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL) NIL NIL
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   5372106 265 T SHOSTAK))
 (|all_guards_subset| 0
  (|all_guards_subset-1| NIL 3381123421 3381486214
   ("" (SKOSIMP)
    (("" (EXPAND "subset?")
      (("" (SKOSIMP)
        (("" (EXPAND "member")
          (("" (SKOLEM!)
            (("" (INST?)
              (("" (FLATTEN)
                (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL))
   8 7 T SHOSTAK))
 (|MC_TCC2_subset2_is_finite| 0
  (|MC_TCC2_subset2_is_finite-2| NIL 3381488693 3381488714
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        (("" (AUTO-REWRITE "nonempty?" "empty?" "member" "choose" "singleton")
          ((""
            (INST + "N!1+1" "LAMBDA (ts: ({t: Transition[CP, Name] |
                                      scp(t) = halted[CP, Name] AND es!1(event(t))
                                  AND guard(t) =
                                       (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]): TRUE)
                                  AND action(t) = skip[CP, Name]
                                  AND tcp(t) = halted[CP, Name]})):
                                    IF empty?(ts) THEN N!1
                                    ELSE f!1(event(choose(ts)))
                                    ENDIF")
            (("1" (EXPAND* "injective?" "singleton")
              (("1" (SKOSIMP)
                (("1" (LIFT-IF -2)
                  (("1" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (LIFT-IF -2)
                        (("1" (SPLIT -2)
                          (("1" (EXPAND* "empty?" "member")
                            (("1" (INST?) (("1" (INST?) NIL NIL)) NIL)) NIL)
                           ("2" (FLATTEN)
                            (("2" (EXPAND* "empty?" "member")
                              (("2" (INST? -2)
                                (("2" (SKOLEM!)
                                  (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2"
                        (CASE "epsilon({y:
                                                                      ({t: Transition[CP, Name] |
                                                                               scp(t) = halted[CP, Name]
                                                                           AND es!1(event(t))
                                                                           AND guard(t) =
                                                                                (LAMBDA (stA: Store[CP, Name],
                                                                                         stP: PSt[Name]):
                                                                                   TRUE)
                                                                           AND action(t) = skip[CP, Name]
                                                                           AND tcp(t) = halted[CP, Name]})
                                                                      | y = x1!1}) = x1!1")
                        (("1" (REPLACE -1 -2)
                          (("1"
                            (CASE "epsilon({y_1:
                                                                              ({t: Transition[CP, Name] |
                                                                                       scp(t) = halted[CP, Name]
                                                                                   AND es!1(event(t))
                                                                                   AND guard(t) =
                                                                                        (LAMBDA (stA: Store[CP, Name],
                                                                                                 stP: PSt[Name]):
                                                                                           TRUE)
                                                                                   AND action(t) = skip[CP, Name]
                                                                                   AND tcp(t) = halted[CP, Name]})
                                                                              | y_1 = x2!1}) = x2!1")
                            (("1" (REPLACE -1 -3)
                              (("1" (DELETE -1 -2)
                                (("1" (FLATTEN)
                                  (("1" (SKOLEM!)
                                    (("1" (LIFT-IF -2)
                                      (("1" (SPLIT -2)
                                        (("1" (FLATTEN)
                                          (("1" (INST? -1)
                                            (("1"
                                              (INSTANTIATE -3
                                               ("event(x1!1)" "event(x2!1)"))
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (SKOLEM!)
                                            (("2"
                                              (INSTANTIATE -4
                                               ("event(x1!1)" "event(x2!1)"))
                                              (("2" (SPLIT -4)
                                                (("1" (DECOMPOSE-EQUALITY 1)
                                                  NIL NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2"
                                (LEMMA
                                 "epsilon_singleton[({t: Transition[CP, Name] |
                                                              scp(t) = halted[CP, Name] AND es!1(event(t))
                                                          AND guard(t) =
                                                               (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]):
                                                                  TRUE)
                                                          AND action(t) = skip[CP, Name]
                                                          AND tcp(t) = halted[CP, Name]})]")
                                (("2" (INST?)
                                  (("2" (EXPAND "singleton")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2"
                            (LEMMA
                             "epsilon_singleton[({t: Transition[CP, Name] |
                                                        scp(t) = halted[CP, Name] AND es!1(event(t))
                                                    AND guard(t) =
                                                         (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]):
                                                            TRUE)
                                                    AND action(t) = skip[CP, Name]
                                                    AND tcp(t) = halted[CP, Name]})]")
                            (("2" (INST?)
                              (("2" (EXPAND "singleton")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP) (("2" (SKOLEM!) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
             ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Finite_Props| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|f!1| SKOLEM-CONST-DECL "[(es!1) -> below[N!1]]" |MVA_Finite_Props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (N!1 SKOLEM-CONST-DECL "nat" |MVA_Finite_Props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|epsilon| CONST-DECL "T" |epsilons| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|skip| CONST-DECL "Action" MVA NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|OneAction| TYPE-EQ-DECL NIL MVA NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL) (|Store| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|es!1| SKOLEM-CONST-DECL "finite_set[Event[CP, Name]]" |MVA_Finite_Props|
     NIL)
    (|halted| CONST-DECL "CP" MVA NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|epsilon_singleton| FORMULA-DECL NIL |Epsilon_Props| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   1841 680 NIL NIL)
  (|MC_TCC2_subset2_is_finite-1| NIL 3381488620 3381488648
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "is_finite")
      (("" (SKOLEM!)
        (("" (AUTO-REWRITE "nonempty?" "empty?" "member" "choose" "singleton")
          ((""
            (INST + "N!1+1" "LAMBDA (ts: ({t: Transition[CP, Name] |
                                    scp(t) = halted[CP, Name] AND es!1(event(t))
                                AND guard(t) =
                                     (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]): TRUE)
                                AND action(t) = skip[CP, Name]
                                AND tcp(t) = halted[CP, Name]})):
                                  IF empty?(ts) THEN N!1
                                  ELSE f!1(event(choose(ts)))
                                  ENDIF")
            (("1" (EXPAND* "injective?" "singleton")
              (("1" (SKOSIMP)
                (("1" (LIFT-IF -2)
                  (("1" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (LIFT-IF -2)
                        (("1" (SPLIT -2)
                          (("1" (EXPAND* "empty?" "member")
                            (("1" (INST?) (("1" (INST?) NIL)))))
                           ("2" (FLATTEN)
                            (("2" (EXPAND* "empty?" "member")
                              (("2" (INST? -2)
                                (("2" (SKOLEM!)
                                  (("2" (ASSERT)
                                    (("2" (GRIND) NIL)))))))))))))))))
                     ("2" (ASSERT)
                      (("2"
                        (CASE "epsilon({y:
                                                             ({t: Transition[CP, Name] |
                                                                      scp(t) = halted[CP, Name]
                                                                  AND es!1(event(t))
                                                                  AND guard(t) =
                                                                       (LAMBDA (stA: Store[CP, Name],
                                                                                stP: PSt[Name]):
                                                                          TRUE)
                                                                  AND action(t) = skip[CP, Name]
                                                                  AND tcp(t) = halted[CP, Name]})
                                                             | y = x1!1}) = x1!1")
                        (("1" (REPLACE -1 -2)
                          (("1"
                            (CASE "epsilon({y_1:
                                                                   ({t: Transition[CP, Name] |
                                                                            scp(t) = halted[CP, Name]
                                                                        AND es!1(event(t))
                                                                        AND guard(t) =
                                                                             (LAMBDA (stA: Store[CP, Name],
                                                                                      stP: PSt[Name]):
                                                                                TRUE)
                                                                        AND action(t) = skip[CP, Name]
                                                                        AND tcp(t) = halted[CP, Name]})
                                                                   | y_1 = x2!1}) = x2!1")
                            (("1" (REPLACE -1 -3)
                              (("1" (DELETE -1 -2)
                                (("1" (FLATTEN)
                                  (("1" (SKOLEM!)
                                    (("1" (LIFT-IF -2)
                                      (("1" (SPLIT -2)
                                        (("1" (FLATTEN)
                                          (("1" (INST? -1)
                                            (("1"
                                              (INSTANTIATE -3
                                               ("event(x1!1)" "event(x2!1)"))
                                              (("1" (ASSERT) NIL)))))))
                                         ("2" (FLATTEN)
                                          (("2" (SKOLEM!)
                                            (("2"
                                              (INSTANTIATE -4
                                               ("event(x1!1)" "event(x2!1)"))
                                              (("2" (SPLIT -4)
                                                (("1" (DECOMPOSE-EQUALITY 1)
                                                  NIL)
                                                 ("2" (PROPAX)
                                                  NIL)))))))))))))))))))))
                             ("2" (HIDE-ALL-BUT 1)
                              (("2"
                                (LEMMA
                                 "epsilon_singleton[({t: Transition[CP, Name] |
                                                    scp(t) = halted[CP, Name] AND es!1(event(t))
                                                AND guard(t) =
                                                     (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]):
                                                        TRUE)
                                                AND action(t) = skip[CP, Name]
                                                AND tcp(t) = halted[CP, Name]})]")
                                (("2" (INST?)
                                  (("2" (EXPAND "singleton")
                                    (("2" (PROPAX) NIL)))))))))))))
                         ("2" (HIDE-ALL-BUT 1)
                          (("2"
                            (LEMMA
                             "epsilon_singleton[({t: Transition[CP, Name] |
                                                scp(t) = halted[CP, Name] AND es!1(event(t))
                                            AND guard(t) =
                                                 (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]):
                                                    TRUE)
                                            AND action(t) = skip[CP, Name]
                                            AND tcp(t) = halted[CP, Name]})]")
                            (("2" (INST?)
                              (("2" (EXPAND "singleton")
                                (("2" (PROPAX) NIL)))))))))
                         ("3" (INST?) NIL)))))))))))))
             ("2" (SKOSIMP) (("2" (SKOLEM!) (("2" (ASSERT) NIL)))))
             ("3" (SKOSIMP) (("3" (ASSERT) NIL))))))))))))
    NIL)
   UNFINISHED NIL 2577 544 NIL NIL)))

