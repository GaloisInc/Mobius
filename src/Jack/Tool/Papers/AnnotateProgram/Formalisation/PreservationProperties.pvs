% assumptions on monitors and programs that are preserved by different
% translation steps

% Note: for a complete treatment, we should also show that the legal_Program
% assumption is preserved by complete_MP translation and annotation generation
% algorithm. However, to prove this, we need to make some additional 
% assumptions on the form of the try and catch blocks in finally statements:
% these should not contain method calls that get annotated, otherwise the 
% property might not be preserved (i.e. suppose try
% contains a call to m, m always terminates normally, and the finally
% block throws a NullPointerException - after annotation generation, the
% call to m might throw a JMLException, but the whole try-catch-finally
% statement will throw a NullPointerException). This could be fixed by adding
% a syntactic condition NoMonitoredMethodCallInTryOrCatchBlock(mp), which is 
% preserved by the first translation step. Then we can use that legal_Program
% for a program with complete monitor and this condition ensure that the
% annotated program is also a legal_Program. 


% Properties that are preserved by first translation step
CompleteMonitorProgramPropertiesPreservation[CP, Name : TYPE+] : THEORY
BEGIN

ASSUMING 

    IMPORTING MVA[CP, Name]

    CP_not_only_halted : ASSUMPTION
      EXISTS(cp : CP) : NOT cp = halted

ENDASSUMING



  IMPORTING CompleteMonitor[CP, Name],
            ContainsNoMethodCall[Name],
            WfSetStmts[Name, MonitoredProgram, MPState,
                             LAMBDA(mp : MonitoredProgram) : program(mp),
                             LAMBDA(s : MPState) : pstate(s),
                             lookup, update_PState, execute_set,
                             execute_assert, execute_CaseJML, 
                             on_method_entry_MP, on_method_exit_normal_MP,
                             on_method_exit_exceptional_MP],
            WellBehavedMVA[CP, Name]

  % convenience lemmas about existence of derivations
  derive_equivalence_if : LEMMA % :-)
    FORALL(mp : (wf_and_partial_MP), b : (wf_Body(program(mp))),
           sMP1, sMP2 : MPState, v : Val, n : nat) :
      contains_no_method_call(b) IMPLIES
      subset?(var_names(b), ext_declared_var_names(program(mp))) IMPLIES
      derive(complete_MP(mp))(b, sMP1, v, sMP2)(n) IMPLIES
         derive(mp)(b, sMP1, v, sMP2)(n)


  derive_equivalence_only_if : LEMMA % :-)
    FORALL(mp : (wf_and_partial_MP), b : (wf_Body(program(mp))),
           sMP1, sMP2 : MPState, v : Val, n : nat) :
      contains_no_method_call(b) IMPLIES
      subset?(var_names(b), ext_declared_var_names(program(mp))) IMPLIES
      derive(mp)(b, sMP1, v, sMP2)(n) IMPLIES
      derive(complete_MP(mp))(b, sMP1, v, sMP2)(n)

  derive_equivalence : LEMMA % :-)
    FORALL(mp : (wf_and_partial_MP), b : (wf_Body(program(mp))),
           sMP1, sMP2 : MPState, v : Val, n : nat) :
      contains_no_method_call(b) IMPLIES
      subset?(var_names(b), ext_declared_var_names(program(mp))) IMPLIES
      (derive(complete_MP(mp))(b, sMP1, v, sMP2)(n) IFF
         derive(mp)(b, sMP1, v, sMP2)(n))

  % set annotations should not contain method calls
  % this is preserved by first translation step
  contains_no_method_call_preserved_by_complete_MP : LEMMA % :-)
     FORALL(mp : (wf_and_partial_MP)) :
      contains_no_method_call_in_sets_in_program(program(mp)) IMPLIES
      contains_no_method_call_in_sets_in_program(program(complete_MP(mp)))

  % set annotations should be wellformed
  % this is preserved by first translation step
  wf_set_stmts_preserved_by_complete_MP : LEMMA % :-)
    FORALL(mp : (wf_and_partial_MP)) :
      wf_set_stmts(mp) IMPLIES
      contains_no_method_call_in_sets_in_program(program(mp)) IMPLIES
        wf_set_stmts(complete_MP(mp))

END CompleteMonitorProgramPropertiesPreservation


% Properties that are preserved by second translation step, and that 
% are needed to show correctness of third translation step
AnnotateProgramPropertiesPreservation[CP, Name : TYPE+] : THEORY
BEGIN

  ASSUMING

    IMPORTING ValProp[Name]

    CP_is_enumerable : ASSUMPTION
      EXISTS (f : [CP -> nat]) : injective?(f)

    infinite_namespace : ASSUMPTION
      is_infinite({n : Name | TRUE})

    IMPORTING VariableNames[CP, Name]

    name_of_exists : ASSUMPTION
      EXISTS (f : [mp : (wf_and_complete_MP) -> [CP -> (legal_names(mp))]]) : 
        FORALL(mp : (wf_and_complete_MP)) : 
          injective?(f(mp))

    IMPORTING MVA[CP, Name]

    CP_not_only_halted : ASSUMPTION
      EXISTS(cp : CP) : NOT cp = halted


  ENDASSUMING

  IMPORTING Equivalence[CP, Name],
            ContainsNoMethodCall[Name],
            WfSetStmts[Name, MonitoredProgram, MPState,
                             LAMBDA(mp : MonitoredProgram) : program(mp),
                             LAMBDA(s : MPState) : pstate(s),
                             lookup, update_PState, execute_set,
                             execute_assert, execute_CaseJML, 
                             on_method_entry_MP, on_method_exit_normal_MP,
                             on_method_exit_exceptional_MP],
            WfSetStmtsAP[Name],
            CompleteMonitorProgramPropertiesPreservation[CP, Name],
            WellBehavedMVA[CP, Name]


  % given APState, construct state for monitored program
  make_MPState(mp : (wf_and_complete_MP))(s : APState) : MPState =
    (# astate := initial_MVA_state(mva(mp)),
       stuck := FALSE,
       pstate := pstate(s),
       gvs := LAMBDA(n : Name) : IF var_names(getGhostDecls(program(mp)))(n)
                                 THEN gvs(s)(n)
                                 ELSE Bottom
                                 ENDIF #)

  % constructed monitored program state is wellformed
  wf_state_make_MPState : LEMMA % :-)
    FORALL(mp : (wf_and_complete_MP), s : APState) : 
      wf_state(ann_program(mp))(s) IMPLIES
        wf_state(mp)(make_MPState(mp)(s))

  
  % convenience lemma about existence of derivations
  derive_equivalence_if : LEMMA % :-)
    FORALL(mp : (wf_and_complete_MP), b : (wf_Body(program(mp))),
           sAP1, sAP2 : APState, v : Val, n : nat) :
      wf_state(ann_program(mp))(sAP1) IMPLIES
      contains_no_method_call(b) IMPLIES
      subset?(var_names(b), ext_declared_var_names(program(mp))) IMPLIES
      derive(ann_program(mp))(b, sAP1, v, sAP2)(n) IMPLIES
        derive(mp)(b, make_MPState(mp)(sAP1), v, make_MPState(mp)(sAP2))(n)

  % generated annotations contain no method calls
  ann_actions_contains_no_method_calls : LEMMA % :-)
    FORALL(l : Action) :
      (FORALL (oa : OneAction) : 
         member(oa, l) IMPLIES contains_no_method_call(source(oa))) IMPLIES
      contains_no_method_call(ann_action(l))


  % set annotations should not contain method calls
  % this is preserved by second translation step
  contains_no_method_call_preserved_by_ann_program : LEMMA % :-)
    FORALL(mp : (wf_and_complete_MP)) :
      contains_no_method_call_in_sets_in_program(program(mp)) IMPLIES
      contains_no_method_call_in_sets_in_program(ann_program(mp))

  IMPORTING AnnEventPreservesMPModeled[CP, Name],
            CorrectnessAnnProgram[CP, Name]

  % conditions on well_behavedness of monitors are appropriate for
  % annotation generation algorithm
  well_behaved_MVA_appropriate_for_annot_gen : LEMMA % :-)
    FORALL(mp : (wf_and_complete_MP)) :
    well_behaved_MVA(mva(mp))(APStateToAStore(mp))
      IMPLIES
      well_behaved_MVA_for_annot_gen(mp)

  % set annotations should be wellformed
  % this is preserved by second translation step
  wf_set_stmts_preserved_by_ann_program : LEMMA % :-)
    FORALL(mp : (wf_and_complete_MP)) :
      wf_set_stmts(mp) IMPLIES
      well_behaved_MVA(mva(mp))(APStateToAStore(mp)) IMPLIES
      contains_no_method_call_in_sets_in_program(program(mp)) IMPLIES
      wf_set_stmts_AP(ann_program(mp))


END AnnotateProgramPropertiesPreservation



