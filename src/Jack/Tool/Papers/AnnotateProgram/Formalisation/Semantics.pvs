% Operational semantics, section 3.2

Excpt : DATATYPE
BEGIN

  Throwable : Throwable?
  NullPointer : NullPointer?
  JMLExc : JMLExc?


END Excpt


State[Name : TYPE+] : THEORY
BEGIN

  IMPORTING Excpt,
            WellFormedProgram[Name],
            Val,
            ValProp

  Store : TYPE = [Name -> Val]

  % Field, ghost and local variables
  % fvs, gvs and lvs are partial functions from name to values
  % Values are integers
  % If it supposed to be a boolean, <= 0 = False, > 0 = True
  PSt : TYPE = [# fvs, lvs : Store #]

  PState : TYPE = [# ex : lift[Excpt],
                     st : PSt #]

  lift_PSt(p : PSt) : PState =
    (# ex := bottom, st := p #)

  CONVERSION lift_PSt

  % So far, I'm not modelling that the sets are disjoint
  % This would imply adding a test to update, that vn is in the domain

  is_local(vn : Name, sigma : PState) : boolean =
    defined?(lvs(st(sigma))(vn))

  is_field(vn : Name, sigma : PState) : boolean =
    defined?(fvs(st(sigma))(vn))

  lookup_local(vn : Name, sigma : PState) : Val =
    lvs(st(sigma))(vn)

  lookup_field(vn : Name, sigma : PState) : Val =
    fvs(st(sigma))(vn)

  update_local(vn : Name, v : Val)(sigma : PState) : PState =
    (# ex := ex(sigma),
       st := (# fvs := fvs(st(sigma)),
                lvs := lvs(st(sigma)) WITH [vn := v] #) #)
                
  update_field(vn : Name, v : Val)(sigma : PState) : PState =
    (# ex := ex(sigma),
       st := (# fvs := fvs(st(sigma)) WITH [vn := v],
                lvs := lvs(st(sigma)) #) #)

  lookup(vn : Name, sigma : PState) : Val =
    IF is_local(vn, sigma)
    THEN lookup_local(vn, sigma)
    ELSE lookup_field(vn, sigma)
    ENDIF

  update(vn : Name, v : Val)(sigma : PState) : PState =
    IF is_local(vn, sigma)
    THEN update_local(vn, v)(sigma)
    ELSE update_field(vn, v)(sigma)
    ENDIF

  val2int(v : Val) : int = 
    IF Int?(v)
    THEN i(v)
    ELSE 0
    ENDIF

  val2bool(v : Val) : bool =
    IF Bool?(v)
    THEN b(v)
    ELSE FALSE
    ENDIF


  % Well formed states definition
  wf_state(p : Program)(s : PState) : boolean =
    FORALL (vn : Name) :
      (is_field(vn, s) IFF var_names(getFieldDecls(p))(vn)) AND
      (is_local(vn, s) IFF var_names(getLocalDecls(p))(vn))

  % Well formed states properties

  % MH: Follows from wf_Program now 
  % MH: To discuss, need for this or not?

  % Why do I need this?
  wf_state_vars_local_or_field : LEMMA % :-)
    FORALL (p : Program, s : PState, vn : Name) :
      wf_state(p)(s) IMPLIES
      wf_Program(p) IMPLIES
        ((is_field(vn, s) IMPLIES NOT is_local(vn, s)) AND
         (is_local(vn, s) IMPLIES NOT is_field(vn, s)))


  % Functions whose existence we assume

  get_address(vn : Name) : int

  get_class(p : Program)(tgt : Val, s : PState) : lift[Class]

  get_class_axiom : AXIOM
    FORALL (p : Program, s : PState, tgt : Val) :
      up?(get_class(p)(tgt, s)) IMPLIES
        classes(p)(down(get_class(p)(tgt, s)))

  % NOTE: This is not accurate, we shoul say something about tgt, for instance
  % that it is not an int, besides not all addresses are objects.
  get_class_definedness : AXIOM
    FORALL (p : Program, s : PState, tgt : Val) :
      wf_state(p)(s) IMPLIES
        up?(get_class(p)(tgt, s))

  lookup_mthd(p : Program, tgt : Val, mn : Name) : lift[Method]

  lookup_mthd_axiom : AXIOM
    FORALL (p : Program, s : PState, m : Method, mn : Name, tgt : Val) :
      wf_state(p)(s) IMPLIES
      up?(lookup_mthd(p, tgt, mn)) IMPLIES
      m = down(lookup_mthd(p, tgt, mn)) IMPLIES
        LET c = down(get_class(p)(tgt, s)) IN
        up?(get_class(p)(tgt, s)) AND
        classes(p)(c) AND
        methods(c)(m) AND
        name(m) = mn

  % If it can't find an invariant in tgt it just returns TRUE
  lookup_inv(p : Program, tgt : Val) : Expr

  lookup_inv_axiom : AXIOM
    FORALL (p : Program, tgt : Val, s : PState) :
      wf_state(p)(s) IMPLIES
        lookup_inv(p, tgt) = inv(down(get_class(p)(tgt, s)))


END State


Evaluation[Name : TYPE+, 
           FullState : TYPE,
           (IMPORTING State) pstate : [FullState -> PState[Name]],
           lookup : [Name, FullState -> Val]] : THEORY
BEGIN

  IMPORTING State[Name]

  % NOTE: I'm evaluating division by 0 to 0, I do not want to care about 
  % modeling that exception here. The result is floored (this should actually
  % be analysed, sometimes floor, sometimes ceil).
  % Also, looking up a non-existing variable just returns 0
  eval(n : NumExpr)(sigma : FullState) : RECURSIVE int =
    CASES n OF
      Int(i) : i,
      Plus(n1, n2) : eval(n1)(sigma) + eval(n2)(sigma),
      Minus(n1, n2) : eval(n1)(sigma) - eval(n2)(sigma),
      Times(n1, n2) : eval(n1)(sigma) * eval(n2)(sigma),
      Div(n1, n2) : IF eval(n2)(sigma) = 0 
                    THEN 0
                    ELSE floor(eval(n1)(sigma) / eval(n2)(sigma))
                    ENDIF,
      NumVarEval(vn) : val2int(lookup(vn, sigma))
    ENDCASES
  MEASURE n BY <<

  eval(b : BoolExpr)(sigma : FullState) : RECURSIVE bool =
    CASES b OF
      TT : TRUE,
      FF : FALSE,
      Neg(b) : NOT eval(b)(sigma),
      Conj(b1, b2) : eval(b1)(sigma) AND eval(b2)(sigma),
      Disj(b1, b2) : eval(b1)(sigma) OR eval(b2)(sigma),
      Lt(b1, b2) : eval(b1)(sigma) < eval(b2)(sigma),
      Le(b1, b2) : eval(b1)(sigma) <= eval(b2)(sigma),
      Eq(b1, b2) : eval(b1)(sigma) = eval(b2)(sigma),
      Neq(b1, b2) : eval(b1)(sigma) /= eval(b2)(sigma),
      Gt(b1, b2) : eval(b1)(sigma) > eval(b2)(sigma),
      Ge(b1, b2) : eval(b1)(sigma) >= eval(b2)(sigma),
      BoolVarEval(vn) : val2bool(lookup(vn, sigma))
    ENDCASES
  MEASURE b BY <<


END Evaluation


SemanticsTypes[Name : TYPE+, 
               FullProgram, FullState : TYPE,
               (IMPORTING State[Name]) pstate : [FullState -> PState]] : THEORY
BEGIN

  IMPORTING Program[Name]

  update_FullState_type
    (f : [[PState[Name] -> PState[Name]], FullState -> FullState]) : bool =
      FORALL (s1, s2 : FullState, upd : [PState[Name] -> PState[Name]]) :
        f(upd, s1) = s2 IMPLIES pstate(s2) = upd(pstate(s1))

  deriv_expr_rec_type(n : nat) : TYPE = [k : upto(n) -> [FullProgram ->
    [Expr, FullState, Val, FullState -> [below(k) -> bool]]]]

  deriv_stmt_rec_type(n : nat) : TYPE = [k : upto(n) -> [FullProgram ->
    [Stmt, FullState, FullState -> [below(k) -> bool]]]]

  execute_set_type
    (f : [FullProgram, Name, Expr, FullState, FullState, n : nat,
     deriv_stmt_rec_type(n), deriv_expr_rec_type(n) -> bool]) : bool =
    FORALL (p : FullProgram, vn : Name, e : Expr, s1, s2 : FullState, 
            n : nat, ds : deriv_stmt_rec_type(n), de : deriv_expr_rec_type(n)) :
      f(p, vn, e, s1, s2, n, ds, de) IMPLIES pstate(s2) = pstate(s1)

  execute_CaseJML_type
    (f : [FullProgram, list[[Expr, Stmt]], FullState, FullState, n : nat,
     deriv_stmt_rec_type(n), deriv_expr_rec_type(n) -> bool]) : bool =
    FORALL (p : FullProgram, branches : list[[Expr, Stmt]], s1, s2 : FullState,
            n : nat, ds : deriv_stmt_rec_type(n), de : deriv_expr_rec_type(n)) :
      f(p, branches, s1, s2, n, ds, de) IMPLIES pstate(s2) = pstate(s1)

  on_method_event_type
    (f : [FullProgram, Method[Name], Val, FullState, FullState, n : nat,
     deriv_stmt_rec_type(n), deriv_expr_rec_type(n) -> bool]) : bool =
    FORALL (p : FullProgram, md : Method[Name], a : Val, s1, s2 : FullState,
            n : nat, ds : deriv_stmt_rec_type(n), de : deriv_expr_rec_type(n)) :
      f(p, md, a, s1, s2, n, ds, de) IMPLIES st(pstate(s1)) = st(pstate(s2))

  deriv_expr_type(n : nat) : TYPE = [FullProgram -> 
    [Expr, FullState, Val, FullState -> [below(n) -> bool]]]

  deriv_stmt_type(n : nat) : TYPE = [FullProgram -> 
    [Stmt, FullState, FullState -> [below(n) -> bool]]]


END SemanticsTypes


Semantics[Name : TYPE+,
          FullProgram : TYPE,
          FullState : TYPE,
          (IMPORTING Program) program : [FullProgram -> Program[Name]],
          (IMPORTING State) pstate : [FullState -> PState[Name]],
          (IMPORTING SemanticsTypes[Name, FullProgram, FullState, pstate])
          lookup : [Name, FullState -> Val], 
          update_FullState : (update_FullState_type),
          execute_set : (execute_set_type),
          execute_CaseJML : (execute_CaseJML_type),
          on_method_entry : (on_method_event_type),
          on_method_exit_normal : (on_method_event_type),
          on_method_exit_exceptional : (on_method_event_type)] : THEORY
BEGIN

  IMPORTING Evaluation[Name, FullState, pstate, lookup]

  default_value(t : JType) : (defined?) =
    CASES t OF
      IntType : Int(0),
      BoolType : Bool(FALSE),
      Void : Unit,
      RefType : Null
    ENDCASES

  initial_Program_state(p : FullProgram) : PState =
    (# ex := bottom,
       st :=
         (# fvs := LAMBDA (n : Name) :
              LET fd = get_FieldDecl(n, program(p)) IN
              IF bottom?(fd)
              THEN Bottom
              ELSE init_val(down(fd))
              ENDIF,
            lvs := LAMBDA (n : Name) :
              LET ld = get_LocalDecl(n, program(p)) IN
              IF bottom?(ld)
              THEN Bottom
              ELSE default_value(jtype(down(ld)))
              ENDIF
         #)
    #)

  wf_initial_Program_state : LEMMA % :-)
    FORALL (p : FullProgram) :
      wf_Program(program(p)) IMPLIES wf_state(program(p))(initial_Program_state(p))


  % THINK: Should we say in each case NOT Bottom?(v)?. Recall that sematincs
  % should be defined even for not well-formed programs (in which case the
  % result may be meaningless)
  deriv_expr(p : FullProgram)
            (c : Expr, sigma1 : FullState, v : Val, sigma2 : FullState)
            (n : nat)(deriv_stmt : deriv_stmt_type(n)) : RECURSIVE bool =
    LET 
      deriv_stmt_rec =
        LAMBDA (k : upto(n))(p : FullProgram)
               (s : Stmt, sigma1, sigma2 : FullState)
               (m : below(k)) : 
          deriv_stmt(p)(s, sigma1, sigma2)(m),
      deriv_expr_rec =
        LAMBDA (k : upto(n))(p : FullProgram)
               (c : Expr, sigma1 : FullState, v : Val, sigma2 : FullState)
               (m : below(k)) : 
          deriv_expr(p)(c, sigma1, v, sigma2)(m)(deriv_stmt_rec(m)),
      bounded_deriv_stmt_rec =
        LAMBDA (i : upto(n))(k : upto(i))(p : FullProgram)
               (s : Stmt, sigma1, sigma2 : FullState)
               (m : below(k)) : 
          deriv_stmt(p)(s, sigma1, sigma2)(m),
      bounded_deriv_expr_rec =
        LAMBDA (i : upto(n))(k : upto(i))(p : FullProgram)
               (c : Expr, sigma1 : FullState, v : Val, sigma2 : FullState)
               (m : below(k)) : 
          deriv_expr(p)(c, sigma1, v, sigma2)(m)(deriv_stmt_rec(m))
    IN
    IF up?(ex(pstate(sigma1)))
    % sigma1 is an exceptional state, exceptions are simply propagated
    THEN sigma1 = sigma2 AND v = Bottom AND n = 0
    ELSE % sigma1 is a normal state
    CASES c OF
      Assign(vn, e) :
        NOT Bottom?(v) AND
        n > 0 AND
        (EXISTS (tau : FullState) :
           deriv_expr_rec(n)(p)(e, sigma1, v, tau)(n - 1) AND
           sigma2 = (IF up?(ex(pstate(tau)))
                     THEN tau
                     ELSE update_FullState(update(vn, v), tau)
                     ENDIF)),
      BExpr(b) :
        sigma1 = sigma2 AND
        NOT Bottom?(v) AND
        v = Bool(eval(b)(sigma1)) AND
        n = 0,
      CondExpr(c, t, e) :
        EXISTS (tau : FullState, v1 : Val, m1, m2 : nat) :
          n = m1 + m2 + 1 AND
          deriv_expr_rec(n)(p)(c, sigma1, v1, tau)(m1) AND
          Bool?(v1) AND
          deriv_expr_rec(n)(p)(IF b(v1) THEN t ELSE e ENDIF, 
                               tau, v, sigma2)(m2),
      %TODO: update the values of "this" and initialize the local vars
      %      if the return type is void then return Unit or Bottom
      MethodCall(e, mn, pr) :
        EXISTS (m1, m2, m3, m4, m5, m6 : nat)
               (tau1, tau2, tau3, tau4, tau5, tau6, tau7, tau8 : FullState)
               (a, pv, old_val_arg : Val)(md : Method)(inv : BoolExpr) :
          m6 > 0 AND
          n = m1 + m2 + m3 + m4 + m5 + m6 + 1 AND
          % evaluate the receiver object
          deriv_expr_rec(n)(p)(e, sigma1, a, tau1)(m1) AND
          % evaluate the parameter
          deriv_expr_rec(n)(p)(pr, tau1, pv, tau2)(m2) AND
          % see if the receiver is null (and there were no previous exceptions)
          (tau3 = (IF bottom?(ex(pstate(tau2))) AND Null?(a)
                   THEN update_FullState(LAMBDA (s : PState) : s WITH 
                                           [ex := up(NullPointer)], tau2)
                   ELSE tau2
                   ENDIF)) AND
          % lookup method definition
          IF up?(lookup_mthd(program(p), a, mn))
          THEN md = down(lookup_mthd(program(p), a, mn))
          ELSE FALSE
          ENDIF AND
          % actions taken at the entry of the method
          on_method_entry(p, md, a, tau3, tau4, m3,
                          bounded_deriv_stmt_rec(m3), 
                          bounded_deriv_expr_rec(m3)) AND
          % give a name the value of the local variable before the call,
          % just for convenience (we don't lose the previous state)
          old_val_arg = lookup_local(name(arg(md)), pstate(tau4)) AND
          % update the value of the argument
          tau5 = update_FullState(update_local(name(arg(md)), pv), tau4) AND
          % execute the body
          deriv_stmt(p)(body(md), tau5, tau6)(m4) AND
          % evaluate the result
          deriv_expr_rec(n)(p)(res(md), tau6, v, tau7)(m5) AND
          % actions taken at the exit of the method
          IF bottom?(ex(pstate(tau7)))
          THEN on_method_exit_normal(p, md, a, tau7, tau8, m6, 
                                     bounded_deriv_stmt_rec(m6), 
                                     bounded_deriv_expr_rec(m6))
          ELSE on_method_exit_exceptional(p, md, a, tau7, tau8, m6,
                                          bounded_deriv_stmt_rec(m6), 
                                          bounded_deriv_expr_rec(m6))
          ENDIF AND
          % restore the value of the argument
          sigma2 = update_FullState(update_local(name(arg(md)), old_val_arg),
                                    tau8),
      NExpr(n) :
        sigma1 = sigma2 AND
        NOT Bottom?(v) AND
        v = Int(eval(n)(sigma1)) AND
        n = 0,
      RExpr(r) :
        sigma1 = sigma2 AND
        NOT Bottom?(v) AND
        v = CASES r OF
              Null : Null,
              RefVarEval(vn) : RefType(get_address(vn))
            ENDCASES AND
        n = 0
    ENDCASES
    ENDIF
  MEASURE n
    

  deriv_stmt(p : FullProgram)
            (c : Stmt, sigma1, sigma2 : FullState)
            (n : nat) : RECURSIVE bool =
    LET 
      deriv_stmt_rec =
        LAMBDA (k : upto(n))(p : FullProgram)
               (s : Stmt, sigma1, sigma2 : FullState)(m : below(k)) :
          deriv_stmt(p)(s, sigma1, sigma2)(m),
      deriv_expr_rec =
        LAMBDA (k : upto(n))(p : FullProgram)
               (c : Expr, sigma1 : FullState, v : Val, sigma2 : FullState)
               (m : below(k)) :
          deriv_expr(p)(c, sigma1, v, sigma2)(m)(deriv_stmt_rec(m))
    IN
    IF up?(ex(pstate(sigma1)))
    % sigma1 is an exceptional state, exceptions are simply propagated
    THEN sigma1 = sigma2 AND n = 0
    ELSE % sigma1 is a normal state
    CASES c OF
      CaseJML(l) :
        n > 0 AND
        execute_CaseJML(p, l, sigma1, sigma2, n,
                        deriv_stmt_rec, deriv_expr_rec),
      IfThenElse(e, c1, c2) :
        EXISTS (tau : FullState, v : Val, m1, m2 : nat) :
          n = m1 + m2 + 1 AND
          deriv_expr_rec(n)(p)(e, sigma1, v, tau)(m1) AND
          Bool?(v) AND
          deriv_stmt(p)(IF b(v) THEN c1 ELSE c2 ENDIF, tau, sigma2)(m2),
      Sequence(c1, c2) :
         EXISTS(m1, m2 : nat)(tau : FullState) :
           n = m1 + m2 + 1 AND
           deriv_stmt(p)(c1, sigma1, tau)(m1) AND
           deriv_stmt(p)(c2, tau, sigma2)(m2),
      Set(vn, e) :
         n > 0 AND
         execute_set(p, vn, e, sigma1, sigma2, n,
                     deriv_stmt_rec, deriv_expr_rec),
      Skip : sigma1 = sigma2 AND n = 0,
      StmtExpr(e) :
         n > 0 AND
         EXISTS (v : Val) :
           deriv_expr_rec(n)(p)(e, sigma1, v, sigma2)(n - 1),
      Throw: 
        n = 0 AND
        sigma2 = update_FullState(LAMBDA (s : PState) : 
                                    s WITH [ex := up(Throwable)],
                                  sigma1),
      TryCatch(c1, c2, c3) :
        EXISTS (m1, m2, m3 : nat)(tau1, tau2, tau3 : FullState) :
          n = m1 + m2 + m3 + 1 AND
          deriv_stmt(p)(c1, sigma1, tau1)(m1) AND
          deriv_stmt(p)(IF up?(ex(pstate(tau1))) THEN c2 ELSE Skip ENDIF,
                             update_FullState(LAMBDA (s : PState) : 
                                                s WITH [ex := bottom], tau1),
                             tau2)(m2) AND
          deriv_stmt(p)(c3, update_FullState(LAMBDA (s : PState) : 
                                               s WITH [ex := bottom], tau2),
                        tau3)(m3) AND
          sigma2 = update_FullState(LAMBDA (s : PState) :
                                      IF up?(ex(pstate(tau2)))
                                      THEN s WITH [ex := ex(pstate(tau2))]
                                      ELSE s WITH [ex := ex(pstate(tau3))]
                                      ENDIF,
                                    tau3),
      While(e, c) :
        n > 0 AND
        deriv_stmt(p)(IfThenElse(e, While(e, c), Skip), sigma1, sigma2)(n - 1)
    ENDCASES
  ENDIF
  MEASURE n

  % Version that does not has deriv_stmt as argument
  deriv_expr(p : FullProgram)
            (e : Expr, sigma1 : FullState, v : Val, sigma2 : FullState)
            (n : nat) : bool =
    deriv_expr(p)(e, sigma1, v, sigma2)(n)
              (LAMBDA (p : FullProgram)(c : Stmt, sigma1, sigma2 : FullState)
                      (m : below(n)) :
                 deriv_stmt(p)(c, sigma1, sigma2)(m))

  derives(p : FullProgram)
         (e : Expr, sigma1 : FullState)(v : Val, sigma2 : FullState) : bool =
    EXISTS (n : nat) :
      deriv_expr(p)(e, sigma1, v, sigma2)(n)

  derives(p : FullProgram)
         (s : Stmt, sigma1 : FullState)(sigma2 : FullState) : bool =
    EXISTS (n : nat) : 
      deriv_stmt(p)(s, sigma1, sigma2)(n)


  IMPORTING WF[nat, nat] % used in the proofs

  % TODO: adapt the proofs

  expr_determ_step : LEMMA
    FORALL (p : FullProgram)(n1, n2 : nat)(e : Expr)(sigma : FullState) :
    LET deriv_stmt_rec = 
        LAMBDA (k : nat) : 
          LAMBDA (p : FullProgram)(c : Stmt, sigma1, sigma2 : FullState)
                 (m : below(k)) : deriv_stmt(p)(c, sigma1, sigma2)(m)
    IN
      FORALL (v1, v2 : Val, sigma1, sigma2 : FullState) :
        (FORALL (c : Stmt)(sigma, sigma1, sigma2 : FullState)
                (m1 : below(n1), m2 : below(n2)) :
          deriv_stmt_rec(n1)(p)(c, sigma, sigma1)(m1) AND
          deriv_stmt_rec(n2)(p)(c, sigma, sigma2)(m2) IMPLIES
            sigma1 = sigma2 AND m1 = m2)
        IMPLIES
          deriv_expr(p)(e, sigma, v1, sigma1)(n1)(deriv_stmt_rec(n1)) AND
          deriv_expr(p)(e, sigma, v2, sigma2)(n2)(deriv_stmt_rec(n2)) IMPLIES
            v1 = v2 AND sigma1 = sigma2 AND n1 = n2

  expr_determ_step2 : LEMMA
    FORALL (p : FullProgram)(n1, n2 : nat)(e : Expr)
           (v1, v2 : Val, sigma, sigma1, sigma2 : FullState) :
        (FORALL (c : Stmt)(sigma, sigma1, sigma2 : FullState)
                (m1 : below(n1), m2 : below(n2)) :
          deriv_stmt(p)(c, sigma, sigma1)(m1) AND
          deriv_stmt(p)(c, sigma, sigma2)(m2) IMPLIES
            sigma1 = sigma2 AND m1 = m2)
        IMPLIES
          deriv_expr(p)(e, sigma, v1, sigma1)(n1) AND
          deriv_expr(p)(e, sigma, v2, sigma2)(n2) IMPLIES
            v1 = v2 AND sigma1 = sigma2 AND n1 = n2

  stmt_determ_step : LEMMA
    FORALL (p : FullProgram)(n1, n2 : nat)(c : Stmt)(sigma : FullState) :
      FORALL (sigma1, sigma2 : FullState) :
        deriv_stmt(p)(c, sigma, sigma1)(n1) AND
        deriv_stmt(p)(c, sigma, sigma2)(n2) IMPLIES
          sigma1 = sigma2 AND n1 = n2
  
  expr_determ : LEMMA
    FORALL (p : FullProgram)(sigma : FullState)(e : Expr) :
      FORALL (v1, v2 : Val, sigma1, sigma2 : FullState) :
        derives(p)(e, sigma)(v1, sigma1) AND
        derives(p)(e, sigma)(v2, sigma2) IMPLIES
          v1 = v2 AND sigma1 = sigma2

  stmt_determ : LEMMA
    FORALL (p : FullProgram)(sigma : FullState)(c : Stmt) :
      FORALL (sigma1, sigma2 : FullState) :
        derives(p)(c, sigma)(sigma1) AND
        derives(p)(c, sigma)(sigma2) IMPLIES
          sigma1 = sigma2



  % We name only the type constraints needed for the proofs.
  well_typed_Program(p : FullProgram) : boolean =
    FORALL (c : Class) :
      classes(program(p))(c) IMPLIES
        BExpr?(inv(c))

  set_subterm(s : Stmt, m : Method) : boolean =
    s << pre_set(m) OR s << post_set(m) OR s << exc_set(m)

  % The following expression (that appear only in annotations) should have no
  % side-effects: invariants, preconditions, postconditions, source expression
  % of a set statement.
  assertions_have_no_side_effects(p : FullProgram) : boolean =
    FORALL (c : Class) :
      classes(program(p))(c) IMPLIES
        (FORALL (s1, s2 : FullState, v : Val, n : nat) :
          deriv_expr(p)(inv(c), s1, v, s2)(n) IMPLIES s1 = s2) AND
        FORALL (m : Method) :
          methods(c)(m) IMPLIES
            (FORALL (s1, s2 : FullState, v : Val, n : nat) :
              deriv_expr(p)(pre(m), s1, v, s2)(n) IMPLIES s1 = s2) AND
            (FORALL (s1, s2 : FullState, v : Val, n : nat) :
              deriv_expr(p)(post(m), s1, v, s2)(n) IMPLIES s1 = s2) AND
            (FORALL (s : Stmt) :
              set_subterm(s, m) IMPLIES
              Set?(s) IMPLIES
                FORALL (s1, s2 : FullState, v : Val, n : nat) :
                  deriv_expr(p)(source(s), s1, v, s2)(n) IMPLIES s1 = s2)

  well_behaved_Program(p : FullProgram) : boolean =
    assertions_have_no_side_effects(p)


  run_FullProgram(p : FullProgram)(main : Method, arg : int)
                 (s1, s2 : FullState)(n : nat) : boolean =
    LET c  = StmtExpr(MethodCall(RExpr(RefVarEval(This)),
                                 name(main),
                                 NExpr(Int(arg))))
    IN
      deriv_stmt(p)(c, s1, s2)(n)


END Semantics


SemanticsCommon[Name : TYPE+,
                FullProgram, FullState : TYPE,
                (IMPORTING State[Name]) pstate : [FullState -> PState],
                (IMPORTING SemanticsTypes[Name, FullProgram, FullState, pstate])
                update_FullState : (update_FullState_type)] : THEORY
BEGIN

  is_field(vn : Name, sigma : FullState) : boolean =
    is_field(vn, pstate(sigma))

  is_local(vn : Name, sigma : FullState) : boolean =
    is_local(vn, pstate(sigma))

  check_assertion(p : FullProgram)
                 (e : Expr, s1, s2 : FullState)(n : nat)
                 (deriv_expr : deriv_expr_type(n)) : boolean =
    n > 0 AND
    EXISTS (tau1 : FullState, v : Val) :
      deriv_expr(p)(e, s1, v, tau1)(n-1) AND
      s2 = IF Bool?(v) THEN
             IF b(v)
             THEN tau1
             ELSE update_FullState(LAMBDA (s : PState) : s WITH 
                                             [ex := up(JMLExc)], tau1)
             ENDIF
           ELSE tau1 % This won't happen in a well formed program
           ENDIF

  execute_CaseJML : (execute_CaseJML_type) =
    LAMBDA (p : FullProgram, branches : list[[Expr, Stmt]], s1, s2 : FullState,
            n : nat, 
            deriv_stmt_rec : deriv_stmt_rec_type(n),
            deriv_expr_rec : deriv_expr_rec_type(n)) :
      CASES branches OF
        null : n = 0 AND s1 = s2,
        cons(x, xs) : n > 0 AND 
                      deriv_stmt_rec(n)(p)(IfThenElse(proj_1(x), proj_2(x),
                                                      CaseJML(xs)),
                                           s1, s2)(n-1) AND
                      pstate(s1) = pstate(s2)
      ENDCASES


END SemanticsCommon


% Semantics of Java programs without annotations. This theory is not used 
% elsewhere, it is provided as an example of the instatiation of the semantics
ProgramSemantics[Name : TYPE+] : THEORY
BEGIN

  IMPORTING State[Name],
            SemanticsTypes[Name, Program, PState, id]

  execute_set : (execute_set_type) =
    LAMBDA (p : Program, vn : Name, e : Expr, s1, s2 : PState, n : nat,
            deriv_stmt_rec : deriv_stmt_rec_type(n),
            deriv_expr_rec : deriv_expr_rec_type(n)) :
      s1 = s2

  execute_CaseJML : (execute_CaseJML_type) =
    LAMBDA (p : Program, bs : list[[Expr, Stmt]], s1, s2 : PState,  n : nat,
            deriv_stmt_rec : deriv_stmt_rec_type(n),
            deriv_expr_rec : deriv_expr_rec_type(n)) :
      s1 = s2

  on_method_event : (on_method_event_type) =
    LAMBDA (p : Program, md : Method, a : Val, s1, s2 : PState, n : nat,
            deriv_stmt : deriv_stmt_rec_type(n),
            deriv_expr : deriv_expr_rec_type(n)) :
      s1 = s2

  IMPORTING Semantics[Name, Program, PState, id, id, lookup,
                      LAMBDA (upd : [PState -> PState], s : PState) : upd(s),
                      execute_set, execute_CaseJML,
                      on_method_event, on_method_event, on_method_event]

  run_program(p : Program)(main : Method, arg : int)(s2 : PState)
             (n : nat) : boolean =
    run_FullProgram(p)(main, arg)(initial_Program_state(p), s2)(n)


END ProgramSemantics
