(MonitoredProgram
 (get_monitored_class_TCC1 0
  (get_monitored_class_TCC1-1 nil 3399182363 3399183268
   ("" (skolem-typepred)
    (("" (expand* "compatible" "nonempty?" "empty?" "member")
      (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   64600 110 t nil))
 (get_monitored_class_unique_for_wf_MP_TCC1 0
  (get_monitored_class_unique_for_wf_MP_TCC1-1 nil 3399183164
   3399183409
   ("" (skolem-typepred)
    (("" (expand* "wf_MP" "compatible" "singleton?")
      (("" (flatten)
        (("" (skosimp)
          (("" (inst?)
            (("1"
              (expand* "wf_Program"
               "wf_program_has_unique_class_names_def")
              (("1" (flatten)
                (("1" (skosimp)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((singleton? const-decl "bool" sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mp!1 skolem-const-decl "MonitoredProgram" MonitoredProgram nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (c!1 skolem-const-decl "Class[Name]" MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   14685 310 t nil))
 (get_monitored_class_unique_for_wf_MP 0
  (get_monitored_class_unique_for_wf_MP-2 nil 3399183561 3399183567
   ("" (skosimp)
    (("" (expand* "get_monitored_class" "choose" "the") nil nil)) nil)
   proved
   ((the const-decl "(p)" sets nil) (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil))
   3022 70 nil nil)
  (get_monitored_class_unique_for_wf_MP-1 nil 3399183469 3399183536
   ("" (skosimp)
    (("" (expand* "wf_MP" "get_monitored_class" "choose" "the") nil
      nil))
    nil)
   proved
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (choose const-decl "(p)" sets nil) (the const-decl "(p)" sets nil))
   67208 100 t shostak)))
(MonitoredProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3391514279 3397385945
   ("" (subtype-tcc) nil nil) unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   60 59 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3391514279 3397385946
   ("" (subtype-tcc) nil nil) unchecked nil 5 5 nil nil))
 (wf_state_implies_wf_PSt 0
  (wf_state_implies_wf_PSt-1 nil 3388136206 3397385973
   ("" (skosimp*)
    (("" (expand "wf_PSt")
      (("" (skosimp*)
        (("" (typepred "mp!1")
          (("" (expand "compatible")
            (("" (skosimp*)
              (("" (expand "var_names")
                (("" (skosimp*)
                  (("" (inst -3 "l!1")
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (expand "wf_state")
                          (("" (inst -6 "name(l!1)")
                            (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   2767 2745 t shostak))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3396777599 3397561631
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (expand "wf_state")
        (("" (expand "union")
          (("" (expand "member")
            (("" (flatten)
              (("" (expand "wf_state")
                (("" (expand "wf_ghoststate")
                  (("" (inst -2 "vn!1")
                    (("" (inst -3 "vn!1")
                      (("" (assert)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   1895 28 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3396777649 3397385974
   ("" (skosimp*)
    (("" (expand "wf_Program")
      (("" (expand "wf_program_variables_disjoint_def")
        (("" (flatten)
          (("" (expand "wf_state")
            ((""
              (auto-rewrite "disjoint?" "intersection" "member"
                            "empty?")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "wf_state")
                    (("" (expand "wf_ghoststate")
                      (("" (inst -3 "vn!1")
                        (("" (assert)
                          (("" (inst -5 "vn!1")
                            (("" (inst -5 "vn!1")
                              ((""
                                (assert)
                                ((""
                                  (inst -2 "vn!1")
                                  ((""
                                    (flatten)
                                    ((""
                                      (split 3)
                                      (("1"
                                        (split -5)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (expand
                                           "wf_program_variables_not_reserved_words_def")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -8 "vn!1")
                                              (("2"
                                                (expand
                                                 "reserved_words")
                                                (("2"
                                                  (expand
                                                   "declared_var_names")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil))
   79 77 t shostak))
 (on_method_MVA_TCC1 0
  (on_method_MVA_TCC1-1 nil 3387174104 3397385975
   ("" (skosimp*) (("" (typepred "s!1") (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((lift type-decl nil lift_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   46 45 t nil))
 (on_method_MVA_TCC2 0
  (on_method_MVA_TCC2-1 nil 3387174104 3397385975
   ("" (skosimp*)
    (("" (expand "wf_PEvent")
      (("" (assert)
        (("" (use "wf_state_implies_wf_PSt")
          (("" (assert)
            (("" (expand "wf_state") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   24 24 t nil))
 (on_method_MVA_TCC3 0
  (on_method_MVA_TCC3-1 nil 3392369297 3397385975
   ("" (skosimp*)
    (("" (typepred "mva(mp!1)")
      (("" (expand "complete") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   3 2 t nil))
 (on_method_entry_MP_TCC1 0
  (on_method_entry_MP_TCC1-1 nil 3387174104 3397385989
   ("" (typepred "on_method_entry") (("" (grind) nil nil)) nil)
   unchecked
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (choose const-decl "(p)" sets nil)
    (lift type-decl nil lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1356 1352 t nil))
 (on_method_exit_normal_MP_TCC1 0
  (on_method_exit_normal_MP_TCC1-1 nil 3387174104 3397386022
   ("" (typepred "on_method_exit_normal") (("" (grind) nil nil)) nil)
   unchecked
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (choose const-decl "(p)" sets nil)
    (lift type-decl nil lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   3370 3339 t nil))
 (on_method_exit_exceptional_MP_TCC1 0
  (on_method_exit_exceptional_MP_TCC1-1 nil 3387174104 3397386338
   ("" (typepred "on_method_exit_exceptional")
    (("" (expand "on_method_event_type")
      (("" (skosimp*)
        (("" (inst?)
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((lift type-decl nil lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2642 42 t nil))
 (initial_MP_state_TCC1 0
  (initial_MP_state_TCC1-1 nil 3387174104 3397386346
   ("" (subtype-tcc) nil nil) unchecked
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   60 60 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3392371550 3397386348
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (flatten)
        (("" (split -3)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (skosimp*)
                  (("2" (expand "on_method_entry")
                    (("2" (skosimp*)
                      (("2" (replace -5 :dir rl)
                        (("2" (replace -15)
                          (("2" (expand "check_assertion")
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp
                                   -14
                                   "inv!1"
                                   "v!4"
                                   "v!2"
                                   "s!1"
                                   "tau1!5"
                                   "tau1!3"
                                   "m1!2"
                                   "m1!1"
                                   "m1!2 - 1"
                                   "m1!1 - 1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -16)
                                        (("1"
                                          (replace -17)
                                          (("1"
                                            (replace -15)
                                            (("1"
                                              (replace -8 :dir rl)
                                              (("1"
                                                (replace -25)
                                                (("1"
                                                  (inst-cp
                                                   -14
                                                   "pre(m!1)"
                                                   "v!5"
                                                   "v!3"
                                                   "tau1!1"
                                                   "tau1!6"
                                                   "tau1!4"
                                                   "m2!2"
                                                   "m2!1"
                                                   "m2!2 - 1"
                                                   "m2!1 - 1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -16)
                                                        (("1"
                                                          (replace -15)
                                                          (("1"
                                                            (replace
                                                             -17)
                                                            (("1"
                                                              (replace
                                                               -11
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -31)
                                                                (("1"
                                                                  (inst
                                                                   -14
                                                                   "pre_set(m!1)"
                                                                   "Unit"
                                                                   "Unit"
                                                                   "tau2!1"
                                                                   "s3!2"
                                                                   "s3!1"
                                                                   "n1!1"
                                                                   "n2!1"
                                                                   "m3!2"
                                                                   "m3!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           4
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   238 238 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-2 nil 3392373362 3397386350
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      (("" (expand "on_method_exit_normal")
        (("" (skosimp*)
          (("" (split -5)
            (("1" (flatten)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (expand "check_assertion")
                      (("2" (flatten)
                        (("2" (skosimp*)
                          (("2" (replace -6 :dir rl)
                            (("2" (replace -23)
                              (("2"
                                (inst-cp
                                 -11
                                 "post_set(m!1)"
                                 "Unit"
                                 "Unit"
                                 "s!1"
                                 "tau1!1"
                                 "tau1!2"
                                 "n1!1"
                                 "n2!1"
                                 "m1!1"
                                 "m1!2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replace -12)
                                      (("2"
                                        (inst-cp
                                         -11
                                         "post(m!1)"
                                         "v!2"
                                         "v!4"
                                         "tau1!2"
                                         "tau1!3"
                                         "tau1!5"
                                         "m2!1"
                                         "m2!2"
                                         "m2!1 - 1"
                                         "m2!2 - 1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -12)
                                              (("2"
                                                (replace -14)
                                                (("2"
                                                  (replace -5 :dir rl)
                                                  (("2"
                                                    (replace -27)
                                                    (("2"
                                                      (inst
                                                       -11
                                                       "inv!1"
                                                       "v!3"
                                                       "v!5"
                                                       "tau2!1"
                                                       "tau1!4"
                                                       "tau1!6"
                                                       "m3!1"
                                                       "m3!2"
                                                       "m3!1 - 1"
                                                       "m3!2 - 1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (replace
                                                             -11)
                                                            (("2"
                                                              (replace
                                                               -13)
                                                              (("2"
                                                                (replace
                                                                 -9
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   204 198 t nil)
  (IMP_SemanticsProofs_TCC2-1 nil 3392371550 3392371598
   ("" (assuming-tcc) nil nil) unfinished nil 2662 2380 nil nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-2 nil 3392373370 3397386351
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (expand "on_method_exit_exceptional")
        (("" (skosimp*)
          (("" (split -5)
            (("1" (flatten)
              (("1" (assert)
                (("1" (skosimp*)
                  (("1" (expand "check_assertion")
                    (("1" (flatten)
                      (("1" (skosimp*)
                        (("1"
                          (inst-cp -10 "exc_set(m!1)" "Unit" "Unit"
                           "update_PState(s!1, catch)" "tau1!1"
                           "tau1!2" "n1!1" "n2!1" "m1!1" "m1!2")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (replace -11)
                                (("1"
                                  (replace -4 :dir rl)
                                  (("1"
                                    (replace -21)
                                    (("1"
                                      (inst
                                       -10
                                       "inv!1"
                                       "v!2"
                                       "v!3"
                                       "tau1!2"
                                       "tau1!3"
                                       "tau1!4"
                                       "m2!1"
                                       "m2!2"
                                       "m2!1 - 1"
                                       "m2!2 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -12)
                                            (("1"
                                              (replace -10)
                                              (("1"
                                                (replace -7 :dir rl)
                                                (("1"
                                                  (replace -26)
                                                  (("1"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (apply-extensionality :hide? t) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   143 140 t nil)
  (IMP_SemanticsProofs_TCC3-1 nil 3392371550 3392371601
   ("" (assuming-tcc) nil nil) unfinished nil 2668 2370 nil nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3392371550 3397386352
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2"
                  (inst -4
                   "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                           CaseJML(cdr(branches!1)))" "Unit" "Unit"
                   "s!1" "s1!1" "s2!1" "n1!1" "n2!1" "n1!1 - 1"
                   "n2!1 - 1")
                  (("1" (assert)
                    (("1" (split -4)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   69 69 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3392371550 3397386353
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -1)
                  (("1" (replace -3)
                    (("1" (replace -6 :dir rl) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   31 31 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3397385945 3397386556
   ("" (skosimp*)
    (("" (expand "execute_assert")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (expand "check_assertion")
              (("2" (skosimp*)
                (("2" (apply (repeat (inst? -5 :where (-2 -7))))
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -5)
                        (("1" (replace -7)
                          (("1" (lift-if)
                            (("1" (split -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   6488 62 t nil))
 (determ_step_MP 0
  (determ_step_MP-1 nil 3396350156 3397386467
   ("" (skosimp*)
    (("" (lemma "derive_determ_step")
      ((""
        (inst -1 "p!1" "n1!1" "n2!1" "b!1" "v1!1" "v2!1" "sigma!1"
         "sigma1!1" "sigma2!1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil))
   4 4 t shostak))
 (wf_initial_MP_state 0
  (wf_initial_MP_state-1 nil 3390055553 3397386468
   ("" (skosimp*)
    (("" (expand "wf_MP")
      (("" (flatten)
        (("" (expand "initial_MP_state")
          (("" (expand "wf_state")
            (("" (split 1)
              (("1" (use "wf_initial_MVA_state")
                (("1" (assert) nil nil)) nil)
               ("2" (use "wf_initial_Program_state")
                (("2" (assert) nil nil)) nil)
               ("3" (use "wf_initial_ghost_state")
                (("1" (assert) nil nil)
                 ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil))
   96 95 t shostak))
 (wf_update_PState 0
  (wf_update_PState-1 nil 3392375856 3397386469 ("" (grind) nil nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   91 90 nil nil))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3392375867 3397386469
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil))))))))
    nil)
   unfinished nil 3 3 nil nil))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3392375879 3397386474
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                                          ({x: [Name, Val[Name]] |
                                              EXISTS (l: LocalVarDecl[Name]):
                                                lvds!1(l) AND
                                                 name(l) = PROJ_1(x) AND
                                                  default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(program(p!1))
                                                      (update_local(name(arg!1), param_val!1)
                                                                   (update_locals({x: [Name, Val[Name]]
                                                                                   |
                                                                                   EXISTS
                                                                                   (l: LocalVarDecl[Name]):
                                                                                   lvds!1(l)
                                                                                   AND
                                                                                   name(l) = PROJ_1(x)
                                                                                   AND
                                                                                   default_value(jtype(l))
                                                                                   =
                                                                                   PROJ_2(x)})
                                                                                 (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(program(p!1))
                                                              (update_locals({x: [Name, Val[Name]] |
                                                                                EXISTS (l: LocalVarDecl[Name]):
                                                                                  lvds!1(l) AND
                                                                                   name(l) = PROJ_1(x) AND
                                                                                    default_value(jtype(l)) = PROJ_2(x)})
                                                                            (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "var_names")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                                           EXISTS (l: LocalVarDecl[Name]):
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lift type-decl nil lift_adt nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   405 403 t nil))
 (derive_MP_from_derive_AP 0
  (derive_MP_from_derive_AP-1 nil 3397475270 3397480595
   ("" (use "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: Body, v: Val)(sMP1: MPState)
             (sAP1, sAP2: APState) :
        pstate(sMP1) = pstate(sAP1) IMPLIES
         gvs(sMP1) = gvs(sAP1) IMPLIES
          derive(program(mp))(b, sAP1, v, sAP2)(n) IMPLIES
           (EXISTS (sMP2: MPState):
              pstate(sMP2) = pstate(sAP2) AND
               gvs(sMP2) = gvs(sAP2) AND derive(mp)(b, sMP1, v, sMP2)(n))")
      (("1" (split -1)
        (("1" (skosimp*)
          (("1" (apply (repeat (inst? -))) (("1" (assert) nil nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "derive" -4)
              (("2" (split -4)
                (("1" (flatten)
                  (("1" (inst 1 "sMP1!1")
                    (("1" (expand "derive") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lift-if)
                    (("2"
                      (apply (then (split -1) (flatten) (assert)
                              (flatten) (assert)))
                      (("1" (inst 2 "sMP1!1")
                        (("1" (expand "derive" 2)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2"
                        (apply (then
                                (split -1)
                                (flatten)
                                (assert)
                                (flatten)
                                (assert)))
                        (("1" (skosimp*)
                          (("1" (inst-cp -6 "m1!1")
                            (("1" (assert)
                              (("1"
                                (apply
                                 (repeat (inst? -7 :where (-3 -8))))
                                (("1"
                                  (inst -7 "sMP1!1")
                                  (("1"
                                    (apply
                                     (repeat
                                      (inst? -7 :where (-3 -8))))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "m2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -4)))
                                              (("1"
                                                (inst -6 "sMP2!1")
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -6
                                                     :where
                                                     -4)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst
                                                         3
                                                         "sMP2!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "derive"
                                                             3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 3
                                                                 "sMP2!1"
                                                                 "v1!1"
                                                                 "v2!1"
                                                                 "m1!1"
                                                                 "m2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception_final")
                                                                    (("1"
                                                                      (expand
                                                                       "check_for_exception")
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (apply (then
                                  (split -1)
                                  (flatten)
                                  (assert)
                                  (flatten)
                                  (assert)))
                          (("1" (inst 4 "sMP1!1")
                            (("1" (assert)
                              (("1"
                                (expand "derive" 4)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "lookup")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split -4)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (apply (then
                                    (split -1)
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))
                            (("1" (inst + "sMP1!1")
                              (("1"
                                (expand "derive" +)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2"
                              (apply (then
                                      (split -1)
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))
                              (("1"
                                (inst + "sMP1!1")
                                (("1"
                                  (expand "derive" +)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (then
                                  (split -1)
                                  (flatten)
                                  (assert)
                                  (flatten)
                                  (assert)))
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst -5 "x!1 - 1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst? -5 :where -3)
                                        (("1"
                                          (inst -5 "sMP1!1")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst 7 "sMP2!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "derive"
                                                       +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "check_for_exception_final")
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (split
                                                                   -4)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply
                                   (then
                                    (split -1)
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst-cp -6 "m1!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst? -7 :where -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -7 "sMP1!1")
                                              (("1"
                                                (inst? -7 :where -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst -6 "m2!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?
                                                           -6
                                                           :where
                                                           -4)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             "sMP2!1")
                                                            (("1"
                                                              (inst?
                                                               -6
                                                               :where
                                                               -4)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     8
                                                                     "sMP2!2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "derive"
                                                                         +)
                                                                        (("1"
                                                                          (inst
                                                                           8
                                                                           "sMP2!1"
                                                                           "v1!1"
                                                                           "v2!1"
                                                                           "m1!1"
                                                                           "m2!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "check_for_exception_final")
                                                                              (("1"
                                                                                (expand
                                                                                 "check_for_exception")
                                                                                (("1"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (then
                                      (split -1)
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst-cp -6 "m1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst? -7 :where -3)
                                            (("1"
                                              (inst -7 "sMP1!1")
                                              (("1"
                                                (inst? -7 :where -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst -6 "m2!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?
                                                           -6
                                                           :where
                                                           -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -6
                                                               "sMP2!1")
                                                              (("1"
                                                                (inst?
                                                                 -6
                                                                 :where
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       9
                                                                       "sMP2!2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "derive"
                                                                           +)
                                                                          (("1"
                                                                            (inst
                                                                             9
                                                                             "sMP2!1"
                                                                             "v1!1"
                                                                             "v2!1"
                                                                             "m1!1"
                                                                             "m2!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand*
                                                                                 "check_for_exception_final"
                                                                                 "check_for_exception")
                                                                                (("1"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -5)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (then
                                        (split -1)
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))
                                      (("1"
                                        (inst + "sMP1!1")
                                        (("1"
                                          (expand "derive" +)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "lookup")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -4)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (then
                                          (split -1)
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))
                                        (("1"
                                          (inst + "sMP1!1")
                                          (("1"
                                            (expand "derive" +)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (then
                                            (split -1)
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))
                                          (("1"
                                            (inst + "sMP1!1")
                                            (("1"
                                              (expand "derive" +)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "get_address")
                                                  (("1"
                                                    (expand
                                                     "get_dynamic_type_name")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (split -1)
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "x!1 - 1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst?
                                                       -5
                                                       :where
                                                       -3)
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "sMP1!1")
                                                        (("1"
                                                          (inst?
                                                           -5
                                                           :where
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split
                                                                   -4)
                                                                  (("1"
                                                                    (inst
                                                                     13
                                                                     "sMP2!1")
                                                                    (("1"
                                                                      (expand
                                                                       "derive"
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               13
                                                                               "sMP2!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       14
                                                                       "update_PState(sMP2!1, update(target(b!1), v!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "update_PState")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "derive"
                                                                               14)
                                                                              (("2"
                                                                                (inst
                                                                                 14
                                                                                 "sMP2!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (then
                                                (split -1)
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)
                                                (flatten)))
                                              (("1"
                                                (inst -4 "x!1 - 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?
                                                     -4
                                                     :where
                                                     -3)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "sMP1!1")
                                                      (("1"
                                                        (inst?
                                                         -4
                                                         :where
                                                         -3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "sMP2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "derive"
                                                                   +)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (split -1)
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)
                                                  (flatten)))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp -5 "m1!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?
                                                         -6
                                                         :where
                                                         -3)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "sMP1!1")
                                                          (("1"
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "check_for_exception")
                                                                  (("1"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         15
                                                                         "sMP2!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "derive"
                                                                             +)
                                                                            (("1"
                                                                              (inst
                                                                               15
                                                                               "sMP2!1"
                                                                               "v1!1"
                                                                               "m1!1"
                                                                               "m2!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "check_for_exception")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "m2!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -7
                                                                                   :where
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "sMP2!1")
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -7
                                                                                       :where
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (inst
                                                                                             16
                                                                                             "sMP2!2")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "derive"
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   16
                                                                                                   "sMP2!1"
                                                                                                   "v1!1"
                                                                                                   "m1!1"
                                                                                                   "m2!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "check_for_exception")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -6
                                                                               "m2!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -6
                                                                                     "sMP2!1")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (inst
                                                                                             17
                                                                                             "sMP2!2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "derive"
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   17
                                                                                                   "sMP2!1"
                                                                                                   "v1!1"
                                                                                                   "m1!1"
                                                                                                   "m2!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "check_for_exception")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (split -1)
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst-cp
                                                       -15
                                                       "m1!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?
                                                           -16
                                                           :where
                                                           -3)
                                                          (("1"
                                                            (inst
                                                             -16
                                                             "sMP1!1")
                                                            (("1"
                                                              (inst?
                                                               -16
                                                               :where
                                                               -3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -15
                                                                     "m2!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?
                                                                         -16
                                                                         :where
                                                                         -4)
                                                                        (("1"
                                                                          (inst
                                                                           -16
                                                                           "sMP2!1")
                                                                          (("1"
                                                                            (inst?
                                                                             -16
                                                                             :where
                                                                             -4)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (split
                                                                                   -6)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split
                                                                                         -7)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "update_PState"
                                                                                               -3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "raise"
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "on_method_entry")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -10
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -13)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "derive"
                                                                                                                 -14)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -14)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "update_stack")
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "update_PState")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "o")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "update_local")
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "on_method_entry")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -12)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "derive"
                                                                                                             -13)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -13)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "update_stack")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "o")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_local")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "check_assertion")
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (inst-cp
                                                                                                             -25
                                                                                                             "m2!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -26
                                                                                                                 :where
                                                                                                                 -4)
                                                                                                                (("2"
                                                                                                                  (postpone)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (split -1)
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?
                                                           -4
                                                           :where
                                                           -3)
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "sMP1!1")
                                                            (("1"
                                                              (inst?
                                                               -4
                                                               :where
                                                               -3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     17
                                                                     "sMP2!1")
                                                                    (("1"
                                                                      (expand
                                                                       "derive"
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (split -1)
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      (("1"
                                                        (inst
                                                         -4
                                                         "x!1 - 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?
                                                             -4
                                                             :where
                                                             -3)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "sMP1!1")
                                                              (("1"
                                                                (inst?
                                                                 -4
                                                                 :where
                                                                 -3)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       18
                                                                       "sMP2!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "derive"
                                                                           +)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (split -1)
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))
                                                        (("1"
                                                          (expand
                                                           "execute_CaseJML")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split
                                                               -4)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   19
                                                                   "sMP1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "x!1 - 1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?
                                                                       -6
                                                                       :where
                                                                       -2)
                                                                      (("2"
                                                                        (inst
                                                                         -6
                                                                         "sMP1!1")
                                                                        (("2"
                                                                          (inst?
                                                                           -6
                                                                           :where
                                                                           -2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     20
                                                                                     "sMP2!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "derive"
                                                                                         +)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "return_of_stmt")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "execute_CaseJML")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (then
                                                            (split -1)
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (inst-cp
                                                               -6
                                                               "m1!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -4)
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "sMP1!1")
                                                                    (("1"
                                                                      (inst?
                                                                       -7
                                                                       :where
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (expand
                                                                             "check_for_exception")
                                                                            (("1"
                                                                              (split
                                                                               -5)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     20
                                                                                     "sMP2!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "derive"
                                                                                         +)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "return_of_stmt")
                                                                                          (("1"
                                                                                            (inst
                                                                                             20
                                                                                             "sMP2!1"
                                                                                             "v1!1"
                                                                                             "m1!1"
                                                                                             "m2!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "check_for_exception")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -8
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -8
                                                                                             :where
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -8
                                                                                               "sMP2!1")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -8
                                                                                                 :where
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       21
                                                                                                       "sMP2!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "derive"
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             21)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "return_of_stmt")
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "sMP2!1"
                                                                                                               "v1!1"
                                                                                                               "m1!1"
                                                                                                               "m2!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "check_for_exception")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -7
                                                                                         "m2!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -7
                                                                                               "sMP2!1")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -7
                                                                                                 :where
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       22
                                                                                                       "sMP2!2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "derive"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             22)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "return_of_stmt")
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "sMP2!1"
                                                                                                               "v1!1"
                                                                                                               "m1!1"
                                                                                                               "m2!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "check_for_exception")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (split
                                                               -1)
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst-cp
                                                                 -6
                                                                 "m1!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -4)
                                                                    (("1"
                                                                      (inst
                                                                       -7
                                                                       "sMP1!1")
                                                                      (("1"
                                                                        (inst?
                                                                         -7
                                                                         :where
                                                                         -4)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "m2!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -5)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -6
                                                                                       "sMP2!1")
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -6
                                                                                         :where
                                                                                         -5)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               21
                                                                                               "sMP2!2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "derive"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     21)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "return_of_stmt")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             1)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "sMP2!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (split
                                                                 -1)
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))
                                                              (("1"
                                                                (expand
                                                                 "execute_set")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "x!1 - 1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?
                                                                         -7
                                                                         :where
                                                                         -4)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "sMP1!1")
                                                                            (("1"
                                                                              (inst?
                                                                               -7
                                                                               :where
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (split
                                                                                       -5)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           22
                                                                                           "sMP2!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           23
                                                                                           "update_GhostVars(sMP2!1, update_store(target(b!1), v!2))")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "update_GhostVars")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "derive"
                                                                                                   23)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     23)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "return_of_stmt")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "execute_set")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "sMP2!1"
                                                                                                         "v!2")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_GhostVars")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (split
                                                                   -1)
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))
                                                                (("1"
                                                                  (inst
                                                                   23
                                                                   "sMP1!1")
                                                                  (("1"
                                                                    (expand
                                                                     "derive"
                                                                     +)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "return_of_stmt")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (split
                                                                     -1)
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?
                                                                           -5
                                                                           :where
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "sMP1!1")
                                                                            (("1"
                                                                              (inst?
                                                                               -5
                                                                               :where
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     24
                                                                                     "sMP2!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "derive"
                                                                                         +)
                                                                                        (("1"
                                                                                          (split
                                                                                           24)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "return_of_stmt")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   1)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (split
                                                                       -1)
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))
                                                                    (("1"
                                                                      (inst
                                                                       25
                                                                       "update_PState(sMP1!1, raise(Throwable))")
                                                                      (("1"
                                                                        (expand
                                                                         "update_PState")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "derive"
                                                                             +)
                                                                            (("1"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("1"
                                                                                (expand
                                                                                 "return_of_stmt")
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       25)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (split
                                                                         -1)
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -8
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -4)
                                                                              (("1"
                                                                                (inst
                                                                                 -9
                                                                                 "sMP1!1")
                                                                                (("1"
                                                                                  (inst?
                                                                                   -9
                                                                                   :where
                                                                                   -4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (split
                                                                                           -5)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -9
                                                                                               "m2!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -10
                                                                                                   :where
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -10
                                                                                                     "update_PState(sMP2!1, catch)")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -10
                                                                                                       :where
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState"
                                                                                                           -10)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -9
                                                                                                               "m3!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst?
                                                                                                                   -9
                                                                                                                   :where
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -9
                                                                                                                     "update_PState(sMP2!2, catch)")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -9
                                                                                                                       :where
                                                                                                                       -7)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "update_PState"
                                                                                                                           -9)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -8)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   26
                                                                                                                                   "update_PState(sMP2!3, raise(down(ex(pstate(tau2!1)))))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "update_PState")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "derive"
                                                                                                                                           +)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             26)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "return_of_stmt")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (apply
                                                                                                                                                   (branch
                                                                                                                                                    (split
                                                                                                                                                     1)
                                                                                                                                                    ((then
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)))))
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (inst
                                                                                                                                               1
                                                                                                                                               "m1!1"
                                                                                                                                               "m2!1"
                                                                                                                                               "m3!1"
                                                                                                                                               "sMP2!1"
                                                                                                                                               "sMP2!2"
                                                                                                                                               "sMP2!3")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   27
                                                                                                                                   "sMP2!3")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "derive"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         27)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "return_of_stmt")
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (apply
                                                                                                                                               (branch
                                                                                                                                                (split
                                                                                                                                                 1)
                                                                                                                                                ((then
                                                                                                                                                  (flatten)
                                                                                                                                                  (assert)))))
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "m1!1"
                                                                                                                                           "m2!1"
                                                                                                                                           "m3!1"
                                                                                                                                           "sMP2!1"
                                                                                                                                           "sMP2!2"
                                                                                                                                           "sMP2!3")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -8
                                                                                               "m2!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -9
                                                                                                   :where
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -9
                                                                                                     "update_PState(sMP2!1, catch)")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -9
                                                                                                       :where
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState"
                                                                                                           -9)
                                                                                                          (("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "derive"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -10
                                                                                                                       "m3!1")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (inst?
                                                                                                                           -10
                                                                                                                           :where
                                                                                                                           -8)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -10
                                                                                                                             "update_PState(sMP2!2, catch)")
                                                                                                                            (("2"
                                                                                                                              (inst?
                                                                                                                               -10
                                                                                                                               :where
                                                                                                                               -8)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "update_PState"
                                                                                                                                   -10)
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       28
                                                                                                                                       "sMP2!3")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "derive"
                                                                                                                                           +)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             28)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "return_of_stmt")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (apply
                                                                                                                                                   (branch
                                                                                                                                                    (split
                                                                                                                                                     1)
                                                                                                                                                    ((then
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)))))
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (inst?
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 1
                                                                                                                                                 "sMP2!1"
                                                                                                                                                 "sMP2!2"
                                                                                                                                                 "sMP2!3")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "update_PState")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (split
                                                                           -1)
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst?
                                                                               -5
                                                                               :where
                                                                               -4)
                                                                              (("1"
                                                                                (inst
                                                                                 -5
                                                                                 "sMP1!1")
                                                                                (("1"
                                                                                  (inst?
                                                                                   -5
                                                                                   :where
                                                                                   -4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         27
                                                                                         "sMP2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "derive"
                                                                                             +)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "return_of_stmt")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     27)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "execute_assert")
                                                                          (("2"
                                                                            (expand
                                                                             "check_assertion")
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     -6
                                                                                     :where
                                                                                     -3)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       "sMP1!1")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -6
                                                                                         :where
                                                                                         -3)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         28
                                                                                                         "sMP2!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "derive"
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               28)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "return_of_stmt")
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (branch
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      ((then
                                                                                                                        (flatten)
                                                                                                                        (assert)))))
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "execute_assert")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "check_assertion")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "sMP2!1"
                                                                                                                     "v!2")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         29
                                                                                                         "update_PState(sMP2!1, raise(JMLExc))")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "derive"
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 29)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "return_of_stmt")
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "execute_assert")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "check_assertion")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "sMP2!1"
                                                                                                                       "v!2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     29
                                                                                                     "sMP2!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "derive"
                                                                                                         +)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           29)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "return_of_stmt")
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (branch
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  ((then
                                                                                                                    (flatten)
                                                                                                                    (assert)))))
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "execute_assert")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "check_assertion")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "sMP2!1"
                                                                                                                 "v!2")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished nil 31516 10616 t shostak)))

