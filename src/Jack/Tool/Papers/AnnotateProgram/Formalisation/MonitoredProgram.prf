(MonitoredProgram
 (get_monitored_class_TCC1 0
  (get_monitored_class_TCC1-1 nil 3399182363 3405932547
   ("" (skolem-typepred)
    (("" (expand* "compatible" "nonempty?" "empty?" "member")
      (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   95 70 t nil))
 (name_get_monitored_class 0
  (name_get_monitored_class-1 nil 3400563327 3405932547
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (assert) nil nil)) nil))
    nil)
   proved
   ((get_monitored_class const-decl "Class" MonitoredProgram nil)) 52
   50 t shostak))
 (get_monitored_class_in_classes 0
  (get_monitored_class_in_classes-1 nil 3400563719 3405932547
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (propax) nil nil)) nil))
    nil)
   proved
   ((get_monitored_class const-decl "Class" MonitoredProgram nil)) 50
   50 t shostak))
 (get_monitored_class_unique_for_wf_MP_TCC1 0
  (get_monitored_class_unique_for_wf_MP_TCC1-1 nil 3399183164
   3405932547
   ("" (skolem-typepred)
    (("" (typepred "program(mp!1)")
      (("" (expand* "wf_MP" "compatible" "singleton?")
        (("" (flatten)
          (("" (skosimp)
            (("" (inst?)
              (("1"
                (expand* "wf_Program"
                 "wf_program_has_unique_class_names_def")
                (("1" (flatten)
                  (("1" (skosimp)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mp!1 skolem-const-decl "MonitoredProgram" MonitoredProgram nil)
    (c!1 skolem-const-decl "Class[Name]" MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (singleton? const-decl "bool" sets nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   222 220 t nil))
 (get_monitored_class_unique_for_wf_MP 0
  (get_monitored_class_unique_for_wf_MP-2 nil 3399183561 3405932547
   ("" (skosimp)
    (("" (expand* "get_monitored_class" "choose" "the") nil nil)) nil)
   proved
   ((get_monitored_class const-decl "Class" MonitoredProgram nil)
    (choose const-decl "(p)" sets nil) (the const-decl "(p)" sets nil))
   55 60 nil nil)
  (get_monitored_class_unique_for_wf_MP-1 nil 3399183469 3399183536
   ("" (skosimp)
    (("" (expand* "wf_MP" "get_monitored_class" "choose" "the") nil
      nil))
    nil)
   unchecked
   ((choose const-decl "(p)" sets nil) (the const-decl "(p)" sets nil))
   67208 100 t shostak)))
(MonitoredProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3391514279 3405932547
   ("" (subtype-tcc) nil nil) proved
   ((MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil))
   202 210 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3391514279 3405932548
   ("" (subtype-tcc) nil nil) proved
   ((MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil))
   59 60 nil nil))
 (wf_state_implies_wf_PSt 0
  (wf_state_implies_wf_PSt-1 nil 3388136206 3405932551
   ("" (skosimp*)
    (("" (expand "wf_PSt")
      (("" (skosimp*)
        (("" (typepred "mp!1")
          (("" (expand "compatible")
            (("" (skosimp*)
              (("" (expand "var_names")
                (("" (skosimp*)
                  (("" (inst -3 "l!1")
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (expand "wf_state")
                          (("" (inst -6 "name(l!1)")
                            (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_PSt const-decl "boolean" MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (This const-decl "Name" Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (is_local const-decl "boolean" State nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil))
   3744 3600 t shostak))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3396777599 3405932551
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (expand "wf_state")
        (("" (expand "union")
          (("" (expand "member")
            (("" (flatten)
              (("" (expand "wf_state")
                (("" (expand "wf_ghoststate")
                  (("" (inst -2 "vn!1")
                    (("" (inst -3 "vn!1")
                      (("" (assert)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (member const-decl "bool" sets nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil))
   136 140 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3396777649 3405932552
   ("" (skosimp*)
    (("" (expand "wf_Program")
      (("" (expand "wf_program_variables_disjoint_def")
        (("" (flatten)
          (("" (expand "wf_state")
            ((""
              (auto-rewrite "disjoint?" "intersection" "member"
                            "empty?")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "wf_state")
                    (("" (expand "wf_ghoststate")
                      (("" (inst -3 "vn!1")
                        (("" (assert)
                          (("" (inst -5 "vn!1")
                            (("" (inst -5 "vn!1")
                              ((""
                                (assert)
                                ((""
                                  (inst -2 "vn!1")
                                  ((""
                                    (flatten)
                                    ((""
                                      (split 3)
                                      (("1"
                                        (split -5)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (expand
                                           "wf_program_variables_not_reserved_words_def")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -8 "vn!1")
                                              (("2"
                                                (expand
                                                 "reserved_words")
                                                (("2"
                                                  (expand
                                                   "declared_var_names")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil))
   407 330 t shostak))
 (on_method_MVA_TCC1 0
  (on_method_MVA_TCC1-1 nil 3387174104 3405932553
   ("" (skosimp*) (("" (typepred "s!1") (("" (grind) nil nil)) nil))
    nil)
   proved
   ((get_monitored_class const-decl "Class" MonitoredProgram nil)
    (choose const-decl "(p)" sets nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (is_local const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_field const-decl "boolean" State nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil))
   784 760 t nil))
 (on_method_MVA_TCC2 0
  (on_method_MVA_TCC2-1 nil 3387174104 3405932553
   ("" (skosimp*)
    (("" (expand "wf_PEvent")
      (("" (assert)
        (("" (use "wf_state_implies_wf_PSt")
          (("" (assert)
            (("" (expand "wf_state") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_PEvent const-decl "boolean" MVASemantics nil)
    (wf_state_implies_wf_PSt formula-decl nil MonitoredProgramSemantics
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil))
   108 110 t nil))
 (on_method_MVA_TCC3 0
  (on_method_MVA_TCC3-1 nil 3392369297 3405932553
   ("" (skosimp*)
    (("" (typepred "mva(mp!1)")
      (("" (expand "complete") (("" (flatten) nil nil)) nil)) nil))
    nil)
   proved
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   59 60 t nil))
 (on_method_entry_MP_TCC1 0
  (on_method_entry_MP_TCC1-1 nil 3387174104 3405932553
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_entry")
        (("" (assert)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (skosimp*)
                (("2" (assert)
                  (("2" (split -7)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   269 240 t nil))
 (on_method_exit_normal_MP_TCC1 0
  (on_method_exit_normal_MP_TCC1-1 nil 3387174104 3405932553
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_normal")
        (("" (split -1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (skosimp*)
              (("2" (assert)
                (("2" (split -7)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   108 110 t nil))
 (on_method_exit_normal_MP_TCC2 0
  (on_method_exit_normal_MP_TCC2-2 nil 3405932631 nil
   (";;; Proof on_method_exit_normal_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC2"
    (skosimp*)
    ((";;; Proof on_method_exit_normal_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC2"
      (typepred "md!1")
      ((";;; Proof on_method_exit_normal_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC2"
        (expand "wf_Method")
        ((";;; Proof on_method_exit_normal_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC2"
          (expand "method_pred")
          ((";;; Proof on_method_exit_normal_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC2"
            (flatten) nil))))))))
    ";;; developed with shostak decision procedures")
   unchecked nil nil nil nil nil)
  (on_method_exit_normal_MP_TCC2-1 nil 3401773402 3405932553
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   146 140 t nil))
 (on_method_exit_normal_MP_TCC3 0
  (on_method_exit_normal_MP_TCC3-1 nil 3401773402 3405932554
   ("" (subtype-tcc) nil nil) proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   524 490 nil nil))
 (on_method_exit_normal_MP_TCC4 0
  (on_method_exit_normal_MP_TCC4-1 nil 3401773402 3405932555
   ("" (subtype-tcc) nil nil) proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1258 1190 nil nil))
 (on_method_exit_normal_MP_TCC5 0
  (on_method_exit_normal_MP_TCC5-1 nil 3401773402 3405932556
   ("" (subtype-tcc) nil nil) proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1332 1280 nil nil))
 (on_method_exit_normal_MP_TCC6 0
  (on_method_exit_normal_MP_TCC6-2 nil 3405932645 nil
   (";;; Proof on_method_exit_normal_MP_TCC6-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
    (skosimp*)
    ((";;; Proof on_method_exit_normal_MP_TCC6-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
      (typepred "md!1")
      ((";;; Proof on_method_exit_normal_MP_TCC6-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
        (expand "wf_BoolExpr")
        ((";;; Proof on_method_exit_normal_MP_TCC6-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
          (expand "wf_Method")
          ((";;; Proof on_method_exit_normal_MP_TCC6-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
            (expand "method_pred")
            ((";;; Proof on_method_exit_normal_MP_TCC6-1 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
              (flatten) nil))))))))))
    ";;; developed with shostak decision procedures")
   unchecked nil nil nil nil nil)
  (on_method_exit_normal_MP_TCC6-1 nil 3401773402 3405932557
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_BoolExpr")
        (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil))
   152 150 t nil))
 (on_method_exit_normal_MP_TCC7 0
  (on_method_exit_normal_MP_TCC7-1 nil 3401773402 3405932557
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   172 140 t nil))
 (on_method_exit_exceptional_MP_TCC1 0
  (on_method_exit_exceptional_MP_TCC1-1 nil 3387174104 3405932557
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_exceptional")
        (("" (split -1)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (split -8)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -7)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2"
                                (typepred "update_PState")
                                (("2"
                                  (expand "update_PState_type")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst -1 "s_new!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "raise")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   102 100 t nil))
 (on_method_exit_exceptional_MP_TCC2 0
  (on_method_exit_exceptional_MP_TCC2-2 nil 3405932656 nil
   (";;; Proof on_method_exit_exceptional_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_exceptional_MP_TCC2"
    (skosimp*)
    ((";;; Proof on_method_exit_exceptional_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_exceptional_MP_TCC2"
      (typepred "md!1")
      ((";;; Proof on_method_exit_exceptional_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_exceptional_MP_TCC2"
        (expand "wf_Method")
        ((";;; Proof on_method_exit_exceptional_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_exceptional_MP_TCC2"
          (expand "method_pred")
          ((";;; Proof on_method_exit_exceptional_MP_TCC2-1 for formula MonitoredProgramSemantics.on_method_exit_exceptional_MP_TCC2"
            (flatten) nil))))))))
    ";;; developed with shostak decision procedures")
   unchecked nil nil nil nil nil)
  (on_method_exit_exceptional_MP_TCC2-1 nil 3401773402 3405932557
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   141 140 t nil))
 (on_method_exit_exceptional_MP_TCC3 0
  (on_method_exit_exceptional_MP_TCC3-1 nil 3401773402 3405932558
   ("" (subtype-tcc) nil nil) proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   495 490 nil nil))
 (on_method_exit_exceptional_MP_TCC4 0
  (on_method_exit_exceptional_MP_TCC4-1 nil 3401773402 3405932559
   ("" (subtype-tcc) nil nil) proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (catch const-decl "PState" State nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1287 1220 nil nil))
 (on_method_exit_exceptional_MP_TCC5 0
  (on_method_exit_exceptional_MP_TCC5-1 nil 3401773402 3405932559
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp*)
          (("1" (assert)
            (("1" (replace -7)
              (("1" (lift-if)
                (("1" (assert)
                  (("1" (split 2)
                    (("1" (propax) nil nil)
                     ("2" (expand "update_PState")
                      (("2" (expand "raise") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   158 160 t nil))
 (initial_MP_state_TCC1 0
  (initial_MP_state_TCC1-1 nil 3387174104 3405932559
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (union const-decl "set" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   260 260 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3392371550 3405932561
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (flatten)
        (("" (skosimp*)
          (("" (expand "on_method_entry")
            (("" (split -2)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (replace -2 :dir rl)
                      (("2" (replace -10)
                        (("2" (expand "check_assertion")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (copy -11)
                                (("2"
                                  (apply
                                   (repeat (inst? -1 :where (-5 -17))))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case-replace
                                         "tau1!1 = tau1!2")
                                        (("1"
                                          (copy -15)
                                          (("1"
                                            (apply
                                             (repeat
                                              (inst?
                                               -1
                                               :where
                                               (-12 -24))))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case-replace
                                                   "tau2!1 = tau2!2")
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -19
                                                       :where
                                                       (-17 -29))))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -19)
                                                          (("1"
                                                            (split -32)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -3)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -27)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -3)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split -20)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (m1!1 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m1!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1295 1230 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-2 nil 3392373362 3405932561
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      (("" (flatten)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "check_assertion")
                  (("2" (flatten)
                    (("2" (skosimp*)
                      (("2" (replace -4 :dir rl)
                        (("2" (replace -16)
                          (("2" (copy -12)
                            (("2"
                              (apply (repeat
                                      (inst? -1 :where (-3 -15))))
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (case-replace
                                       "tau2!1 = tau2!2"
                                       :hide?
                                       t)
                                      (("1"
                                        (copy -14)
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst?
                                             -1
                                             :where
                                             (-9 -21))))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case-replace
                                                 "tau3!1 = tau3!2"
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -17
                                                     :where
                                                     (-14 -26))))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -19)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split -15)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -24)
                                                    (("2"
                                                      (replace -12)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -17)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   784 720 t nil)
  (IMP_SemanticsProofs_TCC2-1 nil 3392371550 3392371598
   ("" (assuming-tcc) nil nil) unfinished nil 2662 2380 nil nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-2 nil 3392373370 3405932562
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert)
            (("1" (skosimp*)
              (("1" (expand "check_assertion")
                (("1" (flatten)
                  (("1" (skosimp*)
                    (("1" (replace -5 :dir rl)
                      (("1" (replace -15)
                        (("1" (copy -11)
                          (("1"
                            (apply (repeat (inst? -1 :where (-4 -14))))
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case-replace
                                     "tau2!1 = tau2!2"
                                     :hide?
                                     t)
                                    (("1"
                                      (apply
                                       (repeat
                                        (inst? -13 :where (-9 -19))))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -13)
                                            (("1"
                                              (case-replace
                                               "tau3!1 = tau3!2")
                                              (("1"
                                                (replace -12)
                                                (("1"
                                                  (replace -24)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -22)
                                                (("2"
                                                  (replace -10)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -16)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (split -4)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (catch const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   440 410 t nil)
  (IMP_SemanticsProofs_TCC3-1 nil 3392371550 3392371601
   ("" (assuming-tcc) nil nil) unfinished nil 2668 2370 nil nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3392371550 3405932562
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (expand* "extend" "id")
        (("" (lift-if)
          (("" (split -2)
            (("1" (flatten)
              (("1" (assert)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (flatten)
                  (("2"
                    (inst -4
                     "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                               CaseJML(cdr(branches!1)))" "Unit" "Unit"
                     "s!1" "s1!1" "s2!1" "n1!1" "n2!1" "n1!1 - 1"
                     "n2!1 - 1")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n2!1 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (extend const-decl "R" extend nil))
   209 210 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3392371550 3405932562
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -1)
                  (("1" (replace -3)
                    (("1" (replace -6 :dir rl) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n1!1 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (n2!1 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   166 150 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3397385945 3405932563
   ("" (skosimp*)
    (("" (expand "execute_assert")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (expand "check_assertion")
              (("2" (skosimp*)
                (("2" (apply (repeat (inst? -5 :where (-2 -7))))
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -5)
                        (("1" (replace -7)
                          (("1" (lift-if)
                            (("1" (split -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n2!1 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (n1!1 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   215 220 t nil))
 (determ_step_MP 0
  (determ_step_MP-1 nil 3396350156 3405932563
   ("" (skosimp*)
    (("" (lemma "derive_determ_step")
      ((""
        (inst -1 "p!1" "n1!1" "n2!1" "b!1" "v1!1" "v2!1" "sigma!1"
         "sigma1!1" "sigma2!1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (derive_determ_step formula-decl nil SemanticsProofs nil))
   99 70 t shostak))
 (wf_initial_MP_state 0
  (wf_initial_MP_state-1 nil 3390055553 3405932563
   ("" (skosimp*)
    (("" (expand "wf_MP")
      (("" (flatten)
        (("" (expand "initial_MP_state")
          (("" (expand "wf_state")
            (("" (split 1)
              (("1" (use "wf_initial_MVA_state")
                (("1" (assert) nil nil)) nil)
               ("2" (use "wf_initial_Program_state")
                (("2" (assert) nil nil)) nil)
               ("3" (use "wf_initial_ghost_state")
                (("1" (assert) nil nil)
                 ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_initial_ghost_state formula-decl nil SemanticsJML nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (Bottom adt-constructor-decl "(Bottom?)" Val_adt nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (initial_Program_state const-decl "PState" State nil)
    (initial_MVA_state const-decl "AState" MVASemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, Name]"
     MonitoredProgramSemantics nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_initial_Program_state formula-decl nil State nil)
    (wf_initial_MVA_state formula-decl nil MVASemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil))
   252 250 t shostak))
 (wf_update_PState 0
  (wf_update_PState-1 nil 3392375856 3405932563 ("" (grind) nil nil)
   proved
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil))
   404 400 nil nil))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3392375867 3405932563
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil))))))))
    nil)
   proved
   ((wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil))
   60 60 nil nil))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3392375879 3405932564
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                                          ({x: [Name, Val[Name]] |
                                              EXISTS (l: LocalVarDecl[Name]):
                                                lvds!1(l) AND
                                                 name(l) = PROJ_1(x) AND
                                                  default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(program(p!1))
                                                      (update_local(name(arg!1), param_val!1)
                                                                   (update_locals({x: [Name, Val[Name]]
                                                                                   |
                                                                                   EXISTS
                                                                                   (l: LocalVarDecl[Name]):
                                                                                   lvds!1(l)
                                                                                   AND
                                                                                   name(l) = PROJ_1(x)
                                                                                   AND
                                                                                   default_value(jtype(l))
                                                                                   =
                                                                                   PROJ_2(x)})
                                                                                 (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(program(p!1))
                                                              (update_locals({x: [Name, Val[Name]] |
                                                                                EXISTS (l: LocalVarDecl[Name]):
                                                                                  lvds!1(l) AND
                                                                                   name(l) = PROJ_1(x) AND
                                                                                    default_value(jtype(l)) = PROJ_2(x)})
                                                                            (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "var_names")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                                           EXISTS (l: LocalVarDecl[Name]):
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   proved
   ((update_stack const-decl "FullState" Semantics nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (defined? const-decl "boolean" ValProp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state_update_locals formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_locals def-decl "PState" State nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (This const-decl "Name" Program nil)
    (update_local const-decl "PState" State nil)
    (O const-decl "T3" function_props nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (lvds!1 skolem-const-decl "finite_set[LocalVarDecl[Name]]"
     MonitoredProgramSemantics nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]"
     MonitoredProgramSemantics nil)
    (x!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: LocalVarDecl[Name]):
      lvds!1(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     MonitoredProgramSemantics nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: LocalVarDecl[Name]):
      lvds!1(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     MonitoredProgramSemantics nil)
    (x2!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: LocalVarDecl[Name]):
      lvds!1(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     MonitoredProgramSemantics nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]"
     MonitoredProgramSemantics nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]"
     MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil))
   729 670 t nil))
 (on_method_MVA_yields_wf_AState 0
  (on_method_MVA_yields_wf_AState-1 nil 3402486501 3405932565
   ("" (skosimp)
    (("" (expand "on_method_MVA")
      (("" (split)
        (("1" (flatten)
          (("1" (expand* "wf_AState" "step")
            (("1"
              (name-replace "t" "choose(LAMBDA (t: Transition):
                              ts(mva(mp!1))(t) AND scp(t) = cp(astate(s!1)) AND
                              event(t) = (# etype := et!1, mname := name(m!1) #) AND
                              guard(t)(stA(astate(s!1)), st(pstate(s!1))))")
              (("1" (typepred "t")
                (("1" (typepred "mva(mp!1)")
                  (("1" (expand* "complete" "wf_MVA" "wf_Trans")
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (use "execute_action_yields_wf_state")
                            (("1" (assert)
                              (("1"
                                (expand* "wf_state" "wf_AState")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "wf_state_implies_wf_PSt")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrite "nonempty_exists")
                  (("2" (typepred "mva(mp!1)")
                    (("2" (expand* "complete" "total")
                      (("2" (flatten)
                        (("2"
                          (inst - "cp(astate(s!1))"
                           "(# etype := et!1, mname := name(m!1) #)"
                           "stA(astate(s!1))" "st(pstate(s!1))")
                          (("2" (ground)
                            (("1" (skolem!) (("1" (inst?) nil nil))
                              nil)
                             ("2" (expand* "wf_state" "wf_AState") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "wf_state" -1) (("2" (flatten) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (wf_state_implies_wf_PSt formula-decl nil MonitoredProgramSemantics
     nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil) (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (execute_action_yields_wf_state formula-decl nil MVASemantics nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (total const-decl "boolean" MVASemantics nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, Name]"
     MonitoredProgramSemantics nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     MonitoredProgramSemantics nil)
    (s!1 skolem-const-decl "MPState" MonitoredProgramSemantics nil)
    (et!1 skolem-const-decl "EventType" MonitoredProgramSemantics nil)
    (m!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MonitoredProgramSemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (step const-decl "AState" MVASemantics nil))
   293 300 t shostak))
 (derive_yields_wf_state_MP 0
  (derive_yields_wf_state_MP-2 nil 3405932140 3405932535
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                 (sigma1, sigma2: MPState):
            wf_MP(mp) IMPLIES
             wf_state(mp)(sigma1) IMPLIES
              derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2"
                        (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "program(mp!1)" "b!1" _)
                          (("2"
                            (apply (branch
                                    (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst-cp -7 "m2!1")
                                  (("1"
                                    (inst -7 "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then (flatten) (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then (flatten) (assert)))))
                                  (("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -8
                                                   :where
                                                   -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -8
                                                         :where
                                                         -4)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "m2!1")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (auto-rewrite
                                                                                     "id")
                                                                                    (("2"
                                                                                      (case
                                                                                       "wf_state(mp!1)(tau3!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("1"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(mp!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(mp!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(mp!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   17)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "mp!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_update_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_arg_is_local")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "is_local"
                                                                                                                                                 "lookup_local"
                                                                                                                                                 "defined?")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal_MP")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -36
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -36
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -36
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -36
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -37
                                                                                                                                                           :where
                                                                                                                                                           -7)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -38
                                                                                                                                                               :where
                                                                                                                                                               -10)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -38)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -12)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -37)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -4)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_yields_wf_AState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "wf_state")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_ghoststate")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_ghost")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional_MP")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -33
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -33
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -33
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -34
                                                                                                                                                         :where
                                                                                                                                                         -6)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -33)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(mp!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "wf_state(mp!1)(tau3!2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -11)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState")
                                                                                                                                                                                (assert)
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (then
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  (assert)))
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "on_method_MVA_yields_wf_AState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState")
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(program(mp!1))(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                                                         classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                                                                                                          methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                                                                                                           name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "program(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry_MP")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "on_method_entry")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "check_assertion")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -3)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -27
                                                                                                     "m3!2")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -27
                                                                                                       "m2!2 - 1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -27
                                                                                                         "m1!2 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -27
                                                                                                               :where
                                                                                                               -4)))
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -28
                                                                                                                 :where
                                                                                                                 -7)))
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -29
                                                                                                                   :where
                                                                                                                   -9)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -29)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -14)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_state")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wf_ghoststate")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "is_ghost")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -28)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -9)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("1"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (expand
                                                                                 "method_pred")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (expand
                                                                               "method_pred")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (case
                                                                 "    FORALL (
                                                branches : (wf_Branches(program(mp!1))),
                                                s1, s2 : MPState, x : nat) :
                                             execute_CaseJML(mp!1, branches, s1, s2, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                                                                 (b: (wf_Body(program(p))), sigma1: MPState,
                                                                  v: Val[Name], sigma2: MPState)
                                                                 (m: below(k)):
                                                            derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
                                            y < x IMPLIES
                                             (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                                     (sigma1, sigma2: MPState):
                                                wf_MP(mp) IMPLIES
                                                 wf_state(mp)(sigma1) IMPLIES
                                                  derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
                                                   wf_state(mp)(sigma2))) IMPLIES
                                    wf_state(mp!1)(s2)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    -7))
                                                                  (("2"
                                                                    (induct
                                                                     "branches")
                                                                    (("1"
                                                                      (typepred
                                                                       "branches!1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "extend")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (expand
                                                                         "execute_CaseJML"
                                                                         -3)
                                                                        (("3"
                                                                          (expand*
                                                                           "extend"
                                                                           "id")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "wf_Branches")
                                                                              (("3"
                                                                                (expand
                                                                                 "every"
                                                                                 -2)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "derive"
                                                                                       -6)
                                                                                      (("3"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "check_for_exception")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(tau!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -16
                                                                                                             "m2!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -16
                                                                                                                   :where
                                                                                                                   -2)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -8
                                                                                                             "tau!1"
                                                                                                             "s2!1"
                                                                                                             "m2!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -18
                                                                                                                     "y!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -18
                                                                                                                           :where
                                                                                                                           -4)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "derive"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -14
                                                                                                         "m1!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -14
                                                                                                               :where
                                                                                                               -5)))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -11
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -10
                                                                                         :where
                                                                                         -1)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -7
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -7
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "id")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "wf_ghoststate")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "is_ghost")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "defined?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_GhostVars")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_store")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "b!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subterm"
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_bottom_iff_exception_step")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -9
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -9
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -9
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -12
                                                                                                 :where
                                                                                                 -7)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -12)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             26)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wf_state"
                                                                                                                     (1
                                                                                                                      -1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_local")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "is_field")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -5)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -12
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   proved
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (m1!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (m2!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics
     nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (old_val_arg!1 skolem-const-decl "Val[Name]"
     MonitoredProgramSemantics nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (m2!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (m3!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (m2!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (b!1 skolem-const-decl "(wf_Body(program(mp!1)))"
     MonitoredProgramSemantics nil)
    (m!1 skolem-const-decl "Method[Name]" MonitoredProgramSemantics
     nil)
    (a!1 skolem-const-decl "Val[Name]" MonitoredProgramSemantics nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, Name]"
     MonitoredProgramSemantics nil)
    (md!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MonitoredProgramSemantics nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (extend const-decl "R" extend nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (v!1 skolem-const-decl "Val[Name]" MonitoredProgramSemantics nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   391365 34080 t nil)
  (derive_yields_wf_state_MP-1 nil 3402832608 3405925749
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
             (sigma1, sigma2: MPState):
        wf_MP(mp) IMPLIES
         wf_state(mp)(sigma1) IMPLIES
          derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2"
                        (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "program(mp!1)" "b!1" _)
                          (("2"
                            (apply (branch
                                    (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst-cp -7 "m2!1")
                                  (("1"
                                    (inst -7 "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then (flatten) (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then (flatten) (assert)))))
                                  (("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -8
                                                   :where
                                                   -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -8
                                                         :where
                                                         -4)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "m2!1")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (auto-rewrite
                                                                                     "id")
                                                                                    (("2"
                                                                                      (case
                                                                                       "wf_state(mp!1)(tau3!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("1"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(mp!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(mp!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(mp!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   17)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "mp!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_update_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_arg_is_local")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "is_local"
                                                                                                                                                 "lookup_local"
                                                                                                                                                 "defined?")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal_MP")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -36
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -36
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -36
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -36
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -37
                                                                                                                                                           :where
                                                                                                                                                           -7)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -38
                                                                                                                                                               :where
                                                                                                                                                               -10)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -38)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -12)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -37)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -4)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_yields_wf_AState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "wf_state")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_ghoststate")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_ghost")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional_MP")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -33
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -33
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -33
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -34
                                                                                                                                                         :where
                                                                                                                                                         -6)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -33)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(mp!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "wf_state(mp!1)(tau3!2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -11)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState")
                                                                                                                                                                                (assert)
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (then
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  (assert)))
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "on_method_MVA_yields_wf_AState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState")
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(program(mp!1))(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                     classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                                                                      methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                                                                       name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "program(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry_MP")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "on_method_entry")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "check_assertion")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -3)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -27
                                                                                                     "m3!2")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -27
                                                                                                       "m2!2 - 1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -27
                                                                                                         "m1!2 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -27
                                                                                                               :where
                                                                                                               -4)))
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -28
                                                                                                                 :where
                                                                                                                 -7)))
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -29
                                                                                                                   :where
                                                                                                                   -9)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -29)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -14)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_state")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wf_ghoststate")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "is_ghost")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -28)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -9)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("1"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (case
                                                                 "    FORALL (
            branches : (wf_Branches(program(mp!1))), 
            s1, s2 : MPState, x : nat) :
         execute_CaseJML(mp!1, branches, s1, s2, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                             (b: (wf_Body(program(p))), sigma1: MPState,
                              v: Val[Name], sigma2: MPState)
                             (m: below(k)):
                        derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
        y < x IMPLIES
         (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                 (sigma1, sigma2: MPState):
            wf_MP(mp) IMPLIES
             wf_state(mp)(sigma1) IMPLIES
              derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
               wf_state(mp)(sigma2))) IMPLIES
wf_state(mp!1)(s2)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    -7))
                                                                  (("2"
                                                                    (induct
                                                                     "branches")
                                                                    (("1"
                                                                      (typepred
                                                                       "branches!1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "extend")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (expand
                                                                         "execute_CaseJML"
                                                                         -3)
                                                                        (("3"
                                                                          (expand*
                                                                           "extend"
                                                                           "id")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "wf_Branches")
                                                                              (("3"
                                                                                (expand
                                                                                 "every"
                                                                                 -2)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "derive"
                                                                                       -6)
                                                                                      (("3"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "check_for_exception")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(tau!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -16
                                                                                                             "m2!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -16
                                                                                                                   :where
                                                                                                                   -2)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -8
                                                                                                             "tau!1"
                                                                                                             "s2!1"
                                                                                                             "m2!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -18
                                                                                                                     "y!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -18
                                                                                                                           :where
                                                                                                                           -4)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "derive"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -14
                                                                                                         "m1!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -14
                                                                                                               :where
                                                                                                               -5)))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -11
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -10
                                                                                         :where
                                                                                         -1)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -7
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -7
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "id")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "wf_ghoststate")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "is_ghost")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "defined?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_GhostVars")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_store")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "b!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subterm"
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_bottom_iff_exception_step")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -9
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -9
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -9
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -12
                                                                                                 :where
                                                                                                 -7)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -12)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             26)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wf_state"
                                                                                                                     (1
                                                                                                                      -1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_local")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "is_field")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -5)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -12
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil) nil
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil) nil
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics
     nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil) nil
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    nil (check_assertion const-decl "boolean" SemanticsJML nil) nil
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    nil (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil) nil
    nil (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (extend const-decl "R" extend nil) nil
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil) nil
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   1686477 36250 t shostak))
 (derive_never_leaves_halted 0
  (derive_never_leaves_halted-1 nil 3404128932 3405932592
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
             (sigma1, sigma2: MPState):
        wf_MP(mp) IMPLIES
         cp(astate(sigma1)) = halted IMPLIES
          derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES
           cp(astate(sigma2)) = halted")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2"
                (apply (branch (split -4)
                        ((then (flatten) (assert) (flatten)
                          (assert)))))
                (("2" (lift-if)
                  (("2"
                    (apply (branch (split -1)
                            ((then (flatten) (assert) (flatten)
                              (assert)))))
                    (("2"
                      (apply (branch (split -1)
                              ((then
                                (flatten)
                                (assert)
                                (flatten)
                                (assert)))))
                      (("1"
                        (apply (then
                                (skosimp*)
                                (copy -6)
                                (inst -1 "m1!1")
                                (inst -7 "m2!1")
                                (assert)
                                (apply (repeat (inst? -1 :where -4)))
                                (apply (repeat (inst? -7 :where -5)))
                                (assert)
                                (flatten)
                                (assert)))
                        nil nil)
                       ("2"
                        (apply (branch
                                (split -1)
                                ((then
                                  (flatten)
                                  (assert)
                                  (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (apply
                                 (then
                                  (skosimp*)
                                  (inst -5 "x!1 - 1")
                                  (assert)
                                  (apply (repeat (inst? -5 :where -3)))
                                  (assert)
                                  (flatten)
                                  (assert)))
                                nil
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("1"
                                  (apply
                                   (then
                                    (skosimp*)
                                    (inst-cp -6 "m1!1")
                                    (assert)
                                    (apply
                                     (repeat (inst? -7 :where -3)))
                                    (assert)))
                                  (("1"
                                    (expand*
                                     "check_for_exception"
                                     "check_for_exception_final")
                                    (("1"
                                      (apply
                                       (branch
                                        (split -4)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (inst -9 "m2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -9 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                                  (("1"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (copy -6)
                                      (inst -1 "m1!1")
                                      (inst -7 "m2!1")
                                      (assert)
                                      (apply
                                       (repeat (inst? -1 :where -4)))
                                      (apply
                                       (repeat (inst? -7 :where -5)))
                                      (assert)
                                      (flatten)
                                      (assert)))
                                    nil
                                    nil)
                                   ("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (apply
                                             (then
                                              (skosimp*)
                                              (inst -5 "x!1 - 1")
                                              (assert)
                                              (apply
                                               (repeat
                                                (inst? -5 :where -3)))
                                              (assert)
                                              (flatten)
                                              (assert)))
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split -4)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (expand
                                                   "update_PState")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply
                                               (then
                                                (inst -4 "x!1 - 1")
                                                (assert)
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -4
                                                   :where
                                                   -3)))
                                                (assert)
                                                (flatten)
                                                (assert)))
                                              nil
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -6)
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -1 "m1!1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -1
                                                         :where
                                                         -4)))
                                                      (assert)))
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -5)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -2)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -9
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -9
                                                                   :where
                                                                   -2)))
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -1)))
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -6)
                                                    (("1"
                                                      (inst -1 "m1!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -1
                                                             :where
                                                             -4)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy -7)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -6)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -7)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "update_PState")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "cp(astate(tau3!1)) = halted")
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau4!1)) = halted")
                                                                                  (("1"
                                                                                    (copy
                                                                                     -20)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "m4!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -1
                                                                                             :where
                                                                                             -9)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "cp(astate(tau6!1)) = halted")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cp(astate(tau7!1)) = halted")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   -13)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "on_method_exit_normal_MP")
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (branch
                                                                                                          (split
                                                                                                           -2)
                                                                                                          ((then
                                                                                                            (flatten)
                                                                                                            (assert)
                                                                                                            (flatten)
                                                                                                            (assert)))))
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (copy
                                                                                                             -29)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -3)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cp(astate(tau2!2)) = halted")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "check_assertion")
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (copy
                                                                                                                           -35)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "m2!2 - 1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (repeat
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   -9)))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "cp(astate(tau3!2)) = halted")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -37
                                                                                                                                       "m3!2 - 1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (apply
                                                                                                                                           (repeat
                                                                                                                                            (inst?
                                                                                                                                             -37
                                                                                                                                             :where
                                                                                                                                             -13)))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -14)
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState")
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -10)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update_PState")
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "cp(astate(tau1!2)) = halted")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -5
                                                                                                                         1
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "on_method_MVA"
                                                                                                                           "step")
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "mva(mp!1)")
                                                                                                                                    (("1"
                                                                                                                                      (expand*
                                                                                                                                       "complete"
                                                                                                                                       "trap_state"
                                                                                                                                       "total")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (rewrite
                                                                                                                                             "nonempty_exists")
                                                                                                                                            (("2"
                                                                                                                                              (inst?
                                                                                                                                               -4
                                                                                                                                               :where
                                                                                                                                               -7)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -4
                                                                                                                                                 "halted"
                                                                                                                                                 "stA(astate(tau1!2))"
                                                                                                                                                 "st(pstate(tau1!2))")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "check_assertion")
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (inst?
                                                                                                                               -1
                                                                                                                               :where
                                                                                                                               -3)))
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "on_method_exit_exceptional_MP")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               -28)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "m1!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -1
                                                                                                                       :where
                                                                                                                       -3)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "update_PState"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "cp(astate(tau2!2)) = halted")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "cp(astate(tau2!2)) = halted")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "check_assertion")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -33
                                                                                                                                     "m2!2 - 1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (inst?
                                                                                                                                           -33
                                                                                                                                           :where
                                                                                                                                           -9)))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -11)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -10)
                                                                                                                                                (("1"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -4
                                                                                                                               1
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("2"
                                                                                                                                (expand*
                                                                                                                                 "on_method_MVA"
                                                                                                                                 "step")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "mva(mp!1)")
                                                                                                                                          (("1"
                                                                                                                                            (expand*
                                                                                                                                             "complete"
                                                                                                                                             "trap_state"
                                                                                                                                             "total")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "nonempty_exists")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?
                                                                                                                                                     -4
                                                                                                                                                     :where
                                                                                                                                                     -7)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -4
                                                                                                                                                       "halted"
                                                                                                                                                       "stA(astate(tau1!2))"
                                                                                                                                                       "st(pstate(tau1!2))")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -11)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -21
                                                                                                   "m5!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -21
                                                                                                         :where
                                                                                                         -1)))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "update_stack")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "update_PState")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand*
                                                                                   "on_method_entry_MP"
                                                                                   "on_method_entry")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -3)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "check_assertion")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (copy
                                                                                               -28)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m1!2 - 1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       -5)))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cp(astate(tau1!2)) = halted")
                                                                                                        (("1"
                                                                                                          (copy
                                                                                                           -30)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m2!2 - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -10)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cp(astate(tau2!2)) = halted")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -32
                                                                                                                       "m3!2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (inst?
                                                                                                                             -32
                                                                                                                             :where
                                                                                                                             -13)))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (branch
                                                                                                                                (split
                                                                                                                                 -17)
                                                                                                                                ((then
                                                                                                                                  (flatten)
                                                                                                                                  (assert)
                                                                                                                                  (flatten)
                                                                                                                                  (assert)))))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand*
                                                                                                                                     "on_method_MVA"
                                                                                                                                     "step")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           3)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "mva(mp!1)")
                                                                                                                                              (("1"
                                                                                                                                                (expand*
                                                                                                                                                 "complete"
                                                                                                                                                 "trap_state"
                                                                                                                                                 "total")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "nonempty_exists")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?
                                                                                                                                                         -4
                                                                                                                                                         :where
                                                                                                                                                         -7)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -4
                                                                                                                                                           "halted"
                                                                                                                                                           "stA(astate(s_new!1))"
                                                                                                                                                           "st(pstate(s_new!1))")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -11)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst
                                                       -4
                                                       "x!1 - 1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -4
                                                         :where
                                                         -3)))
                                                      (assert)
                                                      (flatten)
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst
                                                         -4
                                                         "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -4
                                                           :where
                                                           -3)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (case
                                                         "FORALL(branches : (wf_Branches(program(mp!1))), sigma1, sigma2 : MPState) : cp(astate(sigma1)) = halted IMPLIES execute_CaseJML(mp!1, branches, sigma1, sigma2, x!1, LAMBDA (k: upto(x!1))(p: MonitoredProgram[CP, Name])
                             (b: (wf_Body(program(p))), sigma1: MPState,
                              v: Val[Name], sigma2: MPState)
                             (m: below(k)):
                        derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES cp(astate(sigma2)) = halted")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -5))
                                                          (("2"
                                                            (induct
                                                             "branches")
                                                            (("1"
                                                              (typepred
                                                               "branches!1")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand*
                                                                 "execute_CaseJML"
                                                                 "extend")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (expand*
                                                                   "execute_CaseJML"
                                                                   "extend")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "wf_Branches")
                                                                      (("3"
                                                                        (expand
                                                                         "every"
                                                                         -2)
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -8
                                                                               "x!1 - 1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -8
                                                                                     :where
                                                                                     -6)))
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (copy -7)
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m1!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -5)))
                                                                (assert)))
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -6)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -2)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -4
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -4
                                                                             :where
                                                                             -2)))
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -3
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -3
                                                                             :where
                                                                             -1)))
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (copy
                                                                 -6)
                                                                (inst
                                                                 -1
                                                                 "m1!1")
                                                                (inst
                                                                 -7
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   -5)))
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -6)))
                                                                (assert)
                                                                (flatten)
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "execute_set")
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (skosimp*)
                                                                  (inst
                                                                   -7
                                                                   "x!1 - 1")
                                                                  (assert)
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -4)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -5)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "update_GhostVars")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (skosimp*)
                                                                    (inst
                                                                     -5
                                                                     "x!1 - 1")
                                                                    (assert)
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (expand
                                                                     "update_PState")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (copy
                                                                         -8)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau2!1)) = halted")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -10
                                                                                     "m3!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -10
                                                                                           :where
                                                                                           -8)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "update_PState")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (split
                                                                                       -6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -11
                                                                                           "m2!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -11
                                                                                                 :where
                                                                                                 -3)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (skosimp*)
                                                                          (inst
                                                                           -5
                                                                           "x!1 - 1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -5
                                                                             :where
                                                                             -4)))
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "execute_assert")
                                                                        (("2"
                                                                          (expand
                                                                           "check_assertion")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (skosimp*)
                                                                              (inst
                                                                               -6
                                                                               "x!1 - 1")
                                                                              (assert)
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -6
                                                                                 :where
                                                                                 -3)))
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -4)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("2"
                                                                                  (expand
                                                                                   "update_PState")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   proved
   ((wf_nat formula-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (extend const-decl "R" extend nil)
    (list_induction formula-decl nil list_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     MonitoredProgramSemantics nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (s_new!1 skolem-const-decl "MPState" MonitoredProgramSemantics nil)
    (m1!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (step const-decl "AState" MVASemantics nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (trap_state const-decl "boolean" MVASemantics nil)
    (total const-decl "boolean" MVASemantics nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, Name]"
     MonitoredProgramSemantics nil)
    (tau1!2 skolem-const-decl "MPState" MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (md!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     MonitoredProgramSemantics nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (m2!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     MonitoredProgramSemantics nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (tau1!2 skolem-const-decl "MPState" MonitoredProgramSemantics nil)
    (m2!2 skolem-const-decl "nat" MonitoredProgramSemantics nil)
    (catch const-decl "PState" State nil)
    (update_stack const-decl "FullState" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   27748 24190 t shostak)))

