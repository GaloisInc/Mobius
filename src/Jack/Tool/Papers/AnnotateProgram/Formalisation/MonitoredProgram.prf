(MonitoredProgram
 (get_monitored_class_TCC1 0
  (get_monitored_class_TCC1-1 nil 3399182363 3403505899
   ("" (skolem-typepred)
    (("" (expand* "compatible" "nonempty?" "empty?" "member")
      (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil) nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   23 23 t nil))
 (name_get_monitored_class 0
  (name_get_monitored_class-1 nil 3400563327 3403505899
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (assert) nil nil)) nil))
    nil)
   untried (nil) 3 3 t shostak))
 (get_monitored_class_in_classes 0
  (get_monitored_class_in_classes-1 nil 3400563719 3403505899
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (propax) nil nil)) nil))
    nil)
   untried (nil) 3 3 t shostak))
 (get_monitored_class_unique_for_wf_MP_TCC1 0
  (get_monitored_class_unique_for_wf_MP_TCC1-1 nil 3399183164
   3403505900
   ("" (skolem-typepred)
    (("" (typepred "program(mp!1)")
      (("" (expand* "wf_MP" "compatible" "singleton?")
        (("" (flatten)
          (("" (skosimp)
            (("" (inst?)
              (("1"
                (expand* "wf_Program"
                 "wf_program_has_unique_class_names_def")
                (("1" (flatten)
                  (("1" (skosimp)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil nil (lift type-decl nil lift_adt nil) nil nil
    nil (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil
    nil nil (singleton? const-decl "bool" sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   86 85 t nil))
 (get_monitored_class_unique_for_wf_MP 0
  (get_monitored_class_unique_for_wf_MP-2 nil 3399183561 3403505900
   ("" (skosimp)
    (("" (expand* "get_monitored_class" "choose" "the") nil nil)) nil)
   untried
   (nil (the const-decl "(p)" sets nil)
    (choose const-decl "(p)" sets nil))
   3 3 nil nil)
  (get_monitored_class_unique_for_wf_MP-1 nil 3399183469 3399183536
   ("" (skosimp)
    (("" (expand* "wf_MP" "get_monitored_class" "choose" "the") nil
      nil))
    nil)
   proved
   ((choose const-decl "(p)" sets nil) (the const-decl "(p)" sets nil))
   67208 100 t shostak)))
(MonitoredProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3391514279 3403589880
   ("" (subtype-tcc) nil nil) unchecked
   (nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil
    nil nil nil nil (boolean nonempty-type-decl nil booleans nil) nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil)
   40 40 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3391514279 3403589880
   ("" (subtype-tcc) nil nil) unchecked (nil nil nil nil nil nil nil)
   46 46 nil nil))
 (wf_state_implies_wf_PSt 0
  (wf_state_implies_wf_PSt-1 nil 3388136206 3403589915
   ("" (skosimp*)
    (("" (expand "wf_PSt")
      (("" (skosimp*)
        (("" (typepred "mp!1")
          (("" (expand "compatible")
            (("" (skosimp*)
              (("" (expand "var_names")
                (("" (skosimp*)
                  (("" (inst -3 "l!1")
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (expand "wf_state")
                          (("" (inst -6 "name(l!1)")
                            (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil)
   3523 3521 t shostak))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3396777599 3403589916
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (expand "wf_state")
        (("" (expand "union")
          (("" (expand "member")
            (("" (flatten)
              (("" (expand "wf_state")
                (("" (expand "wf_ghoststate")
                  (("" (inst -2 "vn!1")
                    (("" (inst -3 "vn!1")
                      (("" (assert)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil (union const-decl "set" sets nil) nil nil nil
    (member const-decl "bool" sets nil) nil)
   48 48 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3396777649 3403589916
   ("" (skosimp*)
    (("" (expand "wf_Program")
      (("" (expand "wf_program_variables_disjoint_def")
        (("" (flatten)
          (("" (expand "wf_state")
            ((""
              (auto-rewrite "disjoint?" "intersection" "member"
                            "empty?")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "wf_state")
                    (("" (expand "wf_ghoststate")
                      (("" (inst -3 "vn!1")
                        (("" (assert)
                          (("" (inst -5 "vn!1")
                            (("" (inst -5 "vn!1")
                              ((""
                                (assert)
                                ((""
                                  (inst -2 "vn!1")
                                  ((""
                                    (flatten)
                                    ((""
                                      (split 3)
                                      (("1"
                                        (split -5)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (expand
                                           "wf_program_variables_not_reserved_words_def")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -8 "vn!1")
                                              (("2"
                                                (expand
                                                 "reserved_words")
                                                (("2"
                                                  (expand
                                                   "declared_var_names")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil nil nil nil nil nil nil
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil) nil nil)
   34 34 t shostak))
 (on_method_MVA_TCC1 0
  (on_method_MVA_TCC1-1 nil 3387174104 3403589917
   ("" (skosimp*) (("" (typepred "s!1") (("" (grind) nil nil)) nil))
    nil)
   unchecked
   (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    (choose const-decl "(p)" sets nil) nil)
   87 87 t nil))
 (on_method_MVA_TCC2 0
  (on_method_MVA_TCC2-1 nil 3387174104 3403589917
   ("" (skosimp*)
    (("" (expand "wf_PEvent")
      (("" (assert)
        (("" (use "wf_state_implies_wf_PSt")
          (("" (assert)
            (("" (expand "wf_state") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil
    nil nil nil nil (boolean nonempty-type-decl nil booleans nil) nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)
   47 48 t nil))
 (on_method_MVA_TCC3 0
  (on_method_MVA_TCC3-1 nil 3392369297 3403589918
   ("" (skosimp*)
    (("" (typepred "mva(mp!1)")
      (("" (expand "complete") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil)
   2 3 t nil))
 (on_method_entry_MP_TCC1 0
  (on_method_entry_MP_TCC1-1 nil 3387174104 3403589918
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_entry")
        (("" (assert)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (skosimp*)
                (("2" (assert)
                  (("2" (split -7)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil)
   39 40 t nil))
 (on_method_exit_normal_MP_TCC1 0
  (on_method_exit_normal_MP_TCC1-1 nil 3387174104 3403589918
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_normal")
        (("" (split -1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (skosimp*)
              (("2" (assert)
                (("2" (split -7)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   30 31 t nil))
 (on_method_exit_normal_MP_TCC2 0
  (on_method_exit_normal_MP_TCC2-1 nil 3401773402 3403589918
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil)
   4 4 t nil))
 (on_method_exit_normal_MP_TCC3 0
  (on_method_exit_normal_MP_TCC3-1 nil 3401773402 3403589919
   ("" (subtype-tcc) nil nil) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   65 65 nil nil))
 (on_method_exit_normal_MP_TCC4 0
  (on_method_exit_normal_MP_TCC4-1 nil 3401773402 3403589921
   ("" (subtype-tcc) nil nil) unchecked
   (nil (choose const-decl "(p)" sets nil) nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil nil nil nil
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil nil nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil (bool nonempty-type-eq-decl nil booleans nil))
   199 200 nil nil))
 (on_method_exit_normal_MP_TCC5 0
  (on_method_exit_normal_MP_TCC5-1 nil 3401773402 3403589924
   ("" (subtype-tcc) nil nil) unchecked
   (nil (choose const-decl "(p)" sets nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil nil nil nil
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil nil nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil (bool nonempty-type-eq-decl nil booleans nil))
   272 273 nil nil))
 (on_method_exit_normal_MP_TCC6 0
  (on_method_exit_normal_MP_TCC6-1 nil 3401773402 3403589924
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_BoolExpr")
        (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil)
   6 6 t nil))
 (on_method_exit_normal_MP_TCC7 0
  (on_method_exit_normal_MP_TCC7-1 nil 3401773402 3403589924
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   (nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   35 35 t nil))
 (on_method_exit_exceptional_MP_TCC1 0
  (on_method_exit_exceptional_MP_TCC1-1 nil 3387174104 3403589924
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_exceptional")
        (("" (split -1)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (split -8)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -7)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2"
                                (typepred "update_PState")
                                (("2"
                                  (expand "update_PState_type")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst -1 "s_new!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "raise")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   30 29 t nil))
 (on_method_exit_exceptional_MP_TCC2 0
  (on_method_exit_exceptional_MP_TCC2-1 nil 3401773402 3403589924
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil)
   3 4 t nil))
 (on_method_exit_exceptional_MP_TCC3 0
  (on_method_exit_exceptional_MP_TCC3-1 nil 3401773402 3403589925
   ("" (subtype-tcc) nil nil) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   44 44 nil nil))
 (on_method_exit_exceptional_MP_TCC4 0
  (on_method_exit_exceptional_MP_TCC4-1 nil 3401773402 3403589927
   ("" (subtype-tcc) nil nil) unchecked
   (nil nil (choose const-decl "(p)" sets nil) nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil nil nil nil
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil nil nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil (bool nonempty-type-eq-decl nil booleans nil))
   219 218 nil nil))
 (on_method_exit_exceptional_MP_TCC5 0
  (on_method_exit_exceptional_MP_TCC5-1 nil 3401773402 3403589927
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp*)
          (("1" (assert)
            (("1" (replace -7)
              (("1" (lift-if)
                (("1" (assert)
                  (("1" (split 2)
                    (("1" (propax) nil nil)
                     ("2" (expand "update_PState")
                      (("2" (expand "raise") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   36 36 t nil))
 (initial_MP_state_TCC1 0
  (initial_MP_state_TCC1-1 nil 3387174104 3403589928
   ("" (subtype-tcc) nil nil) unchecked
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   66 66 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3392371550 3403589931
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (flatten)
        (("" (skosimp*)
          (("" (expand "on_method_entry")
            (("" (split -2)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (replace -2 :dir rl)
                      (("2" (replace -10)
                        (("2" (expand "check_assertion")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (copy -11)
                                (("2"
                                  (apply
                                   (repeat (inst? -1 :where (-5 -17))))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case-replace
                                         "tau1!1 = tau1!2")
                                        (("1"
                                          (copy -15)
                                          (("1"
                                            (apply
                                             (repeat
                                              (inst?
                                               -1
                                               :where
                                               (-12 -24))))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case-replace
                                                   "tau2!1 = tau2!2")
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -19
                                                       :where
                                                       (-17 -29))))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -19)
                                                          (("1"
                                                            (split -32)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -3)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -27)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -3)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split -20)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil nil nil nil nil nil nil nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   335 335 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-2 nil 3392373362 3403589934
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      (("" (flatten)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "check_assertion")
                  (("2" (flatten)
                    (("2" (skosimp*)
                      (("2" (replace -4 :dir rl)
                        (("2" (replace -16)
                          (("2" (copy -12)
                            (("2"
                              (apply (repeat
                                      (inst? -1 :where (-3 -15))))
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (case-replace
                                       "tau2!1 = tau2!2"
                                       :hide?
                                       t)
                                      (("1"
                                        (copy -14)
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst?
                                             -1
                                             :where
                                             (-9 -21))))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case-replace
                                                 "tau3!1 = tau3!2"
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -17
                                                     :where
                                                     (-14 -26))))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -19)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split -15)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -24)
                                                    (("2"
                                                      (replace -12)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -17)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil nil nil nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil nil nil nil nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil)
   239 239 t nil)
  (IMP_SemanticsProofs_TCC2-1 nil 3392371550 3392371598
   ("" (assuming-tcc) nil nil) unfinished nil 2662 2380 nil nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-2 nil 3392373370 3403589935
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (flatten)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "check_assertion")
                  (("1" (flatten)
                    (("1" (skosimp*)
                      (("1" (replace -5 :dir rl)
                        (("1" (replace -15)
                          (("1" (copy -11)
                            (("1"
                              (apply (repeat
                                      (inst? -1 :where (-4 -14))))
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case-replace
                                       "tau2!1 = tau2!2"
                                       :hide?
                                       t)
                                      (("1"
                                        (apply
                                         (repeat
                                          (inst? -13 :where (-9 -19))))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -13)
                                              (("1"
                                                (case-replace
                                                 "tau3!1 = tau3!2")
                                                (("1"
                                                  (replace -12)
                                                  (("1"
                                                    (replace -24)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -22)
                                                  (("2"
                                                    (replace -10)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -16)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil)
   114 113 t nil)
  (IMP_SemanticsProofs_TCC3-1 nil 3392371550 3392371601
   ("" (assuming-tcc) nil nil) unfinished nil 2668 2370 nil nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3392371550 3403589936
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2"
                  (inst -4
                   "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                           CaseJML(cdr(branches!1)))" "Unit" "Unit"
                   "s!1" "s1!1" "s2!1" "n1!1" "n2!1" "n1!1 - 1"
                   "n2!1 - 1")
                  (("1" (assert)
                    (("1" (split -4)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) nil nil
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil nil
    nil nil nil nil (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   100 99 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3392371550 3403589936
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -1)
                  (("1" (replace -3)
                    (("1" (replace -6 :dir rl) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   36 36 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3397385945 3403589937
   ("" (skosimp*)
    (("" (expand "execute_assert")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (expand "check_assertion")
              (("2" (skosimp*)
                (("2" (apply (repeat (inst? -5 :where (-2 -7))))
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -5)
                        (("1" (replace -7)
                          (("1" (lift-if)
                            (("1" (split -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil nil (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil) nil nil nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    nil (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   69 68 t nil))
 (determ_step_MP 0
  (determ_step_MP-1 nil 3396350156 3403589937
   ("" (skosimp*)
    (("" (lemma "derive_determ_step")
      ((""
        (inst -1 "p!1" "n1!1" "n2!1" "b!1" "v1!1" "v2!1" "sigma!1"
         "sigma1!1" "sigma2!1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil
    nil nil nil nil (boolean nonempty-type-decl nil booleans nil) nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) nil
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil nil nil)
   25 25 t shostak))
 (wf_initial_MP_state 0
  (wf_initial_MP_state-1 nil 3390055553 3403589939
   ("" (skosimp*)
    (("" (expand "wf_MP")
      (("" (flatten)
        (("" (expand "initial_MP_state")
          (("" (expand "wf_state")
            (("" (split 1)
              (("1" (use "wf_initial_MVA_state")
                (("1" (assert) nil nil)) nil)
               ("2" (use "wf_initial_Program_state")
                (("2" (assert) nil nil)) nil)
               ("3" (use "wf_initial_ghost_state")
                (("1" (assert) nil nil)
                 ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil nil nil nil nil nil nil
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil) nil nil
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil) nil
    nil (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil)
   120 119 t shostak))
 (wf_update_PState 0
  (wf_update_PState-1 nil 3392375856 3403589939 ("" (grind) nil nil)
   untried
   (nil nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil
    nil nil nil nil nil (boolean nonempty-type-decl nil booleans nil)
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil))
   79 80 nil nil))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3392375867 3403589939
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil))))))))
    nil)
   untried (nil nil) 3 2 nil nil))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3392375879 3403589944
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                                          ({x: [Name, Val[Name]] |
                                              EXISTS (l: LocalVarDecl[Name]):
                                                lvds!1(l) AND
                                                 name(l) = PROJ_1(x) AND
                                                  default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(program(p!1))
                                                      (update_local(name(arg!1), param_val!1)
                                                                   (update_locals({x: [Name, Val[Name]]
                                                                                   |
                                                                                   EXISTS
                                                                                   (l: LocalVarDecl[Name]):
                                                                                   lvds!1(l)
                                                                                   AND
                                                                                   name(l) = PROJ_1(x)
                                                                                   AND
                                                                                   default_value(jtype(l))
                                                                                   =
                                                                                   PROJ_2(x)})
                                                                                 (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(program(p!1))
                                                              (update_locals({x: [Name, Val[Name]] |
                                                                                EXISTS (l: LocalVarDecl[Name]):
                                                                                  lvds!1(l) AND
                                                                                   name(l) = PROJ_1(x) AND
                                                                                    default_value(jtype(l)) = PROJ_2(x)})
                                                                            (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "var_names")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                                           EXISTS (l: LocalVarDecl[Name]):
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   untried
   (nil nil nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    (injective? const-decl "bool" functions nil) nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil)
   504 503 t nil))
 (on_method_MVA_yields_wf_AState 0
  (on_method_MVA_yields_wf_AState-1 nil 3402486501 3403589946
   ("" (skosimp)
    (("" (expand "on_method_MVA")
      (("" (split)
        (("1" (flatten)
          (("1" (expand* "wf_AState" "step")
            (("1"
              (name-replace "t" "choose(LAMBDA (t: Transition):
                              ts(mva(mp!1))(t) AND scp(t) = cp(astate(s!1)) AND
                              event(t) = (# etype := et!1, mname := name(m!1) #) AND
                              guard(t)(stA(astate(s!1)), st(pstate(s!1))))")
              (("1" (typepred "t")
                (("1" (typepred "mva(mp!1)")
                  (("1" (expand* "complete" "wf_MVA" "wf_Trans")
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (use "execute_action_yields_wf_state")
                            (("1" (assert)
                              (("1"
                                (expand* "wf_state" "wf_AState")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "wf_state_implies_wf_PSt")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrite "nonempty_exists")
                  (("2" (typepred "mva(mp!1)")
                    (("2" (expand* "complete" "total")
                      (("2" (flatten)
                        (("2"
                          (inst - "cp(astate(s!1))"
                           "(# etype := et!1, mname := name(m!1) #)"
                           "stA(astate(s!1))" "st(pstate(s!1))")
                          (("2" (ground)
                            (("1" (skolem!) (("1" (inst?) nil nil))
                              nil)
                             ("2" (expand* "wf_state" "wf_AState") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "wf_state" -1) (("2" (flatten) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil nil nil nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil) nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil nil
    nil nil nil nil)
   139 139 t shostak))
 (derive_yields_wf_state_MP 0
  (derive_yields_wf_state_MP-1 nil 3402832608 3403590728
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
             (sigma1, sigma2: MPState):
        wf_MP(mp) IMPLIES
         wf_state(mp)(sigma1) IMPLIES
          derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2"
                        (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "program(mp!1)" "b!1" _)
                          (("2"
                            (apply (branch
                                    (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst-cp -7 "m2!1")
                                  (("1"
                                    (inst -7 "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then (flatten) (assert)))))
                                (("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then (flatten) (assert)))))
                                  (("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst? -6 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m2!1")
                                            (("1"
                                              (inst -7 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -7
                                                     :where
                                                     -3)))
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -8
                                                       :where
                                                       -4)))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -8
                                                         :where
                                                         -4)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "m2!1")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -16
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -16
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -16
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -16
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -17
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -18
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -19
                                                                             :where
                                                                             -10)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -20
                                                                               :where
                                                                               -11)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "lookup_mthd")
                                                                                (("1"
                                                                                  (lift-if
                                                                                   -6)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau3!1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "wf_state(mp!1)(tau4!1)")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "wf_state_arg_is_local"
                                                                                                 ("s"
                                                                                                  "pstate(tau4!1)"))
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "get_class_in_classes")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "method_names")
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "m!1 = md!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "wf_state(mp!1)(tau5!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(mp!1)(tau7!1)")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "wf_state(mp!1)(tau8!1)")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -24)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "wf_update_PState")
                                                                                                                            (("1"
                                                                                                                              (inst?
                                                                                                                               -1
                                                                                                                               :where
                                                                                                                               16)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "mp!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "update_PState")
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "wf_state_update_local")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_arg_is_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand*
                                                                                                                                             "is_local"
                                                                                                                                             "lookup_local"
                                                                                                                                             "defined?")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (split
                                                                                                                           -21)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "on_method_exit_normal_MP")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "check_assertion")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (inst-cp
                                                                                                                                         -36
                                                                                                                                         "m3!2 - 1")
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -36
                                                                                                                                           "m2!2 - 1")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -36
                                                                                                                                             "m1!2")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (repeat
                                                                                                                                                  (inst?
                                                                                                                                                   -36
                                                                                                                                                   :where
                                                                                                                                                   -3)))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -37
                                                                                                                                                       :where
                                                                                                                                                       -7)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -38
                                                                                                                                                           :where
                                                                                                                                                           -10)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -38)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -12)
                                                                                                                                                              (("1"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (split
                                                                                                                                                                       2)
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (split
                                                                                                                                                                       1)
                                                                                                                                                                      (skosimp*)))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (use
                                                                                                                                                                         "wf_update_PState")
                                                                                                                                                                        (assert)
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (expand
                                                                                                                                                                         "update_PState")))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                          (assert)))
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (split
                                                                                                                                                               -37)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -9)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -4)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "wf_state"
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "wf_state"
                                                                                                                                                                     -36)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "on_method_MVA_yields_wf_AState")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "on_method_exit_exceptional_MP")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "check_assertion")
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -33
                                                                                                                                           "m2!2 - 1")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -33
                                                                                                                                             "m1!2")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (repeat
                                                                                                                                                  (inst?
                                                                                                                                                   -33
                                                                                                                                                   :where
                                                                                                                                                   -2)))
                                                                                                                                                (("1"
                                                                                                                                                  (apply
                                                                                                                                                   (repeat
                                                                                                                                                    (inst?
                                                                                                                                                     -34
                                                                                                                                                     :where
                                                                                                                                                     -6)))
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -33)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "wf_state(mp!1)(tau3!2)")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -10)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   3)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (use
                                                                                                                                                                         "wf_update_PState")
                                                                                                                                                                        (assert)
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (expand
                                                                                                                                                                         "update_PState")))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                          (assert)))
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -8)
                                                                                                                                                            (("2"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("2"
                                                                                                                                                                (split
                                                                                                                                                                 -34)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (split
                                                                                                                                                                       1)
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (split
                                                                                                                                                                       1)
                                                                                                                                                                      (skosimp*)))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (use
                                                                                                                                                                         "wf_update_PState")
                                                                                                                                                                        (assert)
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (expand
                                                                                                                                                                         "update_PState")))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                          (assert)))
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -4)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "wf_state"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state"
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (use
                                                                                                                                                                               "on_method_MVA_yields_wf_AState")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "wf_ghoststate")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "is_ghost")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (use
                                                                                                                                                           "wf_update_PState")
                                                                                                                                                          (assert)
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")))
                                                                                                                                                        (("2"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (use
                                                                                                                                                             "wf_state_catch")
                                                                                                                                                            (assert)))
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (split
                                                                                                                         -19)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -16)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "wf_state_update_stack")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "getLocalDecls")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "down(get_class(program(mp!1))(a!1))")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "getLocalDecls")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "wf_state"
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "choose({m: Method[Name] |
                                                           classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                            methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                             name(m) = name(b!1)})")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -11
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "program(mp!1)")
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     "wf_Program"
                                                                                                                     "wf_Classes"
                                                                                                                     "wf_Class")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -4
                                                                                                                         "down(get_class(program(mp!1))(a!1))")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "m!1"
                                                                                                                               "md!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (rewrite
                                                                                                               "nonempty_exists")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "on_method_entry_MP")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "on_method_entry")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "check_assertion")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -10)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (inst-cp
                                                                                                                 -29
                                                                                                                 "m3!2")
                                                                                                                (("2"
                                                                                                                  (inst-cp
                                                                                                                   -29
                                                                                                                   "m2!2 - 1")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -29
                                                                                                                     "m1!2 - 1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -29
                                                                                                                           :where
                                                                                                                           -4)))
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (inst?
                                                                                                                             -30
                                                                                                                             :where
                                                                                                                             -7)))
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (inst?
                                                                                                                               -31
                                                                                                                               :where
                                                                                                                               -9)))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "wf_state(mp!1)(s_new!1)")
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -21)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "wf_state"
                                                                                                                                           (3
                                                                                                                                            -2))
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 3)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "on_method_MVA_yields_wf_AState")
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "wf_ghoststate")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "is_ghost")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -8)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       -30)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (apply
                                                                                                                                             (then
                                                                                                                                              (split
                                                                                                                                               20)
                                                                                                                                              (skosimp*)
                                                                                                                                              (split
                                                                                                                                               1)
                                                                                                                                              (skosimp*)))
                                                                                                                                            (("1"
                                                                                                                                              (apply
                                                                                                                                               (then
                                                                                                                                                (use
                                                                                                                                                 "wf_update_PState")
                                                                                                                                                (assert)
                                                                                                                                                (skosimp*)
                                                                                                                                                (expand
                                                                                                                                                 "update_PState")))
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (then
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_raise")
                                                                                                                                                  (assert)))
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -5)
                                                                                                                                        (("2"
                                                                                                                                          (lift-if)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (apply
                                                                                                                                               (then
                                                                                                                                                (split
                                                                                                                                                 1)
                                                                                                                                                (skosimp*)
                                                                                                                                                (split
                                                                                                                                                 1)
                                                                                                                                                (skosimp*)))
                                                                                                                                              (("2"
                                                                                                                                                (apply
                                                                                                                                                 (then
                                                                                                                                                  (use
                                                                                                                                                   "wf_update_PState")
                                                                                                                                                  (assert)
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState")))
                                                                                                                                                (("2"
                                                                                                                                                  (apply
                                                                                                                                                   (then
                                                                                                                                                    (use
                                                                                                                                                     "wf_state_raise")
                                                                                                                                                    (assert)))
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -8)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "wf_update_PState")
                                                                                                          (assert)
                                                                                                          (skosimp*)
                                                                                                          (expand
                                                                                                           "update_PState")))
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "wf_state_raise")
                                                                                                            (assert)))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (case
                                                                 "    FORALL (
            branches : (wf_Branches(program(mp!1))), 
            s1, s2 : MPState, x : nat) :
         execute_CaseJML(mp!1, branches, s1, s2, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                             (b: (wf_Body(program(p))), sigma1: MPState,
                              v: Val[Name], sigma2: MPState)
                             (m: below(k)):
                        derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
        y < x IMPLIES
         (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                 (sigma1, sigma2: MPState):
            wf_MP(mp) IMPLIES
             wf_state(mp)(sigma1) IMPLIES
              derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
               wf_state(mp)(sigma2))) IMPLIES
wf_state(mp!1)(s2)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    -7))
                                                                  (("2"
                                                                    (induct
                                                                     "branches")
                                                                    (("1"
                                                                      (typepred
                                                                       "branches!1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (expand
                                                                         "wf_Branches")
                                                                        (("3"
                                                                          (expand
                                                                           "every"
                                                                           -2)
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (expand
                                                                                 "execute_CaseJML"
                                                                                 -5)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     "derive"
                                                                                     -6)
                                                                                    (("3"
                                                                                      (split
                                                                                       -6)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "check_for_exception")
                                                                                            (("2"
                                                                                              (split
                                                                                               -4)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "wf_state(mp!1)(tau!1)")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -16
                                                                                                           "m2!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -16
                                                                                                                 :where
                                                                                                                 -2)))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -8
                                                                                                           "tau!1"
                                                                                                           "s2!1"
                                                                                                           "m2!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -18
                                                                                                                   "y!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (repeat
                                                                                                                        (inst?
                                                                                                                         -18
                                                                                                                         :where
                                                                                                                         -4)))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "derive"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst
                                                                                                       -14
                                                                                                       "m1!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (apply
                                                                                                           (repeat
                                                                                                            (inst?
                                                                                                             -14
                                                                                                             :where
                                                                                                             -5)))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -11
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -10
                                                                                         :where
                                                                                         -1)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -7
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -7
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "id")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "wf_ghoststate")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "is_ghost")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "defined?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_GhostVars")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_store")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "b!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subterm"
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_bottom_iff_exception_step")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -9
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -9
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -9
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -10
                                                                                             :where
                                                                                             -5)))
                                                                                          (("1"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -11
                                                                                               :where
                                                                                               -6)))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             26)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "wf_update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "wf_state_raise")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "wf_update_PState")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "wf_state_catch")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (use
                                                                                                   "wf_update_PState")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (skosimp*)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "update_PState")
                                                                                                        (("3"
                                                                                                          (use
                                                                                                           "wf_state_catch")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand*
                                                                                               "wf_Body"
                                                                                               "var_names"
                                                                                               "emptyset"
                                                                                               "subterm")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (apply
                                                                                               (then
                                                                                                (inst?)
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   untried
   ((wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil) nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil nil nil nil nil nil nil
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil) nil nil nil
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil) nil nil nil nil nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil
    (is_finite const-decl "bool" finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil
    nil nil nil (set type-eq-decl nil sets nil) nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (emptyset const-decl "set" sets nil) nil nil nil nil nil nil nil
    nil nil nil nil (list_induction formula-decl nil list_adt nil) nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil nil nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil) nil
    nil nil nil nil nil nil nil nil (list type-decl nil list_adt nil)
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil nil nil nil (lift type-decl nil lift_adt nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil
    (wf_nat formula-decl nil naturalnumbers nil))
   59300 10705 t shostak))
 (derive_never_leaves_halted 0
  (derive_never_leaves_halted-1 nil 3404128932 3404131327
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
             (sigma1, sigma2: MPState):
        wf_MP(mp) IMPLIES
         cp(astate(sigma1)) = halted IMPLIES
          derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES
           cp(astate(sigma2)) = halted")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2"
                (apply (branch (split -4)
                        ((then (flatten) (assert) (flatten)
                          (assert)))))
                (("2" (lift-if)
                  (("2"
                    (apply (branch (split -1)
                            ((then (flatten) (assert) (flatten)
                              (assert)))))
                    (("2"
                      (apply (branch (split -1)
                              ((then
                                (flatten)
                                (assert)
                                (flatten)
                                (assert)))))
                      (("1"
                        (apply (then
                                (skosimp*)
                                (copy -6)
                                (inst -1 "m1!1")
                                (inst -7 "m2!1")
                                (assert)
                                (apply (repeat (inst? -1 :where -4)))
                                (apply (repeat (inst? -7 :where -5)))
                                (assert)
                                (flatten)
                                (assert)))
                        nil nil)
                       ("2"
                        (apply (branch
                                (split -1)
                                ((then
                                  (flatten)
                                  (assert)
                                  (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (apply
                                 (then
                                  (skosimp*)
                                  (inst -5 "x!1 - 1")
                                  (assert)
                                  (apply (repeat (inst? -5 :where -3)))
                                  (assert)
                                  (flatten)
                                  (assert)))
                                nil
                                nil)
                               ("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("1"
                                  (apply
                                   (then
                                    (skosimp*)
                                    (copy -6)
                                    (inst -1 "m1!1")
                                    (inst -7 "m2!1")
                                    (assert)
                                    (apply
                                     (repeat (inst? -1 :where -4)))
                                    (apply
                                     (repeat (inst? -7 :where -5)))
                                    (assert)
                                    (flatten)
                                    (assert)))
                                  nil
                                  nil)
                                 ("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                                  (("1"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (copy -6)
                                      (inst -1 "m1!1")
                                      (inst -7 "m2!1")
                                      (assert)
                                      (apply
                                       (repeat (inst? -1 :where -4)))
                                      (apply
                                       (repeat (inst? -7 :where -5)))
                                      (assert)
                                      (flatten)
                                      (assert)))
                                    nil
                                    nil)
                                   ("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (apply
                                             (then
                                              (skosimp*)
                                              (inst -5 "x!1 - 1")
                                              (assert)
                                              (apply
                                               (repeat
                                                (inst? -5 :where -3)))
                                              (assert)
                                              (flatten)
                                              (assert)))
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split -4)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (expand
                                                   "update_PState")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply
                                               (then
                                                (inst -4 "x!1 - 1")
                                                (assert)
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -4
                                                   :where
                                                   -3)))
                                                (assert)
                                                (flatten)
                                                (assert)))
                                              nil
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -6)
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -1 "m1!1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -1
                                                         :where
                                                         -4)))
                                                      (assert)))
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -5)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -2)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -9
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -9
                                                                   :where
                                                                   -2)))
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -1)))
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -15)
                                                    (("1"
                                                      (inst -1 "m1!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -1
                                                             :where
                                                             -4)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy
                                                               -16)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -6)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "cp(astate(tau3!1)) = halted")
                                                                        (("1"
                                                                          (split
                                                                           -9)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "cp(astate(tau4!1)) = halted")
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau5!1)) = halted")
                                                                                  (("1"
                                                                                    (copy
                                                                                     -21)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "m4!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -1
                                                                                             :where
                                                                                             -17)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "cp(astate(tau7!1)) = halted")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cp(astate(tau8!1)) = halted")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   -20)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "on_method_exit_normal_MP")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "on_method_exit_exceptional_MP")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -18)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -22
                                                                                                   "m5!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -22
                                                                                                         :where
                                                                                                         -1)))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "update_stack")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "update_PState")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -14)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "on_method_entry_MP")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -7)
                                                                          (("2"
                                                                            (expand
                                                                             "update_PState")
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst
                                                       -4
                                                       "x!1 - 1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -4
                                                         :where
                                                         -3)))
                                                      (assert)
                                                      (flatten)
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst
                                                         -4
                                                         "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -4
                                                           :where
                                                           -3)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (case
                                                         "FORALL(branches : (wf_Branches(program(mp!1))), sigma1, sigma2 : MPState) : cp(astate(sigma1)) = halted IMPLIES execute_CaseJML(mp!1, branches, sigma1, sigma2, x!1, LAMBDA (k: upto(x!1))(p: MonitoredProgram[CP, Name])
                             (b: (wf_Body(program(p))), sigma1: MPState,
                              v: Val[Name], sigma2: MPState)
                             (m: below(k)):
                        derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES cp(astate(sigma2)) = halted")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -5))
                                                          (("2"
                                                            (induct
                                                             "branches")
                                                            (("1"
                                                              (typepred
                                                               "branches!1")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand*
                                                                 "execute_CaseJML"
                                                                 "extend")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (expand*
                                                                   "execute_CaseJML"
                                                                   "extend")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "wf_Branches")
                                                                      (("3"
                                                                        (expand
                                                                         "every"
                                                                         -2)
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -8
                                                                               "x!1 - 1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -8
                                                                                     :where
                                                                                     -6)))
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (copy -7)
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m1!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -5)))
                                                                (assert)))
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -6)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -2)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -4
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -4
                                                                             :where
                                                                             -2)))
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -3
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -3
                                                                             :where
                                                                             -1)))
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (copy
                                                                 -6)
                                                                (inst
                                                                 -1
                                                                 "m1!1")
                                                                (inst
                                                                 -7
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   -5)))
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -6)))
                                                                (assert)
                                                                (flatten)
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "execute_set")
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (skosimp*)
                                                                  (inst
                                                                   -7
                                                                   "x!1 - 1")
                                                                  (assert)
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -4)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -5)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "update_GhostVars")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (skosimp*)
                                                                    (inst
                                                                     -5
                                                                     "x!1 - 1")
                                                                    (assert)
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (expand
                                                                     "update_PState")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (copy
                                                                         -8)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau2!1)) = halted")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -10
                                                                                     "m3!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -10
                                                                                           :where
                                                                                           -8)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "update_PState")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -6)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (inst
                                                                                         -10
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -10
                                                                                               :where
                                                                                               -2)))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "derive"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (skosimp*)
                                                                          (inst
                                                                           -5
                                                                           "x!1 - 1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -5
                                                                             :where
                                                                             -4)))
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "execute_assert")
                                                                        (("2"
                                                                          (expand
                                                                           "check_assertion")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (skosimp*)
                                                                              (inst
                                                                               -6
                                                                               "x!1 - 1")
                                                                              (assert)
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -6
                                                                                 :where
                                                                                 -3)))
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -4)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("2"
                                                                                  (expand
                                                                                   "update_PState")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   proved
   ((wf_nat formula-decl nil naturalnumbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (extend const-decl "R" extend nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch const-decl "PState" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (update_stack const-decl "FullState" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   2395067 25490 t shostak)))

