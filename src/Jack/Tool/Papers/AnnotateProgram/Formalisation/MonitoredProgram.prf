(MonitoredProgram
 (get_monitored_class_TCC1 0
  (get_monitored_class_TCC1-1 nil 3399182363 3401610559
   ("" (skolem-typepred)
    (("" (expand* "compatible" "nonempty?" "empty?" "member")
      (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil) nil nil nil nil nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   4 4 t nil))
 (name_get_monitored_class 0
  (name_get_monitored_class-1 nil 3400563327 3401613998
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (assert) nil nil)) nil))
    nil)
   untried (nil) 2 2 t shostak))
 (get_monitored_class_in_classes 0
  (get_monitored_class_in_classes-1 nil 3400563719 3401613999
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (propax) nil nil)) nil))
    nil)
   untried (nil) 20 20 t shostak))
 (get_monitored_class_unique_for_wf_MP_TCC1 0
  (get_monitored_class_unique_for_wf_MP_TCC1-1 nil 3399183164
   3401611212
   ("" (skolem-typepred)
    (("" (typepred "program(mp!1)")
      (("" (expand* "wf_MP" "compatible" "singleton?")
        (("" (flatten)
          (("" (skosimp)
            (("" (inst?)
              (("1"
                (expand* "wf_Program"
                 "wf_program_has_unique_class_names_def")
                (("1" (flatten)
                  (("1" (skosimp)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil nil (lift type-decl nil lift_adt nil) nil nil
    nil (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil
    (singleton? const-decl "bool" sets nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   14857 175 t nil))
 (get_monitored_class_unique_for_wf_MP 0
  (get_monitored_class_unique_for_wf_MP-2 nil 3399183561 3401613999
   ("" (skosimp)
    (("" (expand* "get_monitored_class" "choose" "the") nil nil)) nil)
   untried
   (nil (the const-decl "(p)" sets nil)
    (choose const-decl "(p)" sets nil))
   3 2 nil nil)
  (get_monitored_class_unique_for_wf_MP-1 nil 3399183469 3399183536
   ("" (skosimp)
    (("" (expand* "wf_MP" "get_monitored_class" "choose" "the") nil
      nil))
    nil)
   proved
   (nil nil (choose const-decl "(p)" sets nil)
    (the const-decl "(p)" sets nil))
   67208 100 t shostak)))
(MonitoredProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3391514279 3401613999
   ("" (subtype-tcc) nil nil) unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   39 38 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3391514279 3401613999
   ("" (subtype-tcc) nil nil) unchecked nil 23 24 nil nil))
 (wf_state_implies_wf_PSt 0
  (wf_state_implies_wf_PSt-1 nil 3388136206 3401614028
   ("" (skosimp*)
    (("" (expand "wf_PSt")
      (("" (skosimp*)
        (("" (typepred "mp!1")
          (("" (expand "compatible")
            (("" (skosimp*)
              (("" (expand "var_names")
                (("" (skosimp*)
                  (("" (inst -3 "l!1")
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (expand "wf_state")
                          (("" (inst -6 "name(l!1)")
                            (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   2853 2840 t shostak))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3396777599 3401614028
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (expand "wf_state")
        (("" (expand "union")
          (("" (expand "member")
            (("" (flatten)
              (("" (expand "wf_state")
                (("" (expand "wf_ghoststate")
                  (("" (inst -2 "vn!1")
                    (("" (inst -3 "vn!1")
                      (("" (assert)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   7 7 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3396777649 3401614028
   ("" (skosimp*)
    (("" (expand "wf_Program")
      (("" (expand "wf_program_variables_disjoint_def")
        (("" (flatten)
          (("" (expand "wf_state")
            ((""
              (auto-rewrite "disjoint?" "intersection" "member"
                            "empty?")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "wf_state")
                    (("" (expand "wf_ghoststate")
                      (("" (inst -3 "vn!1")
                        (("" (assert)
                          (("" (inst -5 "vn!1")
                            (("" (inst -5 "vn!1")
                              ((""
                                (assert)
                                ((""
                                  (inst -2 "vn!1")
                                  ((""
                                    (flatten)
                                    ((""
                                      (split 3)
                                      (("1"
                                        (split -5)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (expand
                                           "wf_program_variables_not_reserved_words_def")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -8 "vn!1")
                                              (("2"
                                                (expand
                                                 "reserved_words")
                                                (("2"
                                                  (expand
                                                   "declared_var_names")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil))
   32 32 t shostak))
 (on_method_MVA_TCC1 0
  (on_method_MVA_TCC1-1 nil 3387174104 3401614030
   ("" (skosimp*) (("" (typepred "s!1") (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((lift type-decl nil lift_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (choose const-decl "(p)" sets nil))
   137 137 t nil))
 (on_method_MVA_TCC2 0
  (on_method_MVA_TCC2-1 nil 3387174104 3401614030
   ("" (skosimp*)
    (("" (expand "wf_PEvent")
      (("" (assert)
        (("" (use "wf_state_implies_wf_PSt")
          (("" (assert)
            (("" (expand "wf_state") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   6 6 t nil))
 (on_method_MVA_TCC3 0
  (on_method_MVA_TCC3-1 nil 3392369297 3401614030
   ("" (skosimp*)
    (("" (typepred "mva(mp!1)")
      (("" (expand "complete") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   3 3 t nil))
 (on_method_entry_MP_TCC1 0
  (on_method_entry_MP_TCC1-1 nil 3387174104 3401614030
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_entry")
        (("" (assert)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (skosimp*)
                (("2" (assert)
                  (("2" (split -7)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   56 56 t nil))
 (on_method_exit_normal_MP_TCC1 0
  (on_method_exit_normal_MP_TCC1-1 nil 3387174104 3401614031
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_normal")
        (("" (split -1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (skosimp*)
              (("2" (assert)
                (("2" (split -7)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   37 38 t nil))
 (on_method_exit_normal_MP_TCC2 0
  (on_method_exit_normal_MP_TCC2-1 nil 3401773402 3401773450
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   1473 60 t nil))
 (on_method_exit_normal_MP_TCC3 0
  (on_method_exit_normal_MP_TCC3-1 nil 3401773402 3401774019
   ("" (subtype-tcc) nil nil) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   45 45 nil nil))
 (on_method_exit_normal_MP_TCC4 0
  (on_method_exit_normal_MP_TCC4-1 nil 3401773402 3401774021
   ("" (subtype-tcc) nil nil) unchecked
   ((choose const-decl "(p)" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   203 203 nil nil))
 (on_method_exit_normal_MP_TCC5 0
  (on_method_exit_normal_MP_TCC5-1 nil 3401773402 3401774023
   ("" (subtype-tcc) nil nil) unchecked
   ((choose const-decl "(p)" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   213 213 nil nil))
 (on_method_exit_normal_MP_TCC6 0
  (on_method_exit_normal_MP_TCC6-1 nil 3401773402 3401773475
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_BoolExpr")
        (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   1770 26 t nil))
 (on_method_exit_normal_MP_TCC7 0
  (on_method_exit_normal_MP_TCC7-1 nil 3401773402 3401773607
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1380 36 t nil))
 (on_method_exit_exceptional_MP_TCC1 0
  (on_method_exit_exceptional_MP_TCC1-1 nil 3387174104 3401614031
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_exceptional")
        (("" (split -1)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (split -8)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -7)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2"
                                (typepred "update_PState")
                                (("2"
                                  (expand "update_PState_type")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst -1 "s_new!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "raise")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   41 41 t nil))
 (on_method_exit_exceptional_MP_TCC2 0
  (on_method_exit_exceptional_MP_TCC2-1 nil 3401773402 3401773504
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   951 5 t nil))
 (on_method_exit_exceptional_MP_TCC3 0
  (on_method_exit_exceptional_MP_TCC3-1 nil 3401773402 3401774024
   ("" (subtype-tcc) nil nil) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   62 63 nil nil))
 (on_method_exit_exceptional_MP_TCC4 0
  (on_method_exit_exceptional_MP_TCC4-1 nil 3401773402 3401774026
   ("" (subtype-tcc) nil nil) unchecked
   ((choose const-decl "(p)" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   185 186 nil nil))
 (on_method_exit_exceptional_MP_TCC5 0
  (on_method_exit_exceptional_MP_TCC5-1 nil 3401773402 3401773587
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp*)
          (("1" (assert)
            (("1" (replace -7)
              (("1" (lift-if)
                (("1" (assert)
                  (("1" (split 2)
                    (("1" (propax) nil nil)
                     ("2" (expand "update_PState")
                      (("2" (expand "raise") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   6453 64 t nil))
 (initial_MP_state_TCC1 0
  (initial_MP_state_TCC1-1 nil 3387174104 3401774026
   ("" (subtype-tcc) nil nil) unchecked
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   65 65 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3392371550 3401774030
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (flatten)
        (("" (skosimp*)
          (("" (expand "on_method_entry")
            (("" (split -2)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (replace -2 :dir rl)
                      (("2" (replace -10)
                        (("2" (expand "check_assertion")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (copy -11)
                                (("2"
                                  (apply
                                   (repeat (inst? -1 :where (-5 -17))))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case-replace
                                         "tau1!1 = tau1!2")
                                        (("1"
                                          (copy -15)
                                          (("1"
                                            (apply
                                             (repeat
                                              (inst?
                                               -1
                                               :where
                                               (-12 -24))))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case-replace
                                                   "tau2!1 = tau2!2")
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -19
                                                       :where
                                                       (-17 -29))))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -19)
                                                          (("1"
                                                            (split -32)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -3)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -27)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -3)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split -20)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   340 341 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-2 nil 3392373362 3401774726
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      (("" (flatten)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "check_assertion")
                  (("2" (flatten)
                    (("2" (skosimp*)
                      (("2" (replace -4 :dir rl)
                        (("2" (replace -16)
                          (("2" (copy -12)
                            (("2"
                              (apply (repeat
                                      (inst? -1 :where (-3 -15))))
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (case-replace
                                       "tau2!1 = tau2!2"
                                       :hide?
                                       t)
                                      (("1"
                                        (copy -14)
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst?
                                             -1
                                             :where
                                             (-9 -21))))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case-replace
                                                 "tau3!1 = tau3!2"
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -17
                                                     :where
                                                     (-14 -26))))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -19)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split -15)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -24)
                                                    (("2"
                                                      (replace -12)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -17)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   42874 547 t nil)
  (IMP_SemanticsProofs_TCC2-1 nil 3392371550 3392371598
   ("" (assuming-tcc) nil nil) unfinished nil 2662 2380 nil nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-2 nil 3392373370 3401774866
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (flatten)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "check_assertion")
                  (("1" (flatten)
                    (("1" (skosimp*)
                      (("1" (replace -5 :dir rl)
                        (("1" (replace -15)
                          (("1" (copy -11)
                            (("1"
                              (apply (repeat
                                      (inst? -1 :where (-4 -14))))
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case-replace
                                       "tau2!1 = tau2!2"
                                       :hide?
                                       t)
                                      (("1"
                                        (apply
                                         (repeat
                                          (inst? -13 :where (-9 -19))))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -13)
                                              (("1"
                                                (case-replace
                                                 "tau3!1 = tau3!2")
                                                (("1"
                                                  (replace -12)
                                                  (("1"
                                                    (replace -24)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -22)
                                                  (("2"
                                                    (replace -10)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -16)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   13475 209 t nil)
  (IMP_SemanticsProofs_TCC3-1 nil 3392371550 3392371601
   ("" (assuming-tcc) nil nil) unfinished nil 2668 2370 nil nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3392371550 3401774034
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (lift-if)
        (("" (split -2)
          (("1" (flatten)
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2"
                  (inst -4
                   "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                           CaseJML(cdr(branches!1)))" "Unit" "Unit"
                   "s!1" "s1!1" "s2!1" "n1!1" "n2!1" "n1!1 - 1"
                   "n2!1 - 1")
                  (("1" (assert)
                    (("1" (split -4)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   79 78 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3392371550 3401774035
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1"
           "n2!1" "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -1)
                  (("1" (replace -3)
                    (("1" (replace -6 :dir rl) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   55 55 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3397385945 3401774036
   ("" (skosimp*)
    (("" (expand "execute_assert")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (expand "check_assertion")
              (("2" (skosimp*)
                (("2" (apply (repeat (inst? -5 :where (-2 -7))))
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -5)
                        (("1" (replace -7)
                          (("1" (lift-if)
                            (("1" (split -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   86 86 t nil))
 (determ_step_MP 0
  (determ_step_MP-1 nil 3396350156 3401774036
   ("" (skosimp*)
    (("" (lemma "derive_determ_step")
      ((""
        (inst -1 "p!1" "n1!1" "n2!1" "b!1" "v1!1" "v2!1" "sigma!1"
         "sigma1!1" "sigma2!1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil))
   8 8 t shostak))
 (wf_initial_MP_state 0
  (wf_initial_MP_state-1 nil 3390055553 3401774037
   ("" (skosimp*)
    (("" (expand "wf_MP")
      (("" (flatten)
        (("" (expand "initial_MP_state")
          (("" (expand "wf_state")
            (("" (split 1)
              (("1" (use "wf_initial_MVA_state")
                (("1" (assert) nil nil)) nil)
               ("2" (use "wf_initial_Program_state")
                (("2" (assert) nil nil)) nil)
               ("3" (use "wf_initial_ghost_state")
                (("1" (assert) nil nil)
                 ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   118 118 t shostak))
 (wf_update_PState 0
  (wf_update_PState-1 nil 3392375856 3401774038 ("" (grind) nil nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   97 96 nil nil))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3392375867 3401774038
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil))))))))
    nil)
   unfinished nil 6 6 nil nil))
 (wf_state_update_stack 0
  (wf_state_update_stack-1 nil 3392375879 3401774042
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                                          ({x: [Name, Val[Name]] |
                                              EXISTS (l: LocalVarDecl[Name]):
                                                lvds!1(l) AND
                                                 name(l) = PROJ_1(x) AND
                                                  default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1"
                                (use "wf_state_update_local")
                                (("1"
                                  (case
                                   "wf_state(program(p!1))
                                                      (update_local(name(arg!1), param_val!1)
                                                                   (update_locals({x: [Name, Val[Name]]
                                                                                   |
                                                                                   EXISTS
                                                                                   (l: LocalVarDecl[Name]):
                                                                                   lvds!1(l)
                                                                                   AND
                                                                                   name(l) = PROJ_1(x)
                                                                                   AND
                                                                                   default_value(jtype(l))
                                                                                   =
                                                                                   PROJ_2(x)})
                                                                                 (pstate(s!1))))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(program(p!1))
                                                              (update_locals({x: [Name, Val[Name]] |
                                                                                EXISTS (l: LocalVarDecl[Name]):
                                                                                  lvds!1(l) AND
                                                                                   name(l) = PROJ_1(x) AND
                                                                                    default_value(jtype(l)) = PROJ_2(x)})
                                                                            (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use
                                                 "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "name(l!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "var_names")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(x : ({x: [Name, Val[Name]] |
                                           EXISTS (l: LocalVarDecl[Name]):
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                             lvds!1(l) AND
                                              name(l) = PROJ_1(x) AND
                                               default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (rewrite "nonempty_exists")
                                (("2"
                                  (typepred "x2!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "nonempty_exists")
                                (("3"
                                  (typepred "x1!1")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lift type-decl nil lift_adt nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   445 445 t nil))
 (on_method_MVA_yields_wf_AState_TCC1 0
  (on_method_MVA_yields_wf_AState_TCC1-1 nil 3402486468 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (on_method_MVA_yields_wf_AState 0
  (on_method_MVA_yields_wf_AState-1 nil 3402486501 3402502930
   ("" (skosimp)
    (("" (expand "on_method_MVA")
      (("" (split)
        (("1" (flatten)
          (("1" (expand* "wf_AState" "step")
            (("1"
              (name-replace "t" "choose(LAMBDA (t: Transition):
                              ts(mva(mp!1))(t) AND scp(t) = cp(astate(s!1)) AND
                              event(t) = (# etype := et!1, mname := name(m!1) #) AND
                              guard(t)(stA(astate(s!1)), st(pstate(s!1))))")
              (("1" (typepred "t")
                (("1" (typepred "mva(mp!1)")
                  (("1" (expand* "complete" "wf_MVA" "wf_Trans")
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (use "execute_action_yields_wf_state")
                            (("1" (assert)
                              (("1"
                                (expand* "wf_state" "wf_AState")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "wf_state_implies_wf_PSt")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrite "nonempty_exists")
                  (("2" (typepred "mva(mp!1)")
                    (("2" (expand* "complete" "total")
                      (("2" (flatten)
                        (("2"
                          (inst - "cp(astate(s!1))"
                           "(# etype := et!1, mname := name(m!1) #)"
                           "stA(astate(s!1))" "st(pstate(s!1))")
                          (("2" (ground)
                            (("1" (skolem!) (("1" (inst?) nil nil))
                              nil)
                             ("2" (expand* "wf_state" "wf_AState") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "wf_state" -1) (("2" (flatten) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (wf_state_implies_wf_PSt formula-decl nil MonitoredProgramSemantics
     nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil) (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (execute_action_yields_wf_state formula-decl nil MVASemantics nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (total const-decl "boolean" MVASemantics nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, Name]"
     MonitoredProgramSemantics nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     MonitoredProgramSemantics nil)
    (s!1 skolem-const-decl "MPState" MonitoredProgramSemantics nil)
    (et!1 skolem-const-decl "EventType" MonitoredProgramSemantics nil)
    (m!1 skolem-const-decl "Method[Name]" MonitoredProgramSemantics
     nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (step const-decl "AState" MVASemantics nil))
   341027 840 t shostak)))

